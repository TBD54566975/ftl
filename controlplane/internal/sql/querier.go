// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package sql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	AssignDeployment(ctx context.Context, iD int64, deploymentID pgtype.Int8) error
	AssociateArtefactWithDeployment(ctx context.Context, arg AssociateArtefactWithDeploymentParams) error
	// Create a new artefact and return the artefact ID.
	CreateArtefact(ctx context.Context, digest []byte, content []byte) (int64, error)
	CreateDeployment(ctx context.Context, moduleName string, schema []byte) (uuid.UUID, error)
	CreateModule(ctx context.Context, language string, name string) (int64, error)
	DeleteStaleRunners(ctx context.Context, dollar_1 pgtype.Interval) (int64, error)
	DeregisterRunner(ctx context.Context, id int64) error
	GetArtefactContentRange(ctx context.Context, start int32, count int32, iD int64) ([]byte, error)
	// Return the digests that exist in the database.
	GetArtefactDigests(ctx context.Context, digests [][]byte) ([]GetArtefactDigestsRow, error)
	GetDeployment(ctx context.Context, key uuid.UUID) (GetDeploymentRow, error)
	// Get all artefacts matching the given digests.
	GetDeploymentArtefacts(ctx context.Context, deploymentID int64) ([]GetDeploymentArtefactsRow, error)
	GetDeploymentsByID(ctx context.Context, ids []int64) ([]Deployment, error)
	// Get all deployments that have artefacts matching the given digests.
	GetDeploymentsWithArtefacts(ctx context.Context, digests [][]byte, count interface{}) ([]GetDeploymentsWithArtefactsRow, error)
	GetIdleRunnersForLanguage(ctx context.Context, language string) ([]Runner, error)
	GetLatestDeployment(ctx context.Context, moduleName string) (GetLatestDeploymentRow, error)
	GetModulesByID(ctx context.Context, ids []int64) ([]Module, error)
	// Get all runners that are assigned to run the given module.
	GetRunnersForModule(ctx context.Context, name string) ([]GetRunnersForModuleRow, error)
	HeartbeatRunner(ctx context.Context, id int64) error
	RegisterRunner(ctx context.Context, language string, endpoint string) (int64, error)
}

var _ Querier = (*Queries)(nil)
