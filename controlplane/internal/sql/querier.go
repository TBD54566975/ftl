// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package sql

import (
	"context"

	"github.com/TBD54566975/ftl/controlplane/internal/sqltypes"
	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	AssociateArtefactWithDeployment(ctx context.Context, arg AssociateArtefactWithDeploymentParams) error
	// Create a new artefact and return the artefact ID.
	CreateArtefact(ctx context.Context, digest []byte, content []byte) (int64, error)
	CreateDeployment(ctx context.Context, key sqltypes.Key, moduleName string, schema []byte) error
	CreateModule(ctx context.Context, language string, name string) (int64, error)
	DeleteStaleRunners(ctx context.Context, dollar_1 pgtype.Interval) (int64, error)
	DeregisterRunner(ctx context.Context, key sqltypes.Key) (int64, error)
	ExpireRunnerReservations(ctx context.Context) (int64, error)
	GetArtefactContentRange(ctx context.Context, start int32, count int32, iD int64) ([]byte, error)
	// Return the digests that exist in the database.
	GetArtefactDigests(ctx context.Context, digests [][]byte) ([]GetArtefactDigestsRow, error)
	GetDeployment(ctx context.Context, key sqltypes.Key) (GetDeploymentRow, error)
	// Get all artefacts matching the given digests.
	GetDeploymentArtefacts(ctx context.Context, deploymentID int64) ([]GetDeploymentArtefactsRow, error)
	// Get the number of runners assigned to each deployment.
	GetDeploymentReplicaCounts(ctx context.Context) ([]GetDeploymentReplicaCountsRow, error)
	GetDeploymentsByID(ctx context.Context, ids []int64) ([]Deployment, error)
	// Get all deployments that have artefacts matching the given digests.
	GetDeploymentsWithArtefacts(ctx context.Context, digests [][]byte, count interface{}) ([]GetDeploymentsWithArtefactsRow, error)
	GetIdleRunnerCountsByLanguage(ctx context.Context) ([]GetIdleRunnerCountsByLanguageRow, error)
	GetIdleRunnersForLanguage(ctx context.Context, language string, limit int32) ([]Runner, error)
	GetLatestDeployment(ctx context.Context, moduleName string) (GetLatestDeploymentRow, error)
	GetModulesByID(ctx context.Context, ids []int64) ([]Module, error)
	GetRoutingTable(ctx context.Context, name string) ([]string, error)
	GetRunnerState(ctx context.Context, key sqltypes.Key) (RunnerState, error)
	// Get all runners that are assigned to run the given module.
	GetRunnersForModule(ctx context.Context, name string) ([]GetRunnersForModuleRow, error)
	InsertDeploymentLogEntry(ctx context.Context, arg InsertDeploymentLogEntryParams) error
	InsertMetricEntry(ctx context.Context, arg InsertMetricEntryParams) error
	// Find idle runners and reserve them for the given deployment.
	ReserveRunners(ctx context.Context, language string, limit int32, deploymentKey sqltypes.Key) (Runner, error)
	// Upsert a runner and return the deployment ID that it is assigned to, if any.
	// If the deployment key is null, then deployment_rel.id will be null,
	// otherwise we try to retrieve the deployments.id using the key. If
	// there is no corresponding deployment, then the deployment ID is -1
	// and the parent statement will fail due to a foreign key constraint.
	UpsertRunner(ctx context.Context, arg UpsertRunnerParams) (pgtype.Int8, error)
}

var _ Querier = (*Queries)(nil)
