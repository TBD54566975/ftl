-- +goose Up
CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE TABLE modules (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  language VARCHAR NOT NULL,
  name VARCHAR UNIQUE NOT NULL
);

CREATE TABLE deployments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
  module_id BIGINT NOT NULL REFERENCES modules(id) ON DELETE CASCADE,
  -- Unique identifier for this deployment.
  "key" UUID UNIQUE NOT NULL,
  -- Proto-encoded module schema.
  "schema" BYTEA NOT NULL
);

CREATE INDEX deployments_module_id_idx ON deployments (module_id);

CREATE TABLE artefacts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
  -- SHA256 digest of the content.
  digest BYTEA UNIQUE NOT NULL,
  content BYTEA NOT NULL
);

CREATE TABLE deployment_artefacts (
  artefact_id BIGINT NOT NULL REFERENCES artefacts(id) ON DELETE CASCADE,
  deployment_id BIGINT NOT NULL REFERENCES deployments(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
  executable BOOLEAN NOT NULL,
  -- Path relative to the module root.
  path VARCHAR NOT NULL
);

CREATE INDEX deployment_artefacts_deployment_id_idx ON deployment_artefacts (deployment_id);

CREATE TABLE deployment_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  deployment_id BIGINT NOT NULL REFERENCES deployments(id) ON DELETE CASCADE,
  verb VARCHAR,
  time_stamp TIMESTAMPTZ NOT NULL,
  level INT NOT NULL, -- https://opentelemetry.io/docs/specs/otel/logs/data-model/#displaying-severity
  scope VARCHAR NOT NULL,
  message TEXT NOT NULL,
  error TEXT
);

-- Runners are processes that are available to run modules.
CREATE TABLE runners (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  -- Unique identifier for this runner, generated at startup.
  key UUID UNIQUE NOT NULL,
  last_seen TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
  language VARCHAR NOT NULL,
  endpoint VARCHAR UNIQUE NOT NULL,
  deployment_id BIGINT REFERENCES deployments(id) ON DELETE SET NULL
);

CREATE INDEX runners_language_deployment_id_idx ON runners (language, deployment_id);