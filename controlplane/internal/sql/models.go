// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0

package sql

import (
	"database/sql/driver"
	"fmt"

	"github.com/TBD54566975/ftl/controlplane/internal/sqltypes"
	"github.com/jackc/pgx/v5/pgtype"
)

type MetricType string

const (
	MetricTypeCounter   MetricType = "counter"
	MetricTypeGauge     MetricType = "gauge"
	MetricTypeHistogram MetricType = "histogram"
)

func (e *MetricType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MetricType(s)
	case string:
		*e = MetricType(s)
	default:
		return fmt.Errorf("unsupported scan type for MetricType: %T", src)
	}
	return nil
}

type NullMetricType struct {
	MetricType MetricType
	Valid      bool // Valid is true if MetricType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMetricType) Scan(value interface{}) error {
	if value == nil {
		ns.MetricType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MetricType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMetricType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MetricType), nil
}

type RunnerState string

const (
	RunnerStateIdle     RunnerState = "idle"
	RunnerStateReserved RunnerState = "reserved"
	RunnerStateAssigned RunnerState = "assigned"
	RunnerStateDead     RunnerState = "dead"
)

func (e *RunnerState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RunnerState(s)
	case string:
		*e = RunnerState(s)
	default:
		return fmt.Errorf("unsupported scan type for RunnerState: %T", src)
	}
	return nil
}

type NullRunnerState struct {
	RunnerState RunnerState
	Valid       bool // Valid is true if RunnerState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRunnerState) Scan(value interface{}) error {
	if value == nil {
		ns.RunnerState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RunnerState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRunnerState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RunnerState), nil
}

type Artefact struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	Digest    []byte
	Content   []byte
}

type Deployment struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	ModuleID    int64
	Key         sqltypes.Key
	Schema      []byte
	MinReplicas int32
}

type DeploymentArtefact struct {
	ArtefactID   int64
	DeploymentID int64
	CreatedAt    pgtype.Timestamptz
	Executable   bool
	Path         string
}

type DeploymentLog struct {
	ID           int64
	DeploymentID int64
	Verb         pgtype.Text
	TimeStamp    pgtype.Timestamptz
	Level        int32
	Scope        string
	Message      string
	Error        pgtype.Text
}

type Metric struct {
	ID           int64
	RunnerID     pgtype.Int8
	StartTime    pgtype.Timestamptz
	EndTime      pgtype.Timestamptz
	SourceModule string
	SourceVerb   string
	DestModule   string
	DestVerb     string
	Name         string
	Type         MetricType
	Value        []byte
}

type Module struct {
	ID       int64
	Language string
	Name     string
}

type Runner struct {
	ID                 int64
	Key                sqltypes.Key
	LastSeen           pgtype.Timestamptz
	ReservationTimeout pgtype.Timestamptz
	State              RunnerState
	Language           string
	Endpoint           string
	DeploymentID       pgtype.Int8
}
