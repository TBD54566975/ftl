// THIS FILE IS GENERATED; DO NOT MODIFY

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/schema/v1/schema.proto (package xyz.block.ftl.schema.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum xyz.block.ftl.schema.v1.AliasKind
 */
export enum AliasKind {
  /**
   * @generated from enum value: ALIAS_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ALIAS_KIND_JSON = 1;
   */
  JSON = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AliasKind)
proto3.util.setEnumType(AliasKind, "xyz.block.ftl.schema.v1.AliasKind", [
  { no: 0, name: "ALIAS_KIND_UNSPECIFIED" },
  { no: 1, name: "ALIAS_KIND_JSON" },
]);

/**
 * @generated from enum xyz.block.ftl.schema.v1.FromOffset
 */
export enum FromOffset {
  /**
   * @generated from enum value: FROM_OFFSET_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FROM_OFFSET_BEGINNING = 1;
   */
  BEGINNING = 1,

  /**
   * @generated from enum value: FROM_OFFSET_LATEST = 2;
   */
  LATEST = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FromOffset)
proto3.util.setEnumType(FromOffset, "xyz.block.ftl.schema.v1.FromOffset", [
  { no: 0, name: "FROM_OFFSET_UNSPECIFIED" },
  { no: 1, name: "FROM_OFFSET_BEGINNING" },
  { no: 2, name: "FROM_OFFSET_LATEST" },
]);

/**
 * @generated from message xyz.block.ftl.schema.v1.AWSIAMAuthDatabaseConnector
 */
export class AWSIAMAuthDatabaseConnector extends Message<AWSIAMAuthDatabaseConnector> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  /**
   * @generated from field: string database = 4;
   */
  database = "";

  constructor(data?: PartialMessage<AWSIAMAuthDatabaseConnector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.AWSIAMAuthDatabaseConnector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AWSIAMAuthDatabaseConnector {
    return new AWSIAMAuthDatabaseConnector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AWSIAMAuthDatabaseConnector {
    return new AWSIAMAuthDatabaseConnector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AWSIAMAuthDatabaseConnector {
    return new AWSIAMAuthDatabaseConnector().fromJsonString(jsonString, options);
  }

  static equals(a: AWSIAMAuthDatabaseConnector | PlainMessage<AWSIAMAuthDatabaseConnector> | undefined, b: AWSIAMAuthDatabaseConnector | PlainMessage<AWSIAMAuthDatabaseConnector> | undefined): boolean {
    return proto3.util.equals(AWSIAMAuthDatabaseConnector, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Any
 */
export class Any extends Message<Any> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  constructor(data?: PartialMessage<Any>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Any";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Any {
    return new Any().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Any {
    return new Any().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Any {
    return new Any().fromJsonString(jsonString, options);
  }

  static equals(a: Any | PlainMessage<Any> | undefined, b: Any | PlainMessage<Any> | undefined): boolean {
    return proto3.util.equals(Any, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Array
 */
export class Array extends Message<Array> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type element = 2;
   */
  element?: Type;

  constructor(data?: PartialMessage<Array>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Array";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "element", kind: "message", T: Type },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Array {
    return new Array().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Array {
    return new Array().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Array {
    return new Array().fromJsonString(jsonString, options);
  }

  static equals(a: Array | PlainMessage<Array> | undefined, b: Array | PlainMessage<Array> | undefined): boolean {
    return proto3.util.equals(Array, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Bool
 */
export class Bool extends Message<Bool> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  constructor(data?: PartialMessage<Bool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Bool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bool {
    return new Bool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bool {
    return new Bool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bool {
    return new Bool().fromJsonString(jsonString, options);
  }

  static equals(a: Bool | PlainMessage<Bool> | undefined, b: Bool | PlainMessage<Bool> | undefined): boolean {
    return proto3.util.equals(Bool, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Bytes
 */
export class Bytes extends Message<Bytes> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  constructor(data?: PartialMessage<Bytes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Bytes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bytes {
    return new Bytes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bytes {
    return new Bytes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bytes {
    return new Bytes().fromJsonString(jsonString, options);
  }

  static equals(a: Bytes | PlainMessage<Bytes> | undefined, b: Bytes | PlainMessage<Bytes> | undefined): boolean {
    return proto3.util.equals(Bytes, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Config
 */
export class Config extends Message<Config> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type type = 4;
   */
  type?: Type;

  constructor(data?: PartialMessage<Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "message", T: Type },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {
    return new Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJsonString(jsonString, options);
  }

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean {
    return proto3.util.equals(Config, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.DSNDatabaseConnector
 */
export class DSNDatabaseConnector extends Message<DSNDatabaseConnector> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string dsn = 2;
   */
  dsn = "";

  constructor(data?: PartialMessage<DSNDatabaseConnector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.DSNDatabaseConnector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DSNDatabaseConnector {
    return new DSNDatabaseConnector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DSNDatabaseConnector {
    return new DSNDatabaseConnector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DSNDatabaseConnector {
    return new DSNDatabaseConnector().fromJsonString(jsonString, options);
  }

  static equals(a: DSNDatabaseConnector | PlainMessage<DSNDatabaseConnector> | undefined, b: DSNDatabaseConnector | PlainMessage<DSNDatabaseConnector> | undefined): boolean {
    return proto3.util.equals(DSNDatabaseConnector, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Data
 */
export class Data extends Message<Data> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: bool export = 3;
   */
  export = false;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.TypeParameter type_parameters = 5;
   */
  typeParameters: TypeParameter[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Field fields = 6;
   */
  fields: Field[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Metadata metadata = 7;
   */
  metadata: Metadata[] = [];

  constructor(data?: PartialMessage<Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "export", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type_parameters", kind: "message", T: TypeParameter, repeated: true },
    { no: 6, name: "fields", kind: "message", T: Field, repeated: true },
    { no: 7, name: "metadata", kind: "message", T: Metadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {
    return new Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJsonString(jsonString, options);
  }

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {
    return proto3.util.equals(Data, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Database
 */
export class Database extends Message<Database> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.DatabaseRuntime runtime = 31634;
   */
  runtime?: DatabaseRuntime;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Metadata metadata = 5;
   */
  metadata: Metadata[] = [];

  constructor(data?: PartialMessage<Database>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Database";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 31634, name: "runtime", kind: "message", T: DatabaseRuntime, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "metadata", kind: "message", T: Metadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Database {
    return new Database().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Database {
    return new Database().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Database {
    return new Database().fromJsonString(jsonString, options);
  }

  static equals(a: Database | PlainMessage<Database> | undefined, b: Database | PlainMessage<Database> | undefined): boolean {
    return proto3.util.equals(Database, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.DatabaseConnector
 */
export class DatabaseConnector extends Message<DatabaseConnector> {
  /**
   * @generated from oneof xyz.block.ftl.schema.v1.DatabaseConnector.value
   */
  value: {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.AWSIAMAuthDatabaseConnector awsiam_auth_database_connector = 2;
     */
    value: AWSIAMAuthDatabaseConnector;
    case: "awsiamAuthDatabaseConnector";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.DSNDatabaseConnector dsn_database_connector = 1;
     */
    value: DSNDatabaseConnector;
    case: "dsnDatabaseConnector";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DatabaseConnector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.DatabaseConnector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "awsiam_auth_database_connector", kind: "message", T: AWSIAMAuthDatabaseConnector, oneof: "value" },
    { no: 1, name: "dsn_database_connector", kind: "message", T: DSNDatabaseConnector, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseConnector {
    return new DatabaseConnector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseConnector {
    return new DatabaseConnector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseConnector {
    return new DatabaseConnector().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseConnector | PlainMessage<DatabaseConnector> | undefined, b: DatabaseConnector | PlainMessage<DatabaseConnector> | undefined): boolean {
    return proto3.util.equals(DatabaseConnector, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.DatabaseRuntime
 */
export class DatabaseRuntime extends Message<DatabaseRuntime> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.DatabaseRuntimeConnections connections = 1;
   */
  connections?: DatabaseRuntimeConnections;

  constructor(data?: PartialMessage<DatabaseRuntime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.DatabaseRuntime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connections", kind: "message", T: DatabaseRuntimeConnections, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseRuntime {
    return new DatabaseRuntime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseRuntime {
    return new DatabaseRuntime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseRuntime {
    return new DatabaseRuntime().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseRuntime | PlainMessage<DatabaseRuntime> | undefined, b: DatabaseRuntime | PlainMessage<DatabaseRuntime> | undefined): boolean {
    return proto3.util.equals(DatabaseRuntime, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.DatabaseRuntimeConnections
 */
export class DatabaseRuntimeConnections extends Message<DatabaseRuntimeConnections> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.DatabaseConnector read = 1;
   */
  read?: DatabaseConnector;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.DatabaseConnector write = 2;
   */
  write?: DatabaseConnector;

  constructor(data?: PartialMessage<DatabaseRuntimeConnections>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.DatabaseRuntimeConnections";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read", kind: "message", T: DatabaseConnector },
    { no: 2, name: "write", kind: "message", T: DatabaseConnector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseRuntimeConnections {
    return new DatabaseRuntimeConnections().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseRuntimeConnections {
    return new DatabaseRuntimeConnections().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseRuntimeConnections {
    return new DatabaseRuntimeConnections().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseRuntimeConnections | PlainMessage<DatabaseRuntimeConnections> | undefined, b: DatabaseRuntimeConnections | PlainMessage<DatabaseRuntimeConnections> | undefined): boolean {
    return proto3.util.equals(DatabaseRuntimeConnections, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.DatabaseRuntimeConnectionsEvent
 */
export class DatabaseRuntimeConnectionsEvent extends Message<DatabaseRuntimeConnectionsEvent> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.DatabaseRuntimeConnections connections = 1;
   */
  connections?: DatabaseRuntimeConnections;

  constructor(data?: PartialMessage<DatabaseRuntimeConnectionsEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.DatabaseRuntimeConnectionsEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connections", kind: "message", T: DatabaseRuntimeConnections },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseRuntimeConnectionsEvent {
    return new DatabaseRuntimeConnectionsEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseRuntimeConnectionsEvent {
    return new DatabaseRuntimeConnectionsEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseRuntimeConnectionsEvent {
    return new DatabaseRuntimeConnectionsEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseRuntimeConnectionsEvent | PlainMessage<DatabaseRuntimeConnectionsEvent> | undefined, b: DatabaseRuntimeConnectionsEvent | PlainMessage<DatabaseRuntimeConnectionsEvent> | undefined): boolean {
    return proto3.util.equals(DatabaseRuntimeConnectionsEvent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.DatabaseRuntimeEvent
 */
export class DatabaseRuntimeEvent extends Message<DatabaseRuntimeEvent> {
  /**
   * @generated from oneof xyz.block.ftl.schema.v1.DatabaseRuntimeEvent.value
   */
  value: {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.DatabaseRuntimeConnectionsEvent database_runtime_connections_event = 1;
     */
    value: DatabaseRuntimeConnectionsEvent;
    case: "databaseRuntimeConnectionsEvent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DatabaseRuntimeEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.DatabaseRuntimeEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database_runtime_connections_event", kind: "message", T: DatabaseRuntimeConnectionsEvent, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseRuntimeEvent {
    return new DatabaseRuntimeEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseRuntimeEvent {
    return new DatabaseRuntimeEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseRuntimeEvent {
    return new DatabaseRuntimeEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseRuntimeEvent | PlainMessage<DatabaseRuntimeEvent> | undefined, b: DatabaseRuntimeEvent | PlainMessage<DatabaseRuntimeEvent> | undefined): boolean {
    return proto3.util.equals(DatabaseRuntimeEvent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Decl
 */
export class Decl extends Message<Decl> {
  /**
   * @generated from oneof xyz.block.ftl.schema.v1.Decl.value
   */
  value: {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Config config = 6;
     */
    value: Config;
    case: "config";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Data data = 1;
     */
    value: Data;
    case: "data";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Database database = 3;
     */
    value: Database;
    case: "database";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Enum enum = 4;
     */
    value: Enum;
    case: "enum";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Secret secret = 7;
     */
    value: Secret;
    case: "secret";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Topic topic = 9;
     */
    value: Topic;
    case: "topic";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.TypeAlias type_alias = 5;
     */
    value: TypeAlias;
    case: "typeAlias";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Verb verb = 2;
     */
    value: Verb;
    case: "verb";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Decl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Decl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "config", kind: "message", T: Config, oneof: "value" },
    { no: 1, name: "data", kind: "message", T: Data, oneof: "value" },
    { no: 3, name: "database", kind: "message", T: Database, oneof: "value" },
    { no: 4, name: "enum", kind: "message", T: Enum, oneof: "value" },
    { no: 7, name: "secret", kind: "message", T: Secret, oneof: "value" },
    { no: 9, name: "topic", kind: "message", T: Topic, oneof: "value" },
    { no: 5, name: "type_alias", kind: "message", T: TypeAlias, oneof: "value" },
    { no: 2, name: "verb", kind: "message", T: Verb, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Decl {
    return new Decl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Decl {
    return new Decl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Decl {
    return new Decl().fromJsonString(jsonString, options);
  }

  static equals(a: Decl | PlainMessage<Decl> | undefined, b: Decl | PlainMessage<Decl> | undefined): boolean {
    return proto3.util.equals(Decl, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Enum
 */
export class Enum extends Message<Enum> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: bool export = 3;
   */
  export = false;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Type type = 5;
   */
  type?: Type;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.EnumVariant variants = 6;
   */
  variants: EnumVariant[] = [];

  constructor(data?: PartialMessage<Enum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Enum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "export", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "message", T: Type, opt: true },
    { no: 6, name: "variants", kind: "message", T: EnumVariant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Enum {
    return new Enum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Enum {
    return new Enum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Enum {
    return new Enum().fromJsonString(jsonString, options);
  }

  static equals(a: Enum | PlainMessage<Enum> | undefined, b: Enum | PlainMessage<Enum> | undefined): boolean {
    return proto3.util.equals(Enum, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.EnumVariant
 */
export class EnumVariant extends Message<EnumVariant> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Value value = 4;
   */
  value?: Value;

  constructor(data?: PartialMessage<EnumVariant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.EnumVariant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnumVariant {
    return new EnumVariant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnumVariant {
    return new EnumVariant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnumVariant {
    return new EnumVariant().fromJsonString(jsonString, options);
  }

  static equals(a: EnumVariant | PlainMessage<EnumVariant> | undefined, b: EnumVariant | PlainMessage<EnumVariant> | undefined): boolean {
    return proto3.util.equals(EnumVariant, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Field
 */
export class Field extends Message<Field> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 3;
   */
  comments: string[] = [];

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type type = 4;
   */
  type?: Type;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Metadata metadata = 5;
   */
  metadata: Metadata[] = [];

  constructor(data?: PartialMessage<Field>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Field";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 3, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "message", T: Type },
    { no: 5, name: "metadata", kind: "message", T: Metadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Field {
    return new Field().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Field {
    return new Field().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Field {
    return new Field().fromJsonString(jsonString, options);
  }

  static equals(a: Field | PlainMessage<Field> | undefined, b: Field | PlainMessage<Field> | undefined): boolean {
    return proto3.util.equals(Field, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Float
 */
export class Float extends Message<Float> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  constructor(data?: PartialMessage<Float>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Float";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Float {
    return new Float().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Float {
    return new Float().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Float {
    return new Float().fromJsonString(jsonString, options);
  }

  static equals(a: Float | PlainMessage<Float> | undefined, b: Float | PlainMessage<Float> | undefined): boolean {
    return proto3.util.equals(Float, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.IngressPathComponent
 */
export class IngressPathComponent extends Message<IngressPathComponent> {
  /**
   * @generated from oneof xyz.block.ftl.schema.v1.IngressPathComponent.value
   */
  value: {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.IngressPathLiteral ingress_path_literal = 1;
     */
    value: IngressPathLiteral;
    case: "ingressPathLiteral";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.IngressPathParameter ingress_path_parameter = 2;
     */
    value: IngressPathParameter;
    case: "ingressPathParameter";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<IngressPathComponent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.IngressPathComponent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingress_path_literal", kind: "message", T: IngressPathLiteral, oneof: "value" },
    { no: 2, name: "ingress_path_parameter", kind: "message", T: IngressPathParameter, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngressPathComponent {
    return new IngressPathComponent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngressPathComponent {
    return new IngressPathComponent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngressPathComponent {
    return new IngressPathComponent().fromJsonString(jsonString, options);
  }

  static equals(a: IngressPathComponent | PlainMessage<IngressPathComponent> | undefined, b: IngressPathComponent | PlainMessage<IngressPathComponent> | undefined): boolean {
    return proto3.util.equals(IngressPathComponent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.IngressPathLiteral
 */
export class IngressPathLiteral extends Message<IngressPathLiteral> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<IngressPathLiteral>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.IngressPathLiteral";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngressPathLiteral {
    return new IngressPathLiteral().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngressPathLiteral {
    return new IngressPathLiteral().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngressPathLiteral {
    return new IngressPathLiteral().fromJsonString(jsonString, options);
  }

  static equals(a: IngressPathLiteral | PlainMessage<IngressPathLiteral> | undefined, b: IngressPathLiteral | PlainMessage<IngressPathLiteral> | undefined): boolean {
    return proto3.util.equals(IngressPathLiteral, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.IngressPathParameter
 */
export class IngressPathParameter extends Message<IngressPathParameter> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<IngressPathParameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.IngressPathParameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngressPathParameter {
    return new IngressPathParameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngressPathParameter {
    return new IngressPathParameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngressPathParameter {
    return new IngressPathParameter().fromJsonString(jsonString, options);
  }

  static equals(a: IngressPathParameter | PlainMessage<IngressPathParameter> | undefined, b: IngressPathParameter | PlainMessage<IngressPathParameter> | undefined): boolean {
    return proto3.util.equals(IngressPathParameter, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Int
 */
export class Int extends Message<Int> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  constructor(data?: PartialMessage<Int>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Int";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Int {
    return new Int().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Int {
    return new Int().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Int {
    return new Int().fromJsonString(jsonString, options);
  }

  static equals(a: Int | PlainMessage<Int> | undefined, b: Int | PlainMessage<Int> | undefined): boolean {
    return proto3.util.equals(Int, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.IntValue
 */
export class IntValue extends Message<IntValue> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: int64 value = 2;
   */
  value = protoInt64.zero;

  constructor(data?: PartialMessage<IntValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.IntValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntValue {
    return new IntValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntValue {
    return new IntValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntValue {
    return new IntValue().fromJsonString(jsonString, options);
  }

  static equals(a: IntValue | PlainMessage<IntValue> | undefined, b: IntValue | PlainMessage<IntValue> | undefined): boolean {
    return proto3.util.equals(IntValue, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Map
 */
export class Map extends Message<Map> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type key = 2;
   */
  key?: Type;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type value = 3;
   */
  value?: Type;

  constructor(data?: PartialMessage<Map>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Map";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "key", kind: "message", T: Type },
    { no: 3, name: "value", kind: "message", T: Type },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Map {
    return new Map().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Map {
    return new Map().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Map {
    return new Map().fromJsonString(jsonString, options);
  }

  static equals(a: Map | PlainMessage<Map> | undefined, b: Map | PlainMessage<Map> | undefined): boolean {
    return proto3.util.equals(Map, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from oneof xyz.block.ftl.schema.v1.Metadata.value
   */
  value: {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataAlias alias = 5;
     */
    value: MetadataAlias;
    case: "alias";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataCalls calls = 1;
     */
    value: MetadataCalls;
    case: "calls";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataConfig config = 10;
     */
    value: MetadataConfig;
    case: "config";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataCronJob cron_job = 3;
     */
    value: MetadataCronJob;
    case: "cronJob";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataDatabases databases = 4;
     */
    value: MetadataDatabases;
    case: "databases";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataEncoding encoding = 9;
     */
    value: MetadataEncoding;
    case: "encoding";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataIngress ingress = 2;
     */
    value: MetadataIngress;
    case: "ingress";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataPublisher publisher = 12;
     */
    value: MetadataPublisher;
    case: "publisher";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataRetry retry = 6;
     */
    value: MetadataRetry;
    case: "retry";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataSQLMigration sql_migration = 13;
     */
    value: MetadataSQLMigration;
    case: "sqlMigration";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataSecrets secrets = 11;
     */
    value: MetadataSecrets;
    case: "secrets";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataSubscriber subscriber = 7;
     */
    value: MetadataSubscriber;
    case: "subscriber";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.MetadataTypeMap type_map = 8;
     */
    value: MetadataTypeMap;
    case: "typeMap";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "alias", kind: "message", T: MetadataAlias, oneof: "value" },
    { no: 1, name: "calls", kind: "message", T: MetadataCalls, oneof: "value" },
    { no: 10, name: "config", kind: "message", T: MetadataConfig, oneof: "value" },
    { no: 3, name: "cron_job", kind: "message", T: MetadataCronJob, oneof: "value" },
    { no: 4, name: "databases", kind: "message", T: MetadataDatabases, oneof: "value" },
    { no: 9, name: "encoding", kind: "message", T: MetadataEncoding, oneof: "value" },
    { no: 2, name: "ingress", kind: "message", T: MetadataIngress, oneof: "value" },
    { no: 12, name: "publisher", kind: "message", T: MetadataPublisher, oneof: "value" },
    { no: 6, name: "retry", kind: "message", T: MetadataRetry, oneof: "value" },
    { no: 13, name: "sql_migration", kind: "message", T: MetadataSQLMigration, oneof: "value" },
    { no: 11, name: "secrets", kind: "message", T: MetadataSecrets, oneof: "value" },
    { no: 7, name: "subscriber", kind: "message", T: MetadataSubscriber, oneof: "value" },
    { no: 8, name: "type_map", kind: "message", T: MetadataTypeMap, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataAlias
 */
export class MetadataAlias extends Message<MetadataAlias> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.AliasKind kind = 2;
   */
  kind = AliasKind.UNSPECIFIED;

  /**
   * @generated from field: string alias = 3;
   */
  alias = "";

  constructor(data?: PartialMessage<MetadataAlias>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataAlias";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(AliasKind) },
    { no: 3, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataAlias {
    return new MetadataAlias().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataAlias {
    return new MetadataAlias().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataAlias {
    return new MetadataAlias().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataAlias | PlainMessage<MetadataAlias> | undefined, b: MetadataAlias | PlainMessage<MetadataAlias> | undefined): boolean {
    return proto3.util.equals(MetadataAlias, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataCalls
 */
export class MetadataCalls extends Message<MetadataCalls> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Ref calls = 2;
   */
  calls: Ref[] = [];

  constructor(data?: PartialMessage<MetadataCalls>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataCalls";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "calls", kind: "message", T: Ref, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataCalls {
    return new MetadataCalls().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataCalls {
    return new MetadataCalls().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataCalls {
    return new MetadataCalls().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataCalls | PlainMessage<MetadataCalls> | undefined, b: MetadataCalls | PlainMessage<MetadataCalls> | undefined): boolean {
    return proto3.util.equals(MetadataCalls, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataConfig
 */
export class MetadataConfig extends Message<MetadataConfig> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Ref config = 2;
   */
  config: Ref[] = [];

  constructor(data?: PartialMessage<MetadataConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "config", kind: "message", T: Ref, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataConfig {
    return new MetadataConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataConfig {
    return new MetadataConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataConfig {
    return new MetadataConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataConfig | PlainMessage<MetadataConfig> | undefined, b: MetadataConfig | PlainMessage<MetadataConfig> | undefined): boolean {
    return proto3.util.equals(MetadataConfig, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataCronJob
 */
export class MetadataCronJob extends Message<MetadataCronJob> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string cron = 2;
   */
  cron = "";

  constructor(data?: PartialMessage<MetadataCronJob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataCronJob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "cron", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataCronJob {
    return new MetadataCronJob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataCronJob {
    return new MetadataCronJob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataCronJob {
    return new MetadataCronJob().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataCronJob | PlainMessage<MetadataCronJob> | undefined, b: MetadataCronJob | PlainMessage<MetadataCronJob> | undefined): boolean {
    return proto3.util.equals(MetadataCronJob, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataDatabases
 */
export class MetadataDatabases extends Message<MetadataDatabases> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Ref calls = 2;
   */
  calls: Ref[] = [];

  constructor(data?: PartialMessage<MetadataDatabases>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataDatabases";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "calls", kind: "message", T: Ref, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataDatabases {
    return new MetadataDatabases().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataDatabases {
    return new MetadataDatabases().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataDatabases {
    return new MetadataDatabases().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataDatabases | PlainMessage<MetadataDatabases> | undefined, b: MetadataDatabases | PlainMessage<MetadataDatabases> | undefined): boolean {
    return proto3.util.equals(MetadataDatabases, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataEncoding
 */
export class MetadataEncoding extends Message<MetadataEncoding> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: bool lenient = 3;
   */
  lenient = false;

  constructor(data?: PartialMessage<MetadataEncoding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataEncoding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lenient", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataEncoding {
    return new MetadataEncoding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataEncoding {
    return new MetadataEncoding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataEncoding {
    return new MetadataEncoding().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataEncoding | PlainMessage<MetadataEncoding> | undefined, b: MetadataEncoding | PlainMessage<MetadataEncoding> | undefined): boolean {
    return proto3.util.equals(MetadataEncoding, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataIngress
 */
export class MetadataIngress extends Message<MetadataIngress> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string method = 3;
   */
  method = "";

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.IngressPathComponent path = 4;
   */
  path: IngressPathComponent[] = [];

  constructor(data?: PartialMessage<MetadataIngress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataIngress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "message", T: IngressPathComponent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataIngress {
    return new MetadataIngress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataIngress {
    return new MetadataIngress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataIngress {
    return new MetadataIngress().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataIngress | PlainMessage<MetadataIngress> | undefined, b: MetadataIngress | PlainMessage<MetadataIngress> | undefined): boolean {
    return proto3.util.equals(MetadataIngress, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataPublisher
 */
export class MetadataPublisher extends Message<MetadataPublisher> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Ref topics = 2;
   */
  topics: Ref[] = [];

  constructor(data?: PartialMessage<MetadataPublisher>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataPublisher";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "topics", kind: "message", T: Ref, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataPublisher {
    return new MetadataPublisher().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataPublisher {
    return new MetadataPublisher().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataPublisher {
    return new MetadataPublisher().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataPublisher | PlainMessage<MetadataPublisher> | undefined, b: MetadataPublisher | PlainMessage<MetadataPublisher> | undefined): boolean {
    return proto3.util.equals(MetadataPublisher, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataRetry
 */
export class MetadataRetry extends Message<MetadataRetry> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: optional int64 count = 2;
   */
  count?: bigint;

  /**
   * @generated from field: string min_backoff = 3;
   */
  minBackoff = "";

  /**
   * @generated from field: string max_backoff = 4;
   */
  maxBackoff = "";

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Ref catch = 5;
   */
  catch?: Ref;

  constructor(data?: PartialMessage<MetadataRetry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataRetry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "min_backoff", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "max_backoff", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "catch", kind: "message", T: Ref, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataRetry {
    return new MetadataRetry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataRetry {
    return new MetadataRetry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataRetry {
    return new MetadataRetry().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataRetry | PlainMessage<MetadataRetry> | undefined, b: MetadataRetry | PlainMessage<MetadataRetry> | undefined): boolean {
    return proto3.util.equals(MetadataRetry, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataSQLMigration
 */
export class MetadataSQLMigration extends Message<MetadataSQLMigration> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string digest = 2;
   */
  digest = "";

  constructor(data?: PartialMessage<MetadataSQLMigration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataSQLMigration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataSQLMigration {
    return new MetadataSQLMigration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataSQLMigration {
    return new MetadataSQLMigration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataSQLMigration {
    return new MetadataSQLMigration().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataSQLMigration | PlainMessage<MetadataSQLMigration> | undefined, b: MetadataSQLMigration | PlainMessage<MetadataSQLMigration> | undefined): boolean {
    return proto3.util.equals(MetadataSQLMigration, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataSecrets
 */
export class MetadataSecrets extends Message<MetadataSecrets> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Ref secrets = 2;
   */
  secrets: Ref[] = [];

  constructor(data?: PartialMessage<MetadataSecrets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataSecrets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "secrets", kind: "message", T: Ref, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataSecrets {
    return new MetadataSecrets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataSecrets {
    return new MetadataSecrets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataSecrets {
    return new MetadataSecrets().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataSecrets | PlainMessage<MetadataSecrets> | undefined, b: MetadataSecrets | PlainMessage<MetadataSecrets> | undefined): boolean {
    return proto3.util.equals(MetadataSecrets, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataSubscriber
 */
export class MetadataSubscriber extends Message<MetadataSubscriber> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Ref topic = 2;
   */
  topic?: Ref;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.FromOffset from_offset = 3;
   */
  fromOffset = FromOffset.UNSPECIFIED;

  /**
   * @generated from field: bool dead_letter = 4;
   */
  deadLetter = false;

  constructor(data?: PartialMessage<MetadataSubscriber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataSubscriber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "topic", kind: "message", T: Ref },
    { no: 3, name: "from_offset", kind: "enum", T: proto3.getEnumType(FromOffset) },
    { no: 4, name: "dead_letter", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataSubscriber {
    return new MetadataSubscriber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataSubscriber {
    return new MetadataSubscriber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataSubscriber {
    return new MetadataSubscriber().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataSubscriber | PlainMessage<MetadataSubscriber> | undefined, b: MetadataSubscriber | PlainMessage<MetadataSubscriber> | undefined): boolean {
    return proto3.util.equals(MetadataSubscriber, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.MetadataTypeMap
 */
export class MetadataTypeMap extends Message<MetadataTypeMap> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string runtime = 2;
   */
  runtime = "";

  /**
   * @generated from field: string native_name = 3;
   */
  nativeName = "";

  constructor(data?: PartialMessage<MetadataTypeMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.MetadataTypeMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "runtime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "native_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataTypeMap {
    return new MetadataTypeMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataTypeMap {
    return new MetadataTypeMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataTypeMap {
    return new MetadataTypeMap().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataTypeMap | PlainMessage<MetadataTypeMap> | undefined, b: MetadataTypeMap | PlainMessage<MetadataTypeMap> | undefined): boolean {
    return proto3.util.equals(MetadataTypeMap, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Module
 */
export class Module extends Message<Module> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: bool builtin = 3;
   */
  builtin = false;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Decl decls = 5;
   */
  decls: Decl[] = [];

  /**
   * @generated from field: xyz.block.ftl.schema.v1.ModuleRuntime runtime = 31634;
   */
  runtime?: ModuleRuntime;

  constructor(data?: PartialMessage<Module>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Module";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "builtin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "decls", kind: "message", T: Decl, repeated: true },
    { no: 31634, name: "runtime", kind: "message", T: ModuleRuntime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Module {
    return new Module().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJsonString(jsonString, options);
  }

  static equals(a: Module | PlainMessage<Module> | undefined, b: Module | PlainMessage<Module> | undefined): boolean {
    return proto3.util.equals(Module, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.ModuleRuntime
 */
export class ModuleRuntime extends Message<ModuleRuntime> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.ModuleRuntimeBase base = 1;
   */
  base?: ModuleRuntimeBase;

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.ModuleRuntimeScaling scaling = 2;
   */
  scaling?: ModuleRuntimeScaling;

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.ModuleRuntimeDeployment deployment = 3;
   */
  deployment?: ModuleRuntimeDeployment;

  constructor(data?: PartialMessage<ModuleRuntime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.ModuleRuntime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base", kind: "message", T: ModuleRuntimeBase },
    { no: 2, name: "scaling", kind: "message", T: ModuleRuntimeScaling, opt: true },
    { no: 3, name: "deployment", kind: "message", T: ModuleRuntimeDeployment, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleRuntime {
    return new ModuleRuntime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleRuntime {
    return new ModuleRuntime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleRuntime {
    return new ModuleRuntime().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleRuntime | PlainMessage<ModuleRuntime> | undefined, b: ModuleRuntime | PlainMessage<ModuleRuntime> | undefined): boolean {
    return proto3.util.equals(ModuleRuntime, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.ModuleRuntimeBase
 */
export class ModuleRuntimeBase extends Message<ModuleRuntimeBase> {
  /**
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: optional string os = 3;
   */
  os?: string;

  /**
   * @generated from field: optional string arch = 4;
   */
  arch?: string;

  /**
   * @generated from field: optional string image = 5;
   */
  image?: string;

  constructor(data?: PartialMessage<ModuleRuntimeBase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.ModuleRuntimeBase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "create_time", kind: "message", T: Timestamp },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "os", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "arch", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleRuntimeBase {
    return new ModuleRuntimeBase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleRuntimeBase {
    return new ModuleRuntimeBase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleRuntimeBase {
    return new ModuleRuntimeBase().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleRuntimeBase | PlainMessage<ModuleRuntimeBase> | undefined, b: ModuleRuntimeBase | PlainMessage<ModuleRuntimeBase> | undefined): boolean {
    return proto3.util.equals(ModuleRuntimeBase, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.ModuleRuntimeDeployment
 */
export class ModuleRuntimeDeployment extends Message<ModuleRuntimeDeployment> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = "";

  /**
   * @generated from field: string deployment_key = 2;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<ModuleRuntimeDeployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.ModuleRuntimeDeployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleRuntimeDeployment {
    return new ModuleRuntimeDeployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleRuntimeDeployment {
    return new ModuleRuntimeDeployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleRuntimeDeployment {
    return new ModuleRuntimeDeployment().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleRuntimeDeployment | PlainMessage<ModuleRuntimeDeployment> | undefined, b: ModuleRuntimeDeployment | PlainMessage<ModuleRuntimeDeployment> | undefined): boolean {
    return proto3.util.equals(ModuleRuntimeDeployment, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.ModuleRuntimeEvent
 */
export class ModuleRuntimeEvent extends Message<ModuleRuntimeEvent> {
  /**
   * @generated from oneof xyz.block.ftl.schema.v1.ModuleRuntimeEvent.value
   */
  value: {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.ModuleRuntimeBase module_runtime_base = 1;
     */
    value: ModuleRuntimeBase;
    case: "moduleRuntimeBase";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.ModuleRuntimeDeployment module_runtime_deployment = 3;
     */
    value: ModuleRuntimeDeployment;
    case: "moduleRuntimeDeployment";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.ModuleRuntimeScaling module_runtime_scaling = 2;
     */
    value: ModuleRuntimeScaling;
    case: "moduleRuntimeScaling";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ModuleRuntimeEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.ModuleRuntimeEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module_runtime_base", kind: "message", T: ModuleRuntimeBase, oneof: "value" },
    { no: 3, name: "module_runtime_deployment", kind: "message", T: ModuleRuntimeDeployment, oneof: "value" },
    { no: 2, name: "module_runtime_scaling", kind: "message", T: ModuleRuntimeScaling, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleRuntimeEvent {
    return new ModuleRuntimeEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleRuntimeEvent {
    return new ModuleRuntimeEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleRuntimeEvent {
    return new ModuleRuntimeEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleRuntimeEvent | PlainMessage<ModuleRuntimeEvent> | undefined, b: ModuleRuntimeEvent | PlainMessage<ModuleRuntimeEvent> | undefined): boolean {
    return proto3.util.equals(ModuleRuntimeEvent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.ModuleRuntimeScaling
 */
export class ModuleRuntimeScaling extends Message<ModuleRuntimeScaling> {
  /**
   * @generated from field: int32 min_replicas = 1;
   */
  minReplicas = 0;

  constructor(data?: PartialMessage<ModuleRuntimeScaling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.ModuleRuntimeScaling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleRuntimeScaling {
    return new ModuleRuntimeScaling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleRuntimeScaling {
    return new ModuleRuntimeScaling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleRuntimeScaling {
    return new ModuleRuntimeScaling().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleRuntimeScaling | PlainMessage<ModuleRuntimeScaling> | undefined, b: ModuleRuntimeScaling | PlainMessage<ModuleRuntimeScaling> | undefined): boolean {
    return proto3.util.equals(ModuleRuntimeScaling, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Optional
 */
export class Optional extends Message<Optional> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Type type = 2;
   */
  type?: Type;

  constructor(data?: PartialMessage<Optional>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Optional";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "type", kind: "message", T: Type, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Optional {
    return new Optional().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Optional {
    return new Optional().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Optional {
    return new Optional().fromJsonString(jsonString, options);
  }

  static equals(a: Optional | PlainMessage<Optional> | undefined, b: Optional | PlainMessage<Optional> | undefined): boolean {
    return proto3.util.equals(Optional, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Position
 */
export class Position extends Message<Position> {
  /**
   * @generated from field: string filename = 1;
   */
  filename = "";

  /**
   * @generated from field: int64 line = 2;
   */
  line = protoInt64.zero;

  /**
   * @generated from field: int64 column = 3;
   */
  column = protoInt64.zero;

  constructor(data?: PartialMessage<Position>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Position";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "column", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Position {
    return new Position().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJsonString(jsonString, options);
  }

  static equals(a: Position | PlainMessage<Position> | undefined, b: Position | PlainMessage<Position> | undefined): boolean {
    return proto3.util.equals(Position, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Ref
 */
export class Ref extends Message<Ref> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string module = 3;
   */
  module = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Type type_parameters = 4;
   */
  typeParameters: Type[] = [];

  constructor(data?: PartialMessage<Ref>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Ref";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 3, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type_parameters", kind: "message", T: Type, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ref {
    return new Ref().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ref {
    return new Ref().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ref {
    return new Ref().fromJsonString(jsonString, options);
  }

  static equals(a: Ref | PlainMessage<Ref> | undefined, b: Ref | PlainMessage<Ref> | undefined): boolean {
    return proto3.util.equals(Ref, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Schema
 */
export class Schema extends Message<Schema> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Module modules = 2;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<Schema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Schema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schema {
    return new Schema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJsonString(jsonString, options);
  }

  static equals(a: Schema | PlainMessage<Schema> | undefined, b: Schema | PlainMessage<Schema> | undefined): boolean {
    return proto3.util.equals(Schema, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Secret
 */
export class Secret extends Message<Secret> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type type = 4;
   */
  type?: Type;

  constructor(data?: PartialMessage<Secret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Secret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "message", T: Type },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Secret {
    return new Secret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Secret {
    return new Secret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Secret {
    return new Secret().fromJsonString(jsonString, options);
  }

  static equals(a: Secret | PlainMessage<Secret> | undefined, b: Secret | PlainMessage<Secret> | undefined): boolean {
    return proto3.util.equals(Secret, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.String
 */
export class String extends Message<String> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  constructor(data?: PartialMessage<String>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.String";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): String {
    return new String().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): String {
    return new String().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): String {
    return new String().fromJsonString(jsonString, options);
  }

  static equals(a: String | PlainMessage<String> | undefined, b: String | PlainMessage<String> | undefined): boolean {
    return proto3.util.equals(String, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.StringValue
 */
export class StringValue extends Message<StringValue> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<StringValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.StringValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringValue {
    return new StringValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringValue {
    return new StringValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringValue {
    return new StringValue().fromJsonString(jsonString, options);
  }

  static equals(a: StringValue | PlainMessage<StringValue> | undefined, b: StringValue | PlainMessage<StringValue> | undefined): boolean {
    return proto3.util.equals(StringValue, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Time
 */
export class Time extends Message<Time> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  constructor(data?: PartialMessage<Time>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Time";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Time {
    return new Time().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Time {
    return new Time().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Time {
    return new Time().fromJsonString(jsonString, options);
  }

  static equals(a: Time | PlainMessage<Time> | undefined, b: Time | PlainMessage<Time> | undefined): boolean {
    return proto3.util.equals(Time, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Topic
 */
export class Topic extends Message<Topic> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.TopicRuntime runtime = 31634;
   */
  runtime?: TopicRuntime;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: bool export = 3;
   */
  export = false;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type event = 5;
   */
  event?: Type;

  constructor(data?: PartialMessage<Topic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Topic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 31634, name: "runtime", kind: "message", T: TopicRuntime, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "export", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "event", kind: "message", T: Type },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Topic {
    return new Topic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Topic {
    return new Topic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Topic {
    return new Topic().fromJsonString(jsonString, options);
  }

  static equals(a: Topic | PlainMessage<Topic> | undefined, b: Topic | PlainMessage<Topic> | undefined): boolean {
    return proto3.util.equals(Topic, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.TopicRuntime
 */
export class TopicRuntime extends Message<TopicRuntime> {
  /**
   * @generated from field: repeated string kafka_brokers = 1;
   */
  kafkaBrokers: string[] = [];

  /**
   * @generated from field: string topic_id = 2;
   */
  topicId = "";

  constructor(data?: PartialMessage<TopicRuntime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.TopicRuntime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kafka_brokers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "topic_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopicRuntime {
    return new TopicRuntime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopicRuntime {
    return new TopicRuntime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopicRuntime {
    return new TopicRuntime().fromJsonString(jsonString, options);
  }

  static equals(a: TopicRuntime | PlainMessage<TopicRuntime> | undefined, b: TopicRuntime | PlainMessage<TopicRuntime> | undefined): boolean {
    return proto3.util.equals(TopicRuntime, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Type
 */
export class Type extends Message<Type> {
  /**
   * @generated from oneof xyz.block.ftl.schema.v1.Type.value
   */
  value: {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Any any = 9;
     */
    value: Any;
    case: "any";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Array array = 7;
     */
    value: Array;
    case: "array";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Bool bool = 5;
     */
    value: Bool;
    case: "bool";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Bytes bytes = 4;
     */
    value: Bytes;
    case: "bytes";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Float float = 2;
     */
    value: Float;
    case: "float";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Int int = 1;
     */
    value: Int;
    case: "int";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Map map = 8;
     */
    value: Map;
    case: "map";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Optional optional = 12;
     */
    value: Optional;
    case: "optional";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Ref ref = 11;
     */
    value: Ref;
    case: "ref";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.String string = 3;
     */
    value: String;
    case: "string";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Time time = 6;
     */
    value: Time;
    case: "time";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.Unit unit = 10;
     */
    value: Unit;
    case: "unit";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Type>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Type";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 9, name: "any", kind: "message", T: Any, oneof: "value" },
    { no: 7, name: "array", kind: "message", T: Array, oneof: "value" },
    { no: 5, name: "bool", kind: "message", T: Bool, oneof: "value" },
    { no: 4, name: "bytes", kind: "message", T: Bytes, oneof: "value" },
    { no: 2, name: "float", kind: "message", T: Float, oneof: "value" },
    { no: 1, name: "int", kind: "message", T: Int, oneof: "value" },
    { no: 8, name: "map", kind: "message", T: Map, oneof: "value" },
    { no: 12, name: "optional", kind: "message", T: Optional, oneof: "value" },
    { no: 11, name: "ref", kind: "message", T: Ref, oneof: "value" },
    { no: 3, name: "string", kind: "message", T: String, oneof: "value" },
    { no: 6, name: "time", kind: "message", T: Time, oneof: "value" },
    { no: 10, name: "unit", kind: "message", T: Unit, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Type {
    return new Type().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Type {
    return new Type().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Type {
    return new Type().fromJsonString(jsonString, options);
  }

  static equals(a: Type | PlainMessage<Type> | undefined, b: Type | PlainMessage<Type> | undefined): boolean {
    return proto3.util.equals(Type, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.TypeAlias
 */
export class TypeAlias extends Message<TypeAlias> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: bool export = 3;
   */
  export = false;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type type = 5;
   */
  type?: Type;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Metadata metadata = 6;
   */
  metadata: Metadata[] = [];

  constructor(data?: PartialMessage<TypeAlias>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.TypeAlias";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "export", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "message", T: Type },
    { no: 6, name: "metadata", kind: "message", T: Metadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypeAlias {
    return new TypeAlias().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypeAlias {
    return new TypeAlias().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypeAlias {
    return new TypeAlias().fromJsonString(jsonString, options);
  }

  static equals(a: TypeAlias | PlainMessage<TypeAlias> | undefined, b: TypeAlias | PlainMessage<TypeAlias> | undefined): boolean {
    return proto3.util.equals(TypeAlias, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.TypeParameter
 */
export class TypeParameter extends Message<TypeParameter> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<TypeParameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.TypeParameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypeParameter {
    return new TypeParameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypeParameter {
    return new TypeParameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypeParameter {
    return new TypeParameter().fromJsonString(jsonString, options);
  }

  static equals(a: TypeParameter | PlainMessage<TypeParameter> | undefined, b: TypeParameter | PlainMessage<TypeParameter> | undefined): boolean {
    return proto3.util.equals(TypeParameter, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.TypeValue
 */
export class TypeValue extends Message<TypeValue> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type value = 2;
   */
  value?: Type;

  constructor(data?: PartialMessage<TypeValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.TypeValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "value", kind: "message", T: Type },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypeValue {
    return new TypeValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypeValue {
    return new TypeValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypeValue {
    return new TypeValue().fromJsonString(jsonString, options);
  }

  static equals(a: TypeValue | PlainMessage<TypeValue> | undefined, b: TypeValue | PlainMessage<TypeValue> | undefined): boolean {
    return proto3.util.equals(TypeValue, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Unit
 */
export class Unit extends Message<Unit> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  constructor(data?: PartialMessage<Unit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Unit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Unit {
    return new Unit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Unit {
    return new Unit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Unit {
    return new Unit().fromJsonString(jsonString, options);
  }

  static equals(a: Unit | PlainMessage<Unit> | undefined, b: Unit | PlainMessage<Unit> | undefined): boolean {
    return proto3.util.equals(Unit, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Value
 */
export class Value extends Message<Value> {
  /**
   * @generated from oneof xyz.block.ftl.schema.v1.Value.value
   */
  value: {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.IntValue int_value = 2;
     */
    value: IntValue;
    case: "intValue";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.StringValue string_value = 1;
     */
    value: StringValue;
    case: "stringValue";
  } | {
    /**
     * @generated from field: xyz.block.ftl.schema.v1.TypeValue type_value = 3;
     */
    value: TypeValue;
    case: "typeValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "int_value", kind: "message", T: IntValue, oneof: "value" },
    { no: 1, name: "string_value", kind: "message", T: StringValue, oneof: "value" },
    { no: 3, name: "type_value", kind: "message", T: TypeValue, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Value {
    return new Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJsonString(jsonString, options);
  }

  static equals(a: Value | PlainMessage<Value> | undefined, b: Value | PlainMessage<Value> | undefined): boolean {
    return proto3.util.equals(Value, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.Verb
 */
export class Verb extends Message<Verb> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Position pos = 1;
   */
  pos?: Position;

  /**
   * @generated from field: repeated string comments = 2;
   */
  comments: string[] = [];

  /**
   * @generated from field: bool export = 3;
   */
  export = false;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type request = 5;
   */
  request?: Type;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Type response = 6;
   */
  response?: Type;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Metadata metadata = 7;
   */
  metadata: Metadata[] = [];

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.VerbRuntime runtime = 31634;
   */
  runtime?: VerbRuntime;

  constructor(data?: PartialMessage<Verb>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.Verb";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "message", T: Position, opt: true },
    { no: 2, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "export", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "request", kind: "message", T: Type },
    { no: 6, name: "response", kind: "message", T: Type },
    { no: 7, name: "metadata", kind: "message", T: Metadata, repeated: true },
    { no: 31634, name: "runtime", kind: "message", T: VerbRuntime, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Verb {
    return new Verb().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJsonString(jsonString, options);
  }

  static equals(a: Verb | PlainMessage<Verb> | undefined, b: Verb | PlainMessage<Verb> | undefined): boolean {
    return proto3.util.equals(Verb, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.schema.v1.VerbRuntime
 */
export class VerbRuntime extends Message<VerbRuntime> {
  /**
   * @generated from field: optional google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: repeated string kafka_brokers = 3;
   */
  kafkaBrokers: string[] = [];

  constructor(data?: PartialMessage<VerbRuntime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.schema.v1.VerbRuntime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "create_time", kind: "message", T: Timestamp, opt: true },
    { no: 2, name: "start_time", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "kafka_brokers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerbRuntime {
    return new VerbRuntime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerbRuntime {
    return new VerbRuntime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerbRuntime {
    return new VerbRuntime().fromJsonString(jsonString, options);
  }

  static equals(a: VerbRuntime | PlainMessage<VerbRuntime> | undefined, b: VerbRuntime | PlainMessage<VerbRuntime> | undefined): boolean {
    return proto3.util.equals(VerbRuntime, a, b);
  }
}

