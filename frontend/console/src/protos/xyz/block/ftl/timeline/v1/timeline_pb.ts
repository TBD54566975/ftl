// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/timeline/v1/timeline.proto (package xyz.block.ftl.timeline.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AsyncExecuteEvent, CallEvent, CronScheduledEvent, DeploymentCreatedEvent, DeploymentUpdatedEvent, Event, EventType, IngressEvent, LogEvent, PubSubConsumeEvent, PubSubPublishEvent } from "./event_pb.js";

/**
 * @generated from message xyz.block.ftl.timeline.v1.GetTimelineRequest
 */
export class GetTimelineRequest extends Message<GetTimelineRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: optional int64 since_id = 2;
   */
  sinceId?: bigint;

  /**
   * @generated from field: optional int32 limit = 3;
   */
  limit?: number;

  /**
   * @generated from field: repeated xyz.block.ftl.timeline.v1.EventType event_types = 4;
   */
  eventTypes: EventType[] = [];

  constructor(data?: PartialMessage<GetTimelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.timeline.v1.GetTimelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "since_id", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "event_types", kind: "enum", T: proto3.getEnumType(EventType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimelineRequest {
    return new GetTimelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimelineRequest {
    return new GetTimelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimelineRequest {
    return new GetTimelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimelineRequest | PlainMessage<GetTimelineRequest> | undefined, b: GetTimelineRequest | PlainMessage<GetTimelineRequest> | undefined): boolean {
    return proto3.util.equals(GetTimelineRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.timeline.v1.GetTimelineResponse
 */
export class GetTimelineResponse extends Message<GetTimelineResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.timeline.v1.Event events = 1;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<GetTimelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.timeline.v1.GetTimelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimelineResponse | PlainMessage<GetTimelineResponse> | undefined, b: GetTimelineResponse | PlainMessage<GetTimelineResponse> | undefined): boolean {
    return proto3.util.equals(GetTimelineResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.timeline.v1.CreateEventRequest
 */
export class CreateEventRequest extends Message<CreateEventRequest> {
  /**
   * @generated from oneof xyz.block.ftl.timeline.v1.CreateEventRequest.entry
   */
  entry: {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.LogEvent log = 1;
     */
    value: LogEvent;
    case: "log";
  } | {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.CallEvent call = 2;
     */
    value: CallEvent;
    case: "call";
  } | {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.DeploymentCreatedEvent deployment_created = 3;
     */
    value: DeploymentCreatedEvent;
    case: "deploymentCreated";
  } | {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.DeploymentUpdatedEvent deployment_updated = 4;
     */
    value: DeploymentUpdatedEvent;
    case: "deploymentUpdated";
  } | {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.IngressEvent ingress = 5;
     */
    value: IngressEvent;
    case: "ingress";
  } | {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.CronScheduledEvent cron_scheduled = 6;
     */
    value: CronScheduledEvent;
    case: "cronScheduled";
  } | {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.AsyncExecuteEvent async_execute = 7;
     */
    value: AsyncExecuteEvent;
    case: "asyncExecute";
  } | {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.PubSubPublishEvent pubsub_publish = 8;
     */
    value: PubSubPublishEvent;
    case: "pubsubPublish";
  } | {
    /**
     * @generated from field: xyz.block.ftl.timeline.v1.PubSubConsumeEvent pubsub_consume = 9;
     */
    value: PubSubConsumeEvent;
    case: "pubsubConsume";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.timeline.v1.CreateEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: LogEvent, oneof: "entry" },
    { no: 2, name: "call", kind: "message", T: CallEvent, oneof: "entry" },
    { no: 3, name: "deployment_created", kind: "message", T: DeploymentCreatedEvent, oneof: "entry" },
    { no: 4, name: "deployment_updated", kind: "message", T: DeploymentUpdatedEvent, oneof: "entry" },
    { no: 5, name: "ingress", kind: "message", T: IngressEvent, oneof: "entry" },
    { no: 6, name: "cron_scheduled", kind: "message", T: CronScheduledEvent, oneof: "entry" },
    { no: 7, name: "async_execute", kind: "message", T: AsyncExecuteEvent, oneof: "entry" },
    { no: 8, name: "pubsub_publish", kind: "message", T: PubSubPublishEvent, oneof: "entry" },
    { no: 9, name: "pubsub_consume", kind: "message", T: PubSubConsumeEvent, oneof: "entry" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventRequest | PlainMessage<CreateEventRequest> | undefined, b: CreateEventRequest | PlainMessage<CreateEventRequest> | undefined): boolean {
    return proto3.util.equals(CreateEventRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.timeline.v1.CreateEventResponse
 */
export class CreateEventResponse extends Message<CreateEventResponse> {
  constructor(data?: PartialMessage<CreateEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.timeline.v1.CreateEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventResponse | PlainMessage<CreateEventResponse> | undefined, b: CreateEventResponse | PlainMessage<CreateEventResponse> | undefined): boolean {
    return proto3.util.equals(CreateEventResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.timeline.v1.DeleteOldEventsRequest
 */
export class DeleteOldEventsRequest extends Message<DeleteOldEventsRequest> {
  /**
   * @generated from field: xyz.block.ftl.timeline.v1.EventType event_type = 1;
   */
  eventType = EventType.UNSPECIFIED;

  /**
   * @generated from field: int64 age_seconds = 2;
   */
  ageSeconds = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteOldEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.timeline.v1.DeleteOldEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_type", kind: "enum", T: proto3.getEnumType(EventType) },
    { no: 2, name: "age_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOldEventsRequest {
    return new DeleteOldEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOldEventsRequest {
    return new DeleteOldEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOldEventsRequest {
    return new DeleteOldEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOldEventsRequest | PlainMessage<DeleteOldEventsRequest> | undefined, b: DeleteOldEventsRequest | PlainMessage<DeleteOldEventsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOldEventsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.timeline.v1.DeleteOldEventsResponse
 */
export class DeleteOldEventsResponse extends Message<DeleteOldEventsResponse> {
  /**
   * @generated from field: int64 deleted_count = 1;
   */
  deletedCount = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteOldEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.timeline.v1.DeleteOldEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deleted_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOldEventsResponse {
    return new DeleteOldEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOldEventsResponse {
    return new DeleteOldEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOldEventsResponse {
    return new DeleteOldEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOldEventsResponse | PlainMessage<DeleteOldEventsResponse> | undefined, b: DeleteOldEventsResponse | PlainMessage<DeleteOldEventsResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOldEventsResponse, a, b);
  }
}

