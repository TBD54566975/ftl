// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file xyz/block/ftl/v2alpha1/ftl.proto (package xyz.block.ftl.v2alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { PingRequest, PingResponse } from "../v1/ftl_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";
import { DeleteModuleRequest, DeleteModuleResponse, GetSchemaRequest, GetSchemaResponse, PullSchemaRequest, PullSchemaResponse, UpsertModuleRequest, UpsertModuleResponse } from "./ftl_pb.js";

/**
 * SchemaService is the central source of truth for the FTL schema.
 *
 * @generated from service xyz.block.ftl.v2alpha1.SchemaService
 */
export const SchemaService = {
  typeName: "xyz.block.ftl.v2alpha1.SchemaService",
  methods: {
    /**
     * For now we need to use the v1 types to comply with the interface.
     *
     * @generated from rpc xyz.block.ftl.v2alpha1.SchemaService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * GetSchema returns the current full schema for the cluster.
     *
     * @generated from rpc xyz.block.ftl.v2alpha1.SchemaService.GetSchema
     */
    getSchema: {
      name: "GetSchema",
      I: GetSchemaRequest,
      O: GetSchemaResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * PullSchema returns a stream of module schema changes for the cluster.
     *
     * @generated from rpc xyz.block.ftl.v2alpha1.SchemaService.PullSchema
     */
    pullSchema: {
      name: "PullSchema",
      I: PullSchemaRequest,
      O: PullSchemaResponse,
      kind: MethodKind.ServerStreaming,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * UpsertModule creates or replaces a module in the schema.
     *
     * @generated from rpc xyz.block.ftl.v2alpha1.SchemaService.UpsertModule
     */
    upsertModule: {
      name: "UpsertModule",
      I: UpsertModuleRequest,
      O: UpsertModuleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteModule deletes a module from the schema.
     *
     * @generated from rpc xyz.block.ftl.v2alpha1.SchemaService.DeleteModule
     */
    deleteModule: {
      name: "DeleteModule",
      I: DeleteModuleRequest,
      O: DeleteModuleResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

