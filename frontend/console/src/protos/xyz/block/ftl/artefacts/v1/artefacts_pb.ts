// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/artefacts/v1/artefacts.proto (package xyz.block.ftl.artefacts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message xyz.block.ftl.artefacts.v1.UploadArtefactRequest
 */
export class UploadArtefactRequest extends Message<UploadArtefactRequest> {
  /**
   * @generated from field: bytes content = 1;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.artefacts.v1.UploadArtefactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined, b: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined): boolean {
    return proto3.util.equals(UploadArtefactRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.artefacts.v1.UploadArtefactResponse
 */
export class UploadArtefactResponse extends Message<UploadArtefactResponse> {
  /**
   * @generated from field: bytes digest = 2;
   */
  digest = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.artefacts.v1.UploadArtefactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined, b: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined): boolean {
    return proto3.util.equals(UploadArtefactResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.artefacts.v1.DeploymentArtefact
 */
export class DeploymentArtefact extends Message<DeploymentArtefact> {
  /**
   * @generated from field: string digest = 1;
   */
  digest = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: bool executable = 3;
   */
  executable = false;

  constructor(data?: PartialMessage<DeploymentArtefact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.artefacts.v1.DeploymentArtefact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "executable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined, b: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined): boolean {
    return proto3.util.equals(DeploymentArtefact, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.artefacts.v1.GetArtefactDiffsRequest
 */
export class GetArtefactDiffsRequest extends Message<GetArtefactDiffsRequest> {
  /**
   * @generated from field: repeated string client_digests = 1;
   */
  clientDigests: string[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.artefacts.v1.GetArtefactDiffsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined, b: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.artefacts.v1.GetArtefactDiffsResponse
 */
export class GetArtefactDiffsResponse extends Message<GetArtefactDiffsResponse> {
  /**
   * @generated from field: repeated string missing_digests = 1;
   */
  missingDigests: string[] = [];

  /**
   * Artefacts that the client already has, and their path+executable status.
   *
   * @generated from field: repeated xyz.block.ftl.artefacts.v1.DeploymentArtefact client_artefacts = 2;
   */
  clientArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.artefacts.v1.GetArtefactDiffsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "missing_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "client_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined, b: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsResponse, a, b);
  }
}

