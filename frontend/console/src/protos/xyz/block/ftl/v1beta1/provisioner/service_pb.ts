// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/provisioner/v1beta1/service.proto (package xyz.block.ftl.v1beta1.provisioner, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { Module } from "../../v1/schema/schema_pb.js";
import { DeploymentArtefact } from "../../v1/ftl_pb.js";

/**
 * @generated from message xyz.block.ftl.v1beta1.provisioner.CreateDeploymentRequest
 */
export class CreateDeploymentRequest extends Message<CreateDeploymentRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 1;
   */
  schema?: Module;

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact artefacts = 2;
   */
  artefacts: DeploymentArtefact[] = [];

  /**
   * Runner labels required to run this deployment.
   *
   * @generated from field: optional google.protobuf.Struct labels = 3;
   */
  labels?: Struct;

  constructor(data?: PartialMessage<CreateDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1beta1.provisioner.CreateDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module },
    { no: 2, name: "artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
    { no: 3, name: "labels", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined, b: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(CreateDeploymentRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1beta1.provisioner.CreateDeploymentResponse
 */
export class CreateDeploymentResponse extends Message<CreateDeploymentResponse> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * Currently active deployment for this module, if any.
   *
   * @generated from field: optional string active_deployment_key = 2;
   */
  activeDeploymentKey?: string;

  constructor(data?: PartialMessage<CreateDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1beta1.provisioner.CreateDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active_deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined, b: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(CreateDeploymentResponse, a, b);
  }
}

