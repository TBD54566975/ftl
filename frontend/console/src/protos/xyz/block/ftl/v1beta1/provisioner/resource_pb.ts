// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1beta1/provisioner/resource.proto (package xyz.block.ftl.v1beta1.provisioner, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ResourceProperty is an implementation specific property of the resource populated at creation time
 *
 * @generated from message xyz.block.ftl.v1beta1.provisioner.ResourceProperty
 */
export class ResourceProperty extends Message<ResourceProperty> {
  /**
   * @generated from field: string resource_id = 1;
   */
  resourceId = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<ResourceProperty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1beta1.provisioner.ResourceProperty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceProperty {
    return new ResourceProperty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceProperty {
    return new ResourceProperty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceProperty {
    return new ResourceProperty().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceProperty | PlainMessage<ResourceProperty> | undefined, b: ResourceProperty | PlainMessage<ResourceProperty> | undefined): boolean {
    return proto3.util.equals(ResourceProperty, a, b);
  }
}

/**
 * Resource is an abstract resource extracted from FTL Schema.
 *
 * we use convention of prefixing field names with out_ if they are populated
 * by the provisioning engine
 *
 * @generated from message xyz.block.ftl.v1beta1.provisioner.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * id unique within the module
   *
   * @generated from field: string resource_id = 1;
   */
  resourceId = "";

  /**
   * Additional implementation specific properties populated
   * when the resource was created
   *
   * @generated from field: repeated xyz.block.ftl.v1beta1.provisioner.ResourceProperty out_properties = 2;
   */
  outProperties: ResourceProperty[] = [];

  /**
   * @generated from oneof xyz.block.ftl.v1beta1.provisioner.Resource.resource
   */
  resource: {
    /**
     * @generated from field: xyz.block.ftl.v1beta1.provisioner.PostgresResource postgres = 102;
     */
    value: PostgresResource;
    case: "postgres";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1beta1.provisioner.MysqlResource mysql = 103;
     */
    value: MysqlResource;
    case: "mysql";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1beta1.provisioner.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "out_properties", kind: "message", T: ResourceProperty, repeated: true },
    { no: 102, name: "postgres", kind: "message", T: PostgresResource, oneof: "resource" },
    { no: 103, name: "mysql", kind: "message", T: MysqlResource, oneof: "resource" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1beta1.provisioner.PostgresResource
 */
export class PostgresResource extends Message<PostgresResource> {
  constructor(data?: PartialMessage<PostgresResource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1beta1.provisioner.PostgresResource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostgresResource {
    return new PostgresResource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostgresResource {
    return new PostgresResource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostgresResource {
    return new PostgresResource().fromJsonString(jsonString, options);
  }

  static equals(a: PostgresResource | PlainMessage<PostgresResource> | undefined, b: PostgresResource | PlainMessage<PostgresResource> | undefined): boolean {
    return proto3.util.equals(PostgresResource, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1beta1.provisioner.MysqlResource
 */
export class MysqlResource extends Message<MysqlResource> {
  constructor(data?: PartialMessage<MysqlResource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1beta1.provisioner.MysqlResource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MysqlResource {
    return new MysqlResource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MysqlResource {
    return new MysqlResource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MysqlResource {
    return new MysqlResource().fromJsonString(jsonString, options);
  }

  static equals(a: MysqlResource | PlainMessage<MysqlResource> | undefined, b: MysqlResource | PlainMessage<MysqlResource> | undefined): boolean {
    return proto3.util.equals(MysqlResource, a, b);
  }
}

