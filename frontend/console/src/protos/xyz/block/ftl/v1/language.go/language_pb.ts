// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/language/v1.go/language.proto (package xyz.block.ftl.v1.language, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Module, Position, Schema } from "../schema/schema_pb.js";

/**
 * @generated from enum xyz.block.ftl.v1.language.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: DEBUG = 0;
   */
  DEBUG = 0,

  /**
   * @generated from enum value: INFO = 1;
   */
  INFO = 1,

  /**
   * @generated from enum value: WARN = 2;
   */
  WARN = 2,

  /**
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(LogLevel)
proto3.util.setEnumType(LogLevel, "xyz.block.ftl.v1.language.LogLevel", [
  { no: 0, name: "DEBUG" },
  { no: 1, name: "INFO" },
  { no: 2, name: "WARN" },
  { no: 3, name: "ERROR" },
]);

/**
 * Log message from the language service.
 *
 * @generated from message xyz.block.ftl.v1.language.LogMessage
 */
export class LogMessage extends Message<LogMessage> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: xyz.block.ftl.v1.language.LogLevel level = 2;
   */
  level = LogLevel.DEBUG;

  constructor(data?: PartialMessage<LogMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.LogMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogMessage {
    return new LogMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogMessage {
    return new LogMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogMessage {
    return new LogMessage().fromJsonString(jsonString, options);
  }

  static equals(a: LogMessage | PlainMessage<LogMessage> | undefined, b: LogMessage | PlainMessage<LogMessage> | undefined): boolean {
    return proto3.util.equals(LogMessage, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.language.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * Universal metadata
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Language metadata contains any metadata specific to a specific language.
   *
   * @generated from field: repeated google.protobuf.Any LanguageMetadata = 2;
   */
  LanguageMetadata: Any[] = [];

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "LanguageMetadata", kind: "message", T: Any, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * Request to create a new module.
 *
 * @generated from message xyz.block.ftl.v1.language.CreateModuleRequest
 */
export class CreateModuleRequest extends Message<CreateModuleRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<CreateModuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.CreateModuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateModuleRequest {
    return new CreateModuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateModuleRequest {
    return new CreateModuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateModuleRequest {
    return new CreateModuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateModuleRequest | PlainMessage<CreateModuleRequest> | undefined, b: CreateModuleRequest | PlainMessage<CreateModuleRequest> | undefined): boolean {
    return proto3.util.equals(CreateModuleRequest, a, b);
  }
}

/**
 * Response to a create module request.
 *
 * @generated from message xyz.block.ftl.v1.language.CreateModuleResponse
 */
export class CreateModuleResponse extends Message<CreateModuleResponse> {
  constructor(data?: PartialMessage<CreateModuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.CreateModuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateModuleResponse {
    return new CreateModuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateModuleResponse {
    return new CreateModuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateModuleResponse {
    return new CreateModuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateModuleResponse | PlainMessage<CreateModuleResponse> | undefined, b: CreateModuleResponse | PlainMessage<CreateModuleResponse> | undefined): boolean {
    return proto3.util.equals(CreateModuleResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.language.DependenciesRequest
 */
export class DependenciesRequest extends Message<DependenciesRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: xyz.block.ftl.v1.language.Metadata metadata = 2;
   */
  metadata?: Metadata;

  constructor(data?: PartialMessage<DependenciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.DependenciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: Metadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DependenciesRequest {
    return new DependenciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DependenciesRequest {
    return new DependenciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DependenciesRequest {
    return new DependenciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DependenciesRequest | PlainMessage<DependenciesRequest> | undefined, b: DependenciesRequest | PlainMessage<DependenciesRequest> | undefined): boolean {
    return proto3.util.equals(DependenciesRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.language.DependenciesResponse
 */
export class DependenciesResponse extends Message<DependenciesResponse> {
  /**
   * @generated from field: repeated string modules = 1;
   */
  modules: string[] = [];

  constructor(data?: PartialMessage<DependenciesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.DependenciesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DependenciesResponse {
    return new DependenciesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DependenciesResponse {
    return new DependenciesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DependenciesResponse {
    return new DependenciesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DependenciesResponse | PlainMessage<DependenciesResponse> | undefined, b: DependenciesResponse | PlainMessage<DependenciesResponse> | undefined): boolean {
    return proto3.util.equals(DependenciesResponse, a, b);
  }
}

/**
 * Response to a dependency extraction request.
 *
 * @generated from message xyz.block.ftl.v1.language.DependencyUpdate
 */
export class DependencyUpdate extends Message<DependencyUpdate> {
  /**
   * @generated from field: repeated string modules = 1;
   */
  modules: string[] = [];

  constructor(data?: PartialMessage<DependencyUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.DependencyUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DependencyUpdate {
    return new DependencyUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DependencyUpdate {
    return new DependencyUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DependencyUpdate {
    return new DependencyUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: DependencyUpdate | PlainMessage<DependencyUpdate> | undefined, b: DependencyUpdate | PlainMessage<DependencyUpdate> | undefined): boolean {
    return proto3.util.equals(DependencyUpdate, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.language.MetadataUpdatedRequest
 */
export class MetadataUpdatedRequest extends Message<MetadataUpdatedRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.language.Metadata metadata = 1;
   */
  metadata?: Metadata;

  constructor(data?: PartialMessage<MetadataUpdatedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.MetadataUpdatedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataUpdatedRequest {
    return new MetadataUpdatedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataUpdatedRequest {
    return new MetadataUpdatedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataUpdatedRequest {
    return new MetadataUpdatedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataUpdatedRequest | PlainMessage<MetadataUpdatedRequest> | undefined, b: MetadataUpdatedRequest | PlainMessage<MetadataUpdatedRequest> | undefined): boolean {
    return proto3.util.equals(MetadataUpdatedRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.language.MetadataUpdatedResponse
 */
export class MetadataUpdatedResponse extends Message<MetadataUpdatedResponse> {
  constructor(data?: PartialMessage<MetadataUpdatedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.MetadataUpdatedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataUpdatedResponse {
    return new MetadataUpdatedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataUpdatedResponse {
    return new MetadataUpdatedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataUpdatedResponse {
    return new MetadataUpdatedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataUpdatedResponse | PlainMessage<MetadataUpdatedResponse> | undefined, b: MetadataUpdatedResponse | PlainMessage<MetadataUpdatedResponse> | undefined): boolean {
    return proto3.util.equals(MetadataUpdatedResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.language.SchemaUpdatedRequest
 */
export class SchemaUpdatedRequest extends Message<SchemaUpdatedRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Schema schema = 1;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<SchemaUpdatedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.SchemaUpdatedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaUpdatedRequest {
    return new SchemaUpdatedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaUpdatedRequest {
    return new SchemaUpdatedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaUpdatedRequest {
    return new SchemaUpdatedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaUpdatedRequest | PlainMessage<SchemaUpdatedRequest> | undefined, b: SchemaUpdatedRequest | PlainMessage<SchemaUpdatedRequest> | undefined): boolean {
    return proto3.util.equals(SchemaUpdatedRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.language.SchemaUpdatedResponse
 */
export class SchemaUpdatedResponse extends Message<SchemaUpdatedResponse> {
  constructor(data?: PartialMessage<SchemaUpdatedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.SchemaUpdatedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaUpdatedResponse {
    return new SchemaUpdatedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaUpdatedResponse {
    return new SchemaUpdatedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaUpdatedResponse {
    return new SchemaUpdatedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaUpdatedResponse | PlainMessage<SchemaUpdatedResponse> | undefined, b: SchemaUpdatedResponse | PlainMessage<SchemaUpdatedResponse> | undefined): boolean {
    return proto3.util.equals(SchemaUpdatedResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.language.Error
 */
export class Error extends Message<Error> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Position pos = 2;
   */
  pos?: Position;

  /**
   * @generated from field: int64 endColumn = 3;
   */
  endColumn = protoInt64.zero;

  /**
   * @generated from field: xyz.block.ftl.v1.language.Error.ErrorLevel level = 4;
   */
  level = Error_ErrorLevel.INFO;

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pos", kind: "message", T: Position },
    { no: 3, name: "endColumn", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "level", kind: "enum", T: proto3.getEnumType(Error_ErrorLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

/**
 * @generated from enum xyz.block.ftl.v1.language.Error.ErrorLevel
 */
export enum Error_ErrorLevel {
  /**
   * @generated from enum value: INFO = 0;
   */
  INFO = 0,

  /**
   * @generated from enum value: WARN = 1;
   */
  WARN = 1,

  /**
   * @generated from enum value: ERROR = 2;
   */
  ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Error_ErrorLevel)
proto3.util.setEnumType(Error_ErrorLevel, "xyz.block.ftl.v1.language.Error.ErrorLevel", [
  { no: 0, name: "INFO" },
  { no: 1, name: "WARN" },
  { no: 2, name: "ERROR" },
]);

/**
 * @generated from message xyz.block.ftl.v1.language.ErrorList
 */
export class ErrorList extends Message<ErrorList> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.language.Error errors = 1;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<ErrorList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.ErrorList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrorList {
    return new ErrorList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrorList {
    return new ErrorList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrorList {
    return new ErrorList().fromJsonString(jsonString, options);
  }

  static equals(a: ErrorList | PlainMessage<ErrorList> | undefined, b: ErrorList | PlainMessage<ErrorList> | undefined): boolean {
    return proto3.util.equals(ErrorList, a, b);
  }
}

/**
 * Request to build a module.
 *
 * @generated from message xyz.block.ftl.v1.language.BuildRequest
 */
export class BuildRequest extends Message<BuildRequest> {
  /**
   * the root path for the module
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * the root path for the FTL project
   *
   * @generated from field: string project_path = 2;
   */
  projectPath = "";

  /**
   * indicates whether to watch for changes to the module
   *
   * @generated from field: bool watch = 3;
   */
  watch = false;

  /**
   * @generated from field: xyz.block.ftl.v1.language.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Schema schema = 5;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<BuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.BuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "watch", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildRequest {
    return new BuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildRequest {
    return new BuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildRequest {
    return new BuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BuildRequest | PlainMessage<BuildRequest> | undefined, b: BuildRequest | PlainMessage<BuildRequest> | undefined): boolean {
    return proto3.util.equals(BuildRequest, a, b);
  }
}

/**
 * Response to a build request.
 *
 * @generated from message xyz.block.ftl.v1.language.BuildResult
 */
export class BuildResult extends Message<BuildResult> {
  /**
   * module schema for the built module
   * only set if the build was successful
   *
   * @generated from field: optional xyz.block.ftl.v1.schema.Module module = 1;
   */
  module?: Module;

  /**
   * paths for files/directories to be deployed
   *
   * @generated from field: repeated string deploy = 2;
   */
  deploy: string[] = [];

  /**
   * errors and warnings encountered during the build
   *
   * @generated from field: xyz.block.ftl.v1.language.ErrorList errors = 3;
   */
  errors?: ErrorList;

  constructor(data?: PartialMessage<BuildResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.BuildResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "message", T: Module, opt: true },
    { no: 2, name: "deploy", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "errors", kind: "message", T: ErrorList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildResult {
    return new BuildResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildResult {
    return new BuildResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildResult {
    return new BuildResult().fromJsonString(jsonString, options);
  }

  static equals(a: BuildResult | PlainMessage<BuildResult> | undefined, b: BuildResult | PlainMessage<BuildResult> | undefined): boolean {
    return proto3.util.equals(BuildResult, a, b);
  }
}

/**
 * Every type of message that can be streamed from the language service for a build.
 *
 * @generated from message xyz.block.ftl.v1.language.BuildEvent
 */
export class BuildEvent extends Message<BuildEvent> {
  /**
   * @generated from oneof xyz.block.ftl.v1.language.BuildEvent.event
   */
  event: {
    /**
     * @generated from field: xyz.block.ftl.v1.language.DependencyUpdate dependency_update = 1;
     */
    value: DependencyUpdate;
    case: "dependencyUpdate";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.language.BuildResult build_result = 2;
     */
    value: BuildResult;
    case: "buildResult";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.language.LogMessage log_message = 3;
     */
    value: LogMessage;
    case: "logMessage";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BuildEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.language.BuildEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dependency_update", kind: "message", T: DependencyUpdate, oneof: "event" },
    { no: 2, name: "build_result", kind: "message", T: BuildResult, oneof: "event" },
    { no: 3, name: "log_message", kind: "message", T: LogMessage, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildEvent {
    return new BuildEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildEvent {
    return new BuildEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildEvent {
    return new BuildEvent().fromJsonString(jsonString, options);
  }

  static equals(a: BuildEvent | PlainMessage<BuildEvent> | undefined, b: BuildEvent | PlainMessage<BuildEvent> | undefined): boolean {
    return proto3.util.equals(BuildEvent, a, b);
  }
}

