// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/controller.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { PingRequest, PingResponse } from "./ftl_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";
import { CreateDeploymentRequest, CreateDeploymentResponse, GetArtefactDiffsRequest, GetArtefactDiffsResponse, GetCertificationRequest, GetCertificationResponse, GetDeploymentArtefactsRequest, GetDeploymentArtefactsResponse, GetDeploymentRequest, GetDeploymentResponse, ProcessListRequest, ProcessListResponse, RegisterRunnerRequest, RegisterRunnerResponse, ReplaceDeployRequest, ReplaceDeployResponse, ResetSubscriptionRequest, ResetSubscriptionResponse, StatusRequest, StatusResponse, StreamDeploymentLogsRequest, StreamDeploymentLogsResponse, UpdateDeployRequest, UpdateDeployResponse } from "./controller_pb.js";

/**
 * @generated from service xyz.block.ftl.v1.ControllerService
 */
export const ControllerService = {
  typeName: "xyz.block.ftl.v1.ControllerService",
  methods: {
    /**
     * Ping service for readiness.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * List "processes" running on the cluster.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.ProcessList
     */
    processList: {
      name: "ProcessList",
      I: ProcessListRequest,
      O: ProcessListResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc xyz.block.ftl.v1.ControllerService.Status
     */
    status: {
      name: "Status",
      I: StatusRequest,
      O: StatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Runner will initially call this to have the controller sign its public key.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.GetCertification
     */
    getCertification: {
      name: "GetCertification",
      I: GetCertificationRequest,
      O: GetCertificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get list of artefacts that differ between the server and client.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.GetArtefactDiffs
     */
    getArtefactDiffs: {
      name: "GetArtefactDiffs",
      I: GetArtefactDiffsRequest,
      O: GetArtefactDiffsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a deployment.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.CreateDeployment
     */
    createDeployment: {
      name: "CreateDeployment",
      I: CreateDeploymentRequest,
      O: CreateDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the schema and artefact metadata for a deployment.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.GetDeployment
     */
    getDeployment: {
      name: "GetDeployment",
      I: GetDeploymentRequest,
      O: GetDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Stream deployment artefacts from the server.
     *
     * Each artefact is streamed one after the other as a sequence of max 1MB
     * chunks.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.GetDeploymentArtefacts
     */
    getDeploymentArtefacts: {
      name: "GetDeploymentArtefacts",
      I: GetDeploymentArtefactsRequest,
      O: GetDeploymentArtefactsResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Register a Runner with the Controller.
     *
     * Each runner issue a RegisterRunnerRequest to the ControllerService
     * every 10 seconds to maintain its heartbeat.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.RegisterRunner
     */
    registerRunner: {
      name: "RegisterRunner",
      I: RegisterRunnerRequest,
      O: RegisterRunnerResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Update an existing deployment.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.UpdateDeploy
     */
    updateDeploy: {
      name: "UpdateDeploy",
      I: UpdateDeployRequest,
      O: UpdateDeployResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gradually replace an existing deployment with a new one.
     *
     * If a deployment already exists for the module of the new deployment,
     * it will be scaled down and replaced by the new one.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.ReplaceDeploy
     */
    replaceDeploy: {
      name: "ReplaceDeploy",
      I: ReplaceDeployRequest,
      O: ReplaceDeployResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Stream logs from a deployment
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.StreamDeploymentLogs
     */
    streamDeploymentLogs: {
      name: "StreamDeploymentLogs",
      I: StreamDeploymentLogsRequest,
      O: StreamDeploymentLogsResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Reset the cursor for a subscription to the head of its topic.
     *
     * @generated from rpc xyz.block.ftl.v1.ControllerService.ResetSubscription
     */
    resetSubscription: {
      name: "ResetSubscription",
      I: ResetSubscriptionRequest,
      O: ResetSubscriptionResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

