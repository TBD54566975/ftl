// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/module.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { PingRequest, PingResponse } from "./ftl_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";
import { AcquireLeaseRequest, AcquireLeaseResponse, ModuleContextRequest, ModuleContextResponse, PublishEventRequest, PublishEventResponse } from "./module_pb.js";

/**
 * ModuleService is the service that modules use to interact with the Controller.
 *
 * @generated from service xyz.block.ftl.v1.ModuleService
 */
export const ModuleService = {
  typeName: "xyz.block.ftl.v1.ModuleService",
  methods: {
    /**
     * Ping service for readiness.
     *
     * @generated from rpc xyz.block.ftl.v1.ModuleService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Get configuration state for the module
     *
     * @generated from rpc xyz.block.ftl.v1.ModuleService.GetModuleContext
     */
    getModuleContext: {
      name: "GetModuleContext",
      I: ModuleContextRequest,
      O: ModuleContextResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Acquire (and renew) a lease for a deployment.
     *
     * Returns ResourceExhausted if the lease is held.
     *
     * @generated from rpc xyz.block.ftl.v1.ModuleService.AcquireLease
     */
    acquireLease: {
      name: "AcquireLease",
      I: AcquireLeaseRequest,
      O: AcquireLeaseResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * Publish an event to a topic.
     *
     * @generated from rpc xyz.block.ftl.v1.ModuleService.PublishEvent
     */
    publishEvent: {
      name: "PublishEvent",
      I: PublishEventRequest,
      O: PublishEventResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

