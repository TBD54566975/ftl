// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/admin.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum xyz.block.ftl.v1.ConfigProvider
 */
export enum ConfigProvider {
  /**
   * @generated from enum value: CONFIG_PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Write values inline in the configuration file.
   *
   * @generated from enum value: CONFIG_PROVIDER_INLINE = 1;
   */
  INLINE = 1,

  /**
   * Print configuration as environment variables.
   *
   * @generated from enum value: CONFIG_PROVIDER_ENVAR = 2;
   */
  ENVAR = 2,

  /**
   * Use the database as a configuration store.
   *
   * @generated from enum value: CONFIG_PROVIDER_DB = 3;
   */
  DB = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ConfigProvider)
proto3.util.setEnumType(ConfigProvider, "xyz.block.ftl.v1.ConfigProvider", [
  { no: 0, name: "CONFIG_PROVIDER_UNSPECIFIED" },
  { no: 1, name: "CONFIG_PROVIDER_INLINE" },
  { no: 2, name: "CONFIG_PROVIDER_ENVAR" },
  { no: 3, name: "CONFIG_PROVIDER_DB" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.SecretProvider
 */
export enum SecretProvider {
  /**
   * @generated from enum value: SECRET_PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Write values inline in the configuration file.
   *
   * @generated from enum value: SECRET_PROVIDER_INLINE = 1;
   */
  INLINE = 1,

  /**
   * Print configuration as environment variables.
   *
   * @generated from enum value: SECRET_PROVIDER_ENVAR = 2;
   */
  ENVAR = 2,

  /**
   * Write to the system keychain.
   *
   * @generated from enum value: SECRET_PROVIDER_KEYCHAIN = 3;
   */
  KEYCHAIN = 3,

  /**
   * Store a secret in the 1Password vault.
   *
   * @generated from enum value: SECRET_PROVIDER_OP = 4;
   */
  OP = 4,

  /**
   * Store a secret in the AWS Secrets Manager.
   *
   * @generated from enum value: SECRET_PROVIDER_ASM = 5;
   */
  ASM = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(SecretProvider)
proto3.util.setEnumType(SecretProvider, "xyz.block.ftl.v1.SecretProvider", [
  { no: 0, name: "SECRET_PROVIDER_UNSPECIFIED" },
  { no: 1, name: "SECRET_PROVIDER_INLINE" },
  { no: 2, name: "SECRET_PROVIDER_ENVAR" },
  { no: 3, name: "SECRET_PROVIDER_KEYCHAIN" },
  { no: 4, name: "SECRET_PROVIDER_OP" },
  { no: 5, name: "SECRET_PROVIDER_ASM" },
]);

/**
 * @generated from message xyz.block.ftl.v1.ConfigRef
 */
export class ConfigRef extends Message<ConfigRef> {
  /**
   * @generated from field: optional string module = 1;
   */
  module?: string;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ConfigRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigRef {
    return new ConfigRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigRef {
    return new ConfigRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigRef {
    return new ConfigRef().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigRef | PlainMessage<ConfigRef> | undefined, b: ConfigRef | PlainMessage<ConfigRef> | undefined): boolean {
    return proto3.util.equals(ConfigRef, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigListRequest
 */
export class ConfigListRequest extends Message<ConfigListRequest> {
  /**
   * @generated from field: optional string module = 1;
   */
  module?: string;

  /**
   * @generated from field: optional bool include_values = 2;
   */
  includeValues?: boolean;

  /**
   * @generated from field: optional xyz.block.ftl.v1.ConfigProvider provider = 3;
   */
  provider?: ConfigProvider;

  constructor(data?: PartialMessage<ConfigListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "include_values", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigListRequest {
    return new ConfigListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigListRequest {
    return new ConfigListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigListRequest {
    return new ConfigListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigListRequest | PlainMessage<ConfigListRequest> | undefined, b: ConfigListRequest | PlainMessage<ConfigListRequest> | undefined): boolean {
    return proto3.util.equals(ConfigListRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigListResponse
 */
export class ConfigListResponse extends Message<ConfigListResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.ConfigListResponse.Config configs = 1;
   */
  configs: ConfigListResponse_Config[] = [];

  constructor(data?: PartialMessage<ConfigListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configs", kind: "message", T: ConfigListResponse_Config, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigListResponse {
    return new ConfigListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigListResponse {
    return new ConfigListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigListResponse {
    return new ConfigListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigListResponse | PlainMessage<ConfigListResponse> | undefined, b: ConfigListResponse | PlainMessage<ConfigListResponse> | undefined): boolean {
    return proto3.util.equals(ConfigListResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigListResponse.Config
 */
export class ConfigListResponse_Config extends Message<ConfigListResponse_Config> {
  /**
   * @generated from field: string ref_path = 1;
   */
  refPath = "";

  /**
   * @generated from field: optional bytes value = 2;
   */
  value?: Uint8Array;

  constructor(data?: PartialMessage<ConfigListResponse_Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigListResponse.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigListResponse_Config {
    return new ConfigListResponse_Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigListResponse_Config {
    return new ConfigListResponse_Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigListResponse_Config {
    return new ConfigListResponse_Config().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigListResponse_Config | PlainMessage<ConfigListResponse_Config> | undefined, b: ConfigListResponse_Config | PlainMessage<ConfigListResponse_Config> | undefined): boolean {
    return proto3.util.equals(ConfigListResponse_Config, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigGetRequest
 */
export class ConfigGetRequest extends Message<ConfigGetRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 1;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<ConfigGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigGetRequest {
    return new ConfigGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigGetRequest {
    return new ConfigGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigGetRequest {
    return new ConfigGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigGetRequest | PlainMessage<ConfigGetRequest> | undefined, b: ConfigGetRequest | PlainMessage<ConfigGetRequest> | undefined): boolean {
    return proto3.util.equals(ConfigGetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigGetResponse
 */
export class ConfigGetResponse extends Message<ConfigGetResponse> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<ConfigGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigGetResponse {
    return new ConfigGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigGetResponse {
    return new ConfigGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigGetResponse {
    return new ConfigGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigGetResponse | PlainMessage<ConfigGetResponse> | undefined, b: ConfigGetResponse | PlainMessage<ConfigGetResponse> | undefined): boolean {
    return proto3.util.equals(ConfigGetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigSetRequest
 */
export class ConfigSetRequest extends Message<ConfigSetRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.ConfigProvider provider = 1;
   */
  provider?: ConfigProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  /**
   * @generated from field: bytes value = 3;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<ConfigSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
    { no: 3, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigSetRequest {
    return new ConfigSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigSetRequest {
    return new ConfigSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigSetRequest {
    return new ConfigSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigSetRequest | PlainMessage<ConfigSetRequest> | undefined, b: ConfigSetRequest | PlainMessage<ConfigSetRequest> | undefined): boolean {
    return proto3.util.equals(ConfigSetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigSetResponse
 */
export class ConfigSetResponse extends Message<ConfigSetResponse> {
  constructor(data?: PartialMessage<ConfigSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigSetResponse {
    return new ConfigSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigSetResponse {
    return new ConfigSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigSetResponse {
    return new ConfigSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigSetResponse | PlainMessage<ConfigSetResponse> | undefined, b: ConfigSetResponse | PlainMessage<ConfigSetResponse> | undefined): boolean {
    return proto3.util.equals(ConfigSetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigUnsetRequest
 */
export class ConfigUnsetRequest extends Message<ConfigUnsetRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.ConfigProvider provider = 1;
   */
  provider?: ConfigProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<ConfigUnsetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigUnsetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigUnsetRequest {
    return new ConfigUnsetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigUnsetRequest {
    return new ConfigUnsetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigUnsetRequest {
    return new ConfigUnsetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigUnsetRequest | PlainMessage<ConfigUnsetRequest> | undefined, b: ConfigUnsetRequest | PlainMessage<ConfigUnsetRequest> | undefined): boolean {
    return proto3.util.equals(ConfigUnsetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigUnsetResponse
 */
export class ConfigUnsetResponse extends Message<ConfigUnsetResponse> {
  constructor(data?: PartialMessage<ConfigUnsetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigUnsetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigUnsetResponse {
    return new ConfigUnsetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigUnsetResponse {
    return new ConfigUnsetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigUnsetResponse {
    return new ConfigUnsetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigUnsetResponse | PlainMessage<ConfigUnsetResponse> | undefined, b: ConfigUnsetResponse | PlainMessage<ConfigUnsetResponse> | undefined): boolean {
    return proto3.util.equals(ConfigUnsetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretsListRequest
 */
export class SecretsListRequest extends Message<SecretsListRequest> {
  /**
   * @generated from field: optional string module = 1;
   */
  module?: string;

  /**
   * @generated from field: optional bool include_values = 2;
   */
  includeValues?: boolean;

  /**
   * @generated from field: optional xyz.block.ftl.v1.SecretProvider provider = 3;
   */
  provider?: SecretProvider;

  constructor(data?: PartialMessage<SecretsListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretsListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "include_values", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsListRequest {
    return new SecretsListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsListRequest {
    return new SecretsListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsListRequest {
    return new SecretsListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SecretsListRequest | PlainMessage<SecretsListRequest> | undefined, b: SecretsListRequest | PlainMessage<SecretsListRequest> | undefined): boolean {
    return proto3.util.equals(SecretsListRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretsListResponse
 */
export class SecretsListResponse extends Message<SecretsListResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.SecretsListResponse.Secret secrets = 1;
   */
  secrets: SecretsListResponse_Secret[] = [];

  constructor(data?: PartialMessage<SecretsListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretsListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secrets", kind: "message", T: SecretsListResponse_Secret, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsListResponse {
    return new SecretsListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsListResponse {
    return new SecretsListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsListResponse {
    return new SecretsListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SecretsListResponse | PlainMessage<SecretsListResponse> | undefined, b: SecretsListResponse | PlainMessage<SecretsListResponse> | undefined): boolean {
    return proto3.util.equals(SecretsListResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretsListResponse.Secret
 */
export class SecretsListResponse_Secret extends Message<SecretsListResponse_Secret> {
  /**
   * @generated from field: string ref_path = 1;
   */
  refPath = "";

  /**
   * @generated from field: optional bytes value = 2;
   */
  value?: Uint8Array;

  constructor(data?: PartialMessage<SecretsListResponse_Secret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretsListResponse.Secret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsListResponse_Secret {
    return new SecretsListResponse_Secret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsListResponse_Secret {
    return new SecretsListResponse_Secret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsListResponse_Secret {
    return new SecretsListResponse_Secret().fromJsonString(jsonString, options);
  }

  static equals(a: SecretsListResponse_Secret | PlainMessage<SecretsListResponse_Secret> | undefined, b: SecretsListResponse_Secret | PlainMessage<SecretsListResponse_Secret> | undefined): boolean {
    return proto3.util.equals(SecretsListResponse_Secret, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretGetRequest
 */
export class SecretGetRequest extends Message<SecretGetRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 1;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<SecretGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretGetRequest {
    return new SecretGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretGetRequest {
    return new SecretGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretGetRequest {
    return new SecretGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SecretGetRequest | PlainMessage<SecretGetRequest> | undefined, b: SecretGetRequest | PlainMessage<SecretGetRequest> | undefined): boolean {
    return proto3.util.equals(SecretGetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretGetResponse
 */
export class SecretGetResponse extends Message<SecretGetResponse> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<SecretGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretGetResponse {
    return new SecretGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretGetResponse {
    return new SecretGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretGetResponse {
    return new SecretGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SecretGetResponse | PlainMessage<SecretGetResponse> | undefined, b: SecretGetResponse | PlainMessage<SecretGetResponse> | undefined): boolean {
    return proto3.util.equals(SecretGetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretSetRequest
 */
export class SecretSetRequest extends Message<SecretSetRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.SecretProvider provider = 1;
   */
  provider?: SecretProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  /**
   * @generated from field: bytes value = 3;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<SecretSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
    { no: 3, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretSetRequest {
    return new SecretSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretSetRequest {
    return new SecretSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretSetRequest {
    return new SecretSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SecretSetRequest | PlainMessage<SecretSetRequest> | undefined, b: SecretSetRequest | PlainMessage<SecretSetRequest> | undefined): boolean {
    return proto3.util.equals(SecretSetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretSetResponse
 */
export class SecretSetResponse extends Message<SecretSetResponse> {
  constructor(data?: PartialMessage<SecretSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretSetResponse {
    return new SecretSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretSetResponse {
    return new SecretSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretSetResponse {
    return new SecretSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SecretSetResponse | PlainMessage<SecretSetResponse> | undefined, b: SecretSetResponse | PlainMessage<SecretSetResponse> | undefined): boolean {
    return proto3.util.equals(SecretSetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretUnsetRequest
 */
export class SecretUnsetRequest extends Message<SecretUnsetRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.SecretProvider provider = 1;
   */
  provider?: SecretProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<SecretUnsetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretUnsetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretUnsetRequest {
    return new SecretUnsetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretUnsetRequest {
    return new SecretUnsetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretUnsetRequest {
    return new SecretUnsetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SecretUnsetRequest | PlainMessage<SecretUnsetRequest> | undefined, b: SecretUnsetRequest | PlainMessage<SecretUnsetRequest> | undefined): boolean {
    return proto3.util.equals(SecretUnsetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SecretUnsetResponse
 */
export class SecretUnsetResponse extends Message<SecretUnsetResponse> {
  constructor(data?: PartialMessage<SecretUnsetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SecretUnsetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretUnsetResponse {
    return new SecretUnsetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretUnsetResponse {
    return new SecretUnsetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretUnsetResponse {
    return new SecretUnsetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SecretUnsetResponse | PlainMessage<SecretUnsetResponse> | undefined, b: SecretUnsetResponse | PlainMessage<SecretUnsetResponse> | undefined): boolean {
    return proto3.util.equals(SecretUnsetResponse, a, b);
  }
}

