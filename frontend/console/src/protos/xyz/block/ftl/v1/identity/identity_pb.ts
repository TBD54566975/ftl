// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/identity/identity.proto (package xyz.block.ftl.v1.identity, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message xyz.block.ftl.v1.identity.CertificateContent
 */
export class CertificateContent extends Message<CertificateContent> {
  /**
   * @generated from field: string identity = 1;
   */
  identity = "";

  /**
   * @generated from field: bytes public_key = 2;
   */
  publicKey = new Uint8Array(0);

  constructor(data?: PartialMessage<CertificateContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.identity.CertificateContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertificateContent {
    return new CertificateContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertificateContent {
    return new CertificateContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertificateContent {
    return new CertificateContent().fromJsonString(jsonString, options);
  }

  static equals(a: CertificateContent | PlainMessage<CertificateContent> | undefined, b: CertificateContent | PlainMessage<CertificateContent> | undefined): boolean {
    return proto3.util.equals(CertificateContent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.identity.CertificateRequest
 */
export class CertificateRequest extends Message<CertificateRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.identity.CertificateContent content = 1;
   */
  content?: CertificateContent;

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<CertificateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.identity.CertificateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: CertificateContent },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertificateRequest {
    return new CertificateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertificateRequest {
    return new CertificateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertificateRequest {
    return new CertificateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CertificateRequest | PlainMessage<CertificateRequest> | undefined, b: CertificateRequest | PlainMessage<CertificateRequest> | undefined): boolean {
    return proto3.util.equals(CertificateRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.identity.Certificate
 */
export class Certificate extends Message<Certificate> {
  /**
   * @generated from field: xyz.block.ftl.v1.identity.CertificateContent content = 1;
   */
  content?: CertificateContent;

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<Certificate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.identity.Certificate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: CertificateContent },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Certificate {
    return new Certificate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Certificate {
    return new Certificate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Certificate {
    return new Certificate().fromJsonString(jsonString, options);
  }

  static equals(a: Certificate | PlainMessage<Certificate> | undefined, b: Certificate | PlainMessage<Certificate> | undefined): boolean {
    return proto3.util.equals(Certificate, a, b);
  }
}

