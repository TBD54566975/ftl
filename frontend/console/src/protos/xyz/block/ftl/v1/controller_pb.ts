// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/controller.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { Module, Ref } from "./schema/schema_pb.js";

/**
 * @generated from message xyz.block.ftl.v1.GetCertificationRequest
 */
export class GetCertificationRequest extends Message<GetCertificationRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.CertificateContent request = 1;
   */
  request?: CertificateContent;

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<GetCertificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetCertificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: CertificateContent },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCertificationRequest {
    return new GetCertificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCertificationRequest {
    return new GetCertificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCertificationRequest {
    return new GetCertificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCertificationRequest | PlainMessage<GetCertificationRequest> | undefined, b: GetCertificationRequest | PlainMessage<GetCertificationRequest> | undefined): boolean {
    return proto3.util.equals(GetCertificationRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetCertificationResponse
 */
export class GetCertificationResponse extends Message<GetCertificationResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.Certificate certificate = 1;
   */
  certificate?: Certificate;

  constructor(data?: PartialMessage<GetCertificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetCertificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "certificate", kind: "message", T: Certificate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCertificationResponse {
    return new GetCertificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCertificationResponse {
    return new GetCertificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCertificationResponse {
    return new GetCertificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCertificationResponse | PlainMessage<GetCertificationResponse> | undefined, b: GetCertificationResponse | PlainMessage<GetCertificationResponse> | undefined): boolean {
    return proto3.util.equals(GetCertificationResponse, a, b);
  }
}

/**
 * CertificateContent is separated from Certificate to allow for easier signing.
 *
 * @generated from message xyz.block.ftl.v1.CertificateContent
 */
export class CertificateContent extends Message<CertificateContent> {
  /**
   * @generated from field: string identity = 1;
   */
  identity = "";

  /**
   * @generated from field: bytes public_key = 2;
   */
  publicKey = new Uint8Array(0);

  constructor(data?: PartialMessage<CertificateContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CertificateContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertificateContent {
    return new CertificateContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertificateContent {
    return new CertificateContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertificateContent {
    return new CertificateContent().fromJsonString(jsonString, options);
  }

  static equals(a: CertificateContent | PlainMessage<CertificateContent> | undefined, b: CertificateContent | PlainMessage<CertificateContent> | undefined): boolean {
    return proto3.util.equals(CertificateContent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.Certificate
 */
export class Certificate extends Message<Certificate> {
  /**
   * @generated from field: xyz.block.ftl.v1.CertificateContent content = 1;
   */
  content?: CertificateContent;

  /**
   * @generated from field: bytes controller_signature = 3;
   */
  controllerSignature = new Uint8Array(0);

  constructor(data?: PartialMessage<Certificate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.Certificate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: CertificateContent },
    { no: 3, name: "controller_signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Certificate {
    return new Certificate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Certificate {
    return new Certificate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Certificate {
    return new Certificate().fromJsonString(jsonString, options);
  }

  static equals(a: Certificate | PlainMessage<Certificate> | undefined, b: Certificate | PlainMessage<Certificate> | undefined): boolean {
    return proto3.util.equals(Certificate, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetArtefactDiffsRequest
 */
export class GetArtefactDiffsRequest extends Message<GetArtefactDiffsRequest> {
  /**
   * @generated from field: repeated string client_digests = 1;
   */
  clientDigests: string[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetArtefactDiffsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined, b: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetArtefactDiffsResponse
 */
export class GetArtefactDiffsResponse extends Message<GetArtefactDiffsResponse> {
  /**
   * @generated from field: repeated string missing_digests = 1;
   */
  missingDigests: string[] = [];

  /**
   * Artefacts that the client already has, and their path+executable status.
   *
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact client_artefacts = 2;
   */
  clientArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetArtefactDiffsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "missing_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "client_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined, b: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UploadArtefactRequest
 */
export class UploadArtefactRequest extends Message<UploadArtefactRequest> {
  /**
   * @generated from field: bytes content = 1;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UploadArtefactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined, b: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined): boolean {
    return proto3.util.equals(UploadArtefactRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UploadArtefactResponse
 */
export class UploadArtefactResponse extends Message<UploadArtefactResponse> {
  /**
   * @generated from field: bytes digest = 2;
   */
  digest = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UploadArtefactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined, b: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined): boolean {
    return proto3.util.equals(UploadArtefactResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DeploymentArtefact
 */
export class DeploymentArtefact extends Message<DeploymentArtefact> {
  /**
   * @generated from field: string digest = 1;
   */
  digest = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: bool executable = 3;
   */
  executable = false;

  constructor(data?: PartialMessage<DeploymentArtefact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DeploymentArtefact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "executable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined, b: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined): boolean {
    return proto3.util.equals(DeploymentArtefact, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateDeploymentRequest
 */
export class CreateDeploymentRequest extends Message<CreateDeploymentRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 1;
   */
  schema?: Module;

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact artefacts = 2;
   */
  artefacts: DeploymentArtefact[] = [];

  /**
   * Runner labels required to run this deployment.
   *
   * @generated from field: optional google.protobuf.Struct labels = 3;
   */
  labels?: Struct;

  constructor(data?: PartialMessage<CreateDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module },
    { no: 2, name: "artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
    { no: 3, name: "labels", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined, b: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(CreateDeploymentRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateDeploymentResponse
 */
export class CreateDeploymentResponse extends Message<CreateDeploymentResponse> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * Currently active deployment for this module, if any.
   *
   * @generated from field: optional string active_deployment_key = 2;
   */
  activeDeploymentKey?: string;

  constructor(data?: PartialMessage<CreateDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active_deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined, b: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(CreateDeploymentResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentArtefactsRequest
 */
export class GetDeploymentArtefactsRequest extends Message<GetDeploymentArtefactsRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact have_artefacts = 2;
   */
  haveArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetDeploymentArtefactsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentArtefactsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "have_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentArtefactsRequest | PlainMessage<GetDeploymentArtefactsRequest> | undefined, b: GetDeploymentArtefactsRequest | PlainMessage<GetDeploymentArtefactsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentArtefactsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentArtefactsResponse
 */
export class GetDeploymentArtefactsResponse extends Message<GetDeploymentArtefactsResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.DeploymentArtefact artefact = 1;
   */
  artefact?: DeploymentArtefact;

  /**
   * @generated from field: bytes chunk = 2;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<GetDeploymentArtefactsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentArtefactsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artefact", kind: "message", T: DeploymentArtefact },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentArtefactsResponse | PlainMessage<GetDeploymentArtefactsResponse> | undefined, b: GetDeploymentArtefactsResponse | PlainMessage<GetDeploymentArtefactsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentArtefactsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentRequest
 */
export class GetDeploymentRequest extends Message<GetDeploymentRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<GetDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined, b: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentResponse
 */
export class GetDeploymentResponse extends Message<GetDeploymentResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 1;
   */
  schema?: Module;

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact artefacts = 2;
   */
  artefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module },
    { no: 2, name: "artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined, b: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.RegisterRunnerRequest
 */
export class RegisterRunnerRequest extends Message<RegisterRunnerRequest> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: string deployment = 3;
   */
  deployment = "";

  /**
   * @generated from field: google.protobuf.Struct labels = 5;
   */
  labels?: Struct;

  constructor(data?: PartialMessage<RegisterRunnerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.RegisterRunnerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "labels", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRunnerRequest | PlainMessage<RegisterRunnerRequest> | undefined, b: RegisterRunnerRequest | PlainMessage<RegisterRunnerRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRunnerRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.RegisterRunnerResponse
 */
export class RegisterRunnerResponse extends Message<RegisterRunnerResponse> {
  constructor(data?: PartialMessage<RegisterRunnerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.RegisterRunnerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRunnerResponse | PlainMessage<RegisterRunnerResponse> | undefined, b: RegisterRunnerResponse | PlainMessage<RegisterRunnerResponse> | undefined): boolean {
    return proto3.util.equals(RegisterRunnerResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeployRequest
 */
export class UpdateDeployRequest extends Message<UpdateDeployRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  constructor(data?: PartialMessage<UpdateDeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeployRequest | PlainMessage<UpdateDeployRequest> | undefined, b: UpdateDeployRequest | PlainMessage<UpdateDeployRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDeployRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeployResponse
 */
export class UpdateDeployResponse extends Message<UpdateDeployResponse> {
  constructor(data?: PartialMessage<UpdateDeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeployResponse | PlainMessage<UpdateDeployResponse> | undefined, b: UpdateDeployResponse | PlainMessage<UpdateDeployResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDeployResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReplaceDeployRequest
 */
export class ReplaceDeployRequest extends Message<ReplaceDeployRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  constructor(data?: PartialMessage<ReplaceDeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReplaceDeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceDeployRequest | PlainMessage<ReplaceDeployRequest> | undefined, b: ReplaceDeployRequest | PlainMessage<ReplaceDeployRequest> | undefined): boolean {
    return proto3.util.equals(ReplaceDeployRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReplaceDeployResponse
 */
export class ReplaceDeployResponse extends Message<ReplaceDeployResponse> {
  constructor(data?: PartialMessage<ReplaceDeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReplaceDeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceDeployResponse | PlainMessage<ReplaceDeployResponse> | undefined, b: ReplaceDeployResponse | PlainMessage<ReplaceDeployResponse> | undefined): boolean {
    return proto3.util.equals(ReplaceDeployResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StreamDeploymentLogsRequest
 */
export class StreamDeploymentLogsRequest extends Message<StreamDeploymentLogsRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: optional string request_key = 2;
   */
  requestKey?: string;

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: int32 log_level = 4;
   */
  logLevel = 0;

  /**
   * @generated from field: map<string, string> attributes = 5;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * @generated from field: optional string error = 7;
   */
  error?: string;

  constructor(data?: PartialMessage<StreamDeploymentLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StreamDeploymentLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "log_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamDeploymentLogsRequest | PlainMessage<StreamDeploymentLogsRequest> | undefined, b: StreamDeploymentLogsRequest | PlainMessage<StreamDeploymentLogsRequest> | undefined): boolean {
    return proto3.util.equals(StreamDeploymentLogsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StreamDeploymentLogsResponse
 */
export class StreamDeploymentLogsResponse extends Message<StreamDeploymentLogsResponse> {
  constructor(data?: PartialMessage<StreamDeploymentLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StreamDeploymentLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamDeploymentLogsResponse | PlainMessage<StreamDeploymentLogsResponse> | undefined, b: StreamDeploymentLogsResponse | PlainMessage<StreamDeploymentLogsResponse> | undefined): boolean {
    return proto3.util.equals(StreamDeploymentLogsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusRequest
 */
export class StatusRequest extends Message<StatusRequest> {
  constructor(data?: PartialMessage<StatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusRequest {
    return new StatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatusRequest | PlainMessage<StatusRequest> | undefined, b: StatusRequest | PlainMessage<StatusRequest> | undefined): boolean {
    return proto3.util.equals(StatusRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse
 */
export class StatusResponse extends Message<StatusResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Controller controllers = 1;
   */
  controllers: StatusResponse_Controller[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Runner runners = 2;
   */
  runners: StatusResponse_Runner[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Deployment deployments = 3;
   */
  deployments: StatusResponse_Deployment[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.IngressRoute ingress_routes = 4;
   */
  ingressRoutes: StatusResponse_IngressRoute[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Route routes = 5;
   */
  routes: StatusResponse_Route[] = [];

  constructor(data?: PartialMessage<StatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controllers", kind: "message", T: StatusResponse_Controller, repeated: true },
    { no: 2, name: "runners", kind: "message", T: StatusResponse_Runner, repeated: true },
    { no: 3, name: "deployments", kind: "message", T: StatusResponse_Deployment, repeated: true },
    { no: 4, name: "ingress_routes", kind: "message", T: StatusResponse_IngressRoute, repeated: true },
    { no: 5, name: "routes", kind: "message", T: StatusResponse_Route, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse {
    return new StatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse | PlainMessage<StatusResponse> | undefined, b: StatusResponse | PlainMessage<StatusResponse> | undefined): boolean {
    return proto3.util.equals(StatusResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Controller
 */
export class StatusResponse_Controller extends Message<StatusResponse_Controller> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  constructor(data?: PartialMessage<StatusResponse_Controller>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Controller";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Controller | PlainMessage<StatusResponse_Controller> | undefined, b: StatusResponse_Controller | PlainMessage<StatusResponse_Controller> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Controller, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Runner
 */
export class StatusResponse_Runner extends Message<StatusResponse_Runner> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: optional string deployment = 3;
   */
  deployment?: string;

  /**
   * @generated from field: google.protobuf.Struct labels = 4;
   */
  labels?: Struct;

  constructor(data?: PartialMessage<StatusResponse_Runner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Runner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "labels", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Runner | PlainMessage<StatusResponse_Runner> | undefined, b: StatusResponse_Runner | PlainMessage<StatusResponse_Runner> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Runner, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Deployment
 */
export class StatusResponse_Deployment extends Message<StatusResponse_Deployment> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: int32 min_replicas = 4;
   */
  minReplicas = 0;

  /**
   * @generated from field: int32 replicas = 7;
   */
  replicas = 0;

  /**
   * @generated from field: google.protobuf.Struct labels = 5;
   */
  labels?: Struct;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 6;
   */
  schema?: Module;

  constructor(data?: PartialMessage<StatusResponse_Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "labels", kind: "message", T: Struct },
    { no: 6, name: "schema", kind: "message", T: Module },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Deployment | PlainMessage<StatusResponse_Deployment> | undefined, b: StatusResponse_Deployment | PlainMessage<StatusResponse_Deployment> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Deployment, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.IngressRoute
 */
export class StatusResponse_IngressRoute extends Message<StatusResponse_IngressRoute> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Ref verb = 2;
   */
  verb?: Ref;

  /**
   * @generated from field: string method = 3;
   */
  method = "";

  /**
   * @generated from field: string path = 4;
   */
  path = "";

  constructor(data?: PartialMessage<StatusResponse_IngressRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.IngressRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verb", kind: "message", T: Ref },
    { no: 3, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_IngressRoute | PlainMessage<StatusResponse_IngressRoute> | undefined, b: StatusResponse_IngressRoute | PlainMessage<StatusResponse_IngressRoute> | undefined): boolean {
    return proto3.util.equals(StatusResponse_IngressRoute, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Route
 */
export class StatusResponse_Route extends Message<StatusResponse_Route> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: string deployment = 2;
   */
  deployment = "";

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  constructor(data?: PartialMessage<StatusResponse_Route>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Route";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Route {
    return new StatusResponse_Route().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Route {
    return new StatusResponse_Route().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Route {
    return new StatusResponse_Route().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Route | PlainMessage<StatusResponse_Route> | undefined, b: StatusResponse_Route | PlainMessage<StatusResponse_Route> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Route, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ProcessListRequest
 */
export class ProcessListRequest extends Message<ProcessListRequest> {
  constructor(data?: PartialMessage<ProcessListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ProcessListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessListRequest {
    return new ProcessListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessListRequest {
    return new ProcessListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessListRequest {
    return new ProcessListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessListRequest | PlainMessage<ProcessListRequest> | undefined, b: ProcessListRequest | PlainMessage<ProcessListRequest> | undefined): boolean {
    return proto3.util.equals(ProcessListRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ProcessListResponse
 */
export class ProcessListResponse extends Message<ProcessListResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.ProcessListResponse.Process processes = 1;
   */
  processes: ProcessListResponse_Process[] = [];

  constructor(data?: PartialMessage<ProcessListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ProcessListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "processes", kind: "message", T: ProcessListResponse_Process, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessListResponse {
    return new ProcessListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessListResponse {
    return new ProcessListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessListResponse {
    return new ProcessListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessListResponse | PlainMessage<ProcessListResponse> | undefined, b: ProcessListResponse | PlainMessage<ProcessListResponse> | undefined): boolean {
    return proto3.util.equals(ProcessListResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ProcessListResponse.ProcessRunner
 */
export class ProcessListResponse_ProcessRunner extends Message<ProcessListResponse_ProcessRunner> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: google.protobuf.Struct labels = 3;
   */
  labels?: Struct;

  constructor(data?: PartialMessage<ProcessListResponse_ProcessRunner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ProcessListResponse.ProcessRunner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessListResponse_ProcessRunner {
    return new ProcessListResponse_ProcessRunner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessListResponse_ProcessRunner {
    return new ProcessListResponse_ProcessRunner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessListResponse_ProcessRunner {
    return new ProcessListResponse_ProcessRunner().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessListResponse_ProcessRunner | PlainMessage<ProcessListResponse_ProcessRunner> | undefined, b: ProcessListResponse_ProcessRunner | PlainMessage<ProcessListResponse_ProcessRunner> | undefined): boolean {
    return proto3.util.equals(ProcessListResponse_ProcessRunner, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ProcessListResponse.Process
 */
export class ProcessListResponse_Process extends Message<ProcessListResponse_Process> {
  /**
   * @generated from field: string deployment = 1;
   */
  deployment = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  /**
   * @generated from field: google.protobuf.Struct labels = 3;
   */
  labels?: Struct;

  /**
   * @generated from field: optional xyz.block.ftl.v1.ProcessListResponse.ProcessRunner runner = 4;
   */
  runner?: ProcessListResponse_ProcessRunner;

  constructor(data?: PartialMessage<ProcessListResponse_Process>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ProcessListResponse.Process";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "labels", kind: "message", T: Struct },
    { no: 4, name: "runner", kind: "message", T: ProcessListResponse_ProcessRunner, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessListResponse_Process {
    return new ProcessListResponse_Process().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessListResponse_Process {
    return new ProcessListResponse_Process().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessListResponse_Process {
    return new ProcessListResponse_Process().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessListResponse_Process | PlainMessage<ProcessListResponse_Process> | undefined, b: ProcessListResponse_Process | PlainMessage<ProcessListResponse_Process> | undefined): boolean {
    return proto3.util.equals(ProcessListResponse_Process, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ResetSubscriptionRequest
 */
export class ResetSubscriptionRequest extends Message<ResetSubscriptionRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Ref subscription = 1;
   */
  subscription?: Ref;

  constructor(data?: PartialMessage<ResetSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ResetSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: Ref },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetSubscriptionRequest {
    return new ResetSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetSubscriptionRequest {
    return new ResetSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetSubscriptionRequest {
    return new ResetSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetSubscriptionRequest | PlainMessage<ResetSubscriptionRequest> | undefined, b: ResetSubscriptionRequest | PlainMessage<ResetSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(ResetSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ResetSubscriptionResponse
 */
export class ResetSubscriptionResponse extends Message<ResetSubscriptionResponse> {
  constructor(data?: PartialMessage<ResetSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ResetSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetSubscriptionResponse {
    return new ResetSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetSubscriptionResponse {
    return new ResetSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetSubscriptionResponse {
    return new ResetSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResetSubscriptionResponse | PlainMessage<ResetSubscriptionResponse> | undefined, b: ResetSubscriptionResponse | PlainMessage<ResetSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(ResetSubscriptionResponse, a, b);
  }
}

