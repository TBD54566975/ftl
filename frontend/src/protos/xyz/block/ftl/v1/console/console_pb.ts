// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/console/console.proto (package xyz.block.ftl.v1.console, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Data as Data$1, Verb as Verb$1, VerbRef } from "../schema/schema_pb.js";

/**
 * @generated from enum xyz.block.ftl.v1.console.EventType
 */
export enum EventType {
  /**
   * @generated from enum value: EVENT_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: EVENT_TYPE_LOG = 1;
   */
  LOG = 1,

  /**
   * @generated from enum value: EVENT_TYPE_CALL = 2;
   */
  CALL = 2,

  /**
   * @generated from enum value: EVENT_TYPE_DEPLOYMENT_CREATED = 3;
   */
  DEPLOYMENT_CREATED = 3,

  /**
   * @generated from enum value: EVENT_TYPE_DEPLOYMENT_UPDATED = 4;
   */
  DEPLOYMENT_UPDATED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(EventType)
proto3.util.setEnumType(EventType, "xyz.block.ftl.v1.console.EventType", [
  { no: 0, name: "EVENT_TYPE_UNKNOWN" },
  { no: 1, name: "EVENT_TYPE_LOG" },
  { no: 2, name: "EVENT_TYPE_CALL" },
  { no: 3, name: "EVENT_TYPE_DEPLOYMENT_CREATED" },
  { no: 4, name: "EVENT_TYPE_DEPLOYMENT_UPDATED" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.console.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: LOG_LEVEL_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: LOG_LEVEL_TRACE = 1;
   */
  TRACE = 1,

  /**
   * @generated from enum value: LOG_LEVEL_DEBUG = 5;
   */
  DEBUG = 5,

  /**
   * @generated from enum value: LOG_LEVEL_INFO = 9;
   */
  INFO = 9,

  /**
   * @generated from enum value: LOG_LEVEL_WARN = 13;
   */
  WARN = 13,

  /**
   * @generated from enum value: LOG_LEVEL_ERROR = 17;
   */
  ERROR = 17,
}
// Retrieve enum metadata with: proto3.getEnumType(LogLevel)
proto3.util.setEnumType(LogLevel, "xyz.block.ftl.v1.console.LogLevel", [
  { no: 0, name: "LOG_LEVEL_UNKNOWN" },
  { no: 1, name: "LOG_LEVEL_TRACE" },
  { no: 5, name: "LOG_LEVEL_DEBUG" },
  { no: 9, name: "LOG_LEVEL_INFO" },
  { no: 13, name: "LOG_LEVEL_WARN" },
  { no: 17, name: "LOG_LEVEL_ERROR" },
]);

/**
 * @generated from message xyz.block.ftl.v1.console.LogEvent
 */
export class LogEvent extends Message<LogEvent> {
  /**
   * @generated from field: string deployment_name = 1;
   */
  deploymentName = "";

  /**
   * @generated from field: optional string request_name = 2;
   */
  requestName?: string;

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: int32 log_level = 4;
   */
  logLevel = 0;

  /**
   * @generated from field: map<string, string> attributes = 5;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * @generated from field: optional string error = 7;
   */
  error?: string;

  constructor(data?: PartialMessage<LogEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.LogEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "log_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogEvent {
    return new LogEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogEvent {
    return new LogEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogEvent {
    return new LogEvent().fromJsonString(jsonString, options);
  }

  static equals(a: LogEvent | PlainMessage<LogEvent> | undefined, b: LogEvent | PlainMessage<LogEvent> | undefined): boolean {
    return proto3.util.equals(LogEvent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.CallEvent
 */
export class CallEvent extends Message<CallEvent> {
  /**
   * @generated from field: optional string request_name = 1;
   */
  requestName?: string;

  /**
   * @generated from field: string deployment_name = 2;
   */
  deploymentName = "";

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: optional xyz.block.ftl.v1.schema.VerbRef source_verb_ref = 4;
   */
  sourceVerbRef?: VerbRef;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.VerbRef destination_verb_ref = 5;
   */
  destinationVerbRef?: VerbRef;

  /**
   * @generated from field: google.protobuf.Duration duration = 6;
   */
  duration?: Duration;

  /**
   * @generated from field: string request = 7;
   */
  request = "";

  /**
   * @generated from field: string response = 8;
   */
  response = "";

  /**
   * @generated from field: optional string error = 9;
   */
  error?: string;

  constructor(data?: PartialMessage<CallEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.CallEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "source_verb_ref", kind: "message", T: VerbRef, opt: true },
    { no: 5, name: "destination_verb_ref", kind: "message", T: VerbRef },
    { no: 6, name: "duration", kind: "message", T: Duration },
    { no: 7, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallEvent {
    return new CallEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallEvent {
    return new CallEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallEvent {
    return new CallEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CallEvent | PlainMessage<CallEvent> | undefined, b: CallEvent | PlainMessage<CallEvent> | undefined): boolean {
    return proto3.util.equals(CallEvent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.DeploymentCreatedEvent
 */
export class DeploymentCreatedEvent extends Message<DeploymentCreatedEvent> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: string module_name = 3;
   */
  moduleName = "";

  /**
   * @generated from field: int32 min_replicas = 4;
   */
  minReplicas = 0;

  /**
   * @generated from field: optional string replaced = 5;
   */
  replaced?: string;

  constructor(data?: PartialMessage<DeploymentCreatedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.DeploymentCreatedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "replaced", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentCreatedEvent {
    return new DeploymentCreatedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentCreatedEvent {
    return new DeploymentCreatedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentCreatedEvent {
    return new DeploymentCreatedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentCreatedEvent | PlainMessage<DeploymentCreatedEvent> | undefined, b: DeploymentCreatedEvent | PlainMessage<DeploymentCreatedEvent> | undefined): boolean {
    return proto3.util.equals(DeploymentCreatedEvent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.DeploymentUpdatedEvent
 */
export class DeploymentUpdatedEvent extends Message<DeploymentUpdatedEvent> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  /**
   * @generated from field: int32 prev_min_replicas = 3;
   */
  prevMinReplicas = 0;

  constructor(data?: PartialMessage<DeploymentUpdatedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.DeploymentUpdatedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "prev_min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentUpdatedEvent {
    return new DeploymentUpdatedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentUpdatedEvent {
    return new DeploymentUpdatedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentUpdatedEvent {
    return new DeploymentUpdatedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentUpdatedEvent | PlainMessage<DeploymentUpdatedEvent> | undefined, b: DeploymentUpdatedEvent | PlainMessage<DeploymentUpdatedEvent> | undefined): boolean {
    return proto3.util.equals(DeploymentUpdatedEvent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Verb
 */
export class Verb extends Message<Verb> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Verb verb = 1;
   */
  verb?: Verb$1;

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  /**
   * @generated from field: string json_request_schema = 3;
   */
  jsonRequestSchema = "";

  constructor(data?: PartialMessage<Verb>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Verb";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verb", kind: "message", T: Verb$1 },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "json_request_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Verb {
    return new Verb().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJsonString(jsonString, options);
  }

  static equals(a: Verb | PlainMessage<Verb> | undefined, b: Verb | PlainMessage<Verb> | undefined): boolean {
    return proto3.util.equals(Verb, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Data
 */
export class Data extends Message<Data> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Data data = 1;
   */
  data?: Data$1;

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  constructor(data?: PartialMessage<Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Data$1 },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {
    return new Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJsonString(jsonString, options);
  }

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {
    return proto3.util.equals(Data, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Module
 */
export class Module extends Message<Module> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string deployment_name = 2;
   */
  deploymentName = "";

  /**
   * @generated from field: string language = 3;
   */
  language = "";

  /**
   * @generated from field: string schema = 4;
   */
  schema = "";

  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Verb verbs = 5;
   */
  verbs: Verb[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Data data = 6;
   */
  data: Data[] = [];

  constructor(data?: PartialMessage<Module>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Module";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "verbs", kind: "message", T: Verb, repeated: true },
    { no: 6, name: "data", kind: "message", T: Data, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Module {
    return new Module().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJsonString(jsonString, options);
  }

  static equals(a: Module | PlainMessage<Module> | undefined, b: Module | PlainMessage<Module> | undefined): boolean {
    return proto3.util.equals(Module, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetModulesRequest
 */
export class GetModulesRequest extends Message<GetModulesRequest> {
  constructor(data?: PartialMessage<GetModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined, b: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined): boolean {
    return proto3.util.equals(GetModulesRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetModulesResponse
 */
export class GetModulesResponse extends Message<GetModulesResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Module modules = 1;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<GetModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined, b: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined): boolean {
    return proto3.util.equals(GetModulesResponse, a, b);
  }
}

/**
 * Query for events.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery
 */
export class EventsQuery extends Message<EventsQuery> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.EventsQuery.Filter filters = 1;
   */
  filters: EventsQuery_Filter[] = [];

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: xyz.block.ftl.v1.console.EventsQuery.Order order = 3;
   */
  order = EventsQuery_Order.ASC;

  constructor(data?: PartialMessage<EventsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filters", kind: "message", T: EventsQuery_Filter, repeated: true },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "order", kind: "enum", T: proto3.getEnumType(EventsQuery_Order) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery {
    return new EventsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery {
    return new EventsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery {
    return new EventsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery | PlainMessage<EventsQuery> | undefined, b: EventsQuery | PlainMessage<EventsQuery> | undefined): boolean {
    return proto3.util.equals(EventsQuery, a, b);
  }
}

/**
 * @generated from enum xyz.block.ftl.v1.console.EventsQuery.Order
 */
export enum EventsQuery_Order {
  /**
   * @generated from enum value: ASC = 0;
   */
  ASC = 0,

  /**
   * @generated from enum value: DESC = 1;
   */
  DESC = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(EventsQuery_Order)
proto3.util.setEnumType(EventsQuery_Order, "xyz.block.ftl.v1.console.EventsQuery.Order", [
  { no: 0, name: "ASC" },
  { no: 1, name: "DESC" },
]);

/**
 * Limit the number of events returned.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.LimitFilter
 */
export class EventsQuery_LimitFilter extends Message<EventsQuery_LimitFilter> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  constructor(data?: PartialMessage<EventsQuery_LimitFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.LimitFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_LimitFilter {
    return new EventsQuery_LimitFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_LimitFilter {
    return new EventsQuery_LimitFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_LimitFilter {
    return new EventsQuery_LimitFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_LimitFilter | PlainMessage<EventsQuery_LimitFilter> | undefined, b: EventsQuery_LimitFilter | PlainMessage<EventsQuery_LimitFilter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_LimitFilter, a, b);
  }
}

/**
 * Filters events by log level.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.LogLevelFilter
 */
export class EventsQuery_LogLevelFilter extends Message<EventsQuery_LogLevelFilter> {
  /**
   * @generated from field: xyz.block.ftl.v1.console.LogLevel log_level = 1;
   */
  logLevel = LogLevel.UNKNOWN;

  constructor(data?: PartialMessage<EventsQuery_LogLevelFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.LogLevelFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log_level", kind: "enum", T: proto3.getEnumType(LogLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_LogLevelFilter {
    return new EventsQuery_LogLevelFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_LogLevelFilter {
    return new EventsQuery_LogLevelFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_LogLevelFilter {
    return new EventsQuery_LogLevelFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_LogLevelFilter | PlainMessage<EventsQuery_LogLevelFilter> | undefined, b: EventsQuery_LogLevelFilter | PlainMessage<EventsQuery_LogLevelFilter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_LogLevelFilter, a, b);
  }
}

/**
 * Filters events by deployment name.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.DeploymentFilter
 */
export class EventsQuery_DeploymentFilter extends Message<EventsQuery_DeploymentFilter> {
  /**
   * @generated from field: repeated string deployments = 1;
   */
  deployments: string[] = [];

  constructor(data?: PartialMessage<EventsQuery_DeploymentFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.DeploymentFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_DeploymentFilter {
    return new EventsQuery_DeploymentFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_DeploymentFilter {
    return new EventsQuery_DeploymentFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_DeploymentFilter {
    return new EventsQuery_DeploymentFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_DeploymentFilter | PlainMessage<EventsQuery_DeploymentFilter> | undefined, b: EventsQuery_DeploymentFilter | PlainMessage<EventsQuery_DeploymentFilter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_DeploymentFilter, a, b);
  }
}

/**
 * Filters events by request key.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.RequestFilter
 */
export class EventsQuery_RequestFilter extends Message<EventsQuery_RequestFilter> {
  /**
   * @generated from field: repeated string requests = 1;
   */
  requests: string[] = [];

  constructor(data?: PartialMessage<EventsQuery_RequestFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.RequestFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_RequestFilter {
    return new EventsQuery_RequestFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_RequestFilter {
    return new EventsQuery_RequestFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_RequestFilter {
    return new EventsQuery_RequestFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_RequestFilter | PlainMessage<EventsQuery_RequestFilter> | undefined, b: EventsQuery_RequestFilter | PlainMessage<EventsQuery_RequestFilter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_RequestFilter, a, b);
  }
}

/**
 * Filters events by event type.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.EventTypeFilter
 */
export class EventsQuery_EventTypeFilter extends Message<EventsQuery_EventTypeFilter> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.EventType event_types = 1;
   */
  eventTypes: EventType[] = [];

  constructor(data?: PartialMessage<EventsQuery_EventTypeFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.EventTypeFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_types", kind: "enum", T: proto3.getEnumType(EventType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_EventTypeFilter {
    return new EventsQuery_EventTypeFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_EventTypeFilter {
    return new EventsQuery_EventTypeFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_EventTypeFilter {
    return new EventsQuery_EventTypeFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_EventTypeFilter | PlainMessage<EventsQuery_EventTypeFilter> | undefined, b: EventsQuery_EventTypeFilter | PlainMessage<EventsQuery_EventTypeFilter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_EventTypeFilter, a, b);
  }
}

/**
 * Filters events by time.
 *
 * Either end of the time range can be omitted to indicate no bound.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.TimeFilter
 */
export class EventsQuery_TimeFilter extends Message<EventsQuery_TimeFilter> {
  /**
   * @generated from field: optional google.protobuf.Timestamp older_than = 1;
   */
  olderThan?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp newer_than = 2;
   */
  newerThan?: Timestamp;

  constructor(data?: PartialMessage<EventsQuery_TimeFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.TimeFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "older_than", kind: "message", T: Timestamp, opt: true },
    { no: 2, name: "newer_than", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_TimeFilter {
    return new EventsQuery_TimeFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_TimeFilter {
    return new EventsQuery_TimeFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_TimeFilter {
    return new EventsQuery_TimeFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_TimeFilter | PlainMessage<EventsQuery_TimeFilter> | undefined, b: EventsQuery_TimeFilter | PlainMessage<EventsQuery_TimeFilter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_TimeFilter, a, b);
  }
}

/**
 * Filters events by ID.
 *
 * Either end of the ID range can be omitted to indicate no bound.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.IDFilter
 */
export class EventsQuery_IDFilter extends Message<EventsQuery_IDFilter> {
  /**
   * @generated from field: optional int64 lower_than = 1;
   */
  lowerThan?: bigint;

  /**
   * @generated from field: optional int64 higher_than = 2;
   */
  higherThan?: bigint;

  constructor(data?: PartialMessage<EventsQuery_IDFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.IDFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lower_than", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: "higher_than", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_IDFilter {
    return new EventsQuery_IDFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_IDFilter {
    return new EventsQuery_IDFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_IDFilter {
    return new EventsQuery_IDFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_IDFilter | PlainMessage<EventsQuery_IDFilter> | undefined, b: EventsQuery_IDFilter | PlainMessage<EventsQuery_IDFilter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_IDFilter, a, b);
  }
}

/**
 * Filters events by call.
 *
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.CallFilter
 */
export class EventsQuery_CallFilter extends Message<EventsQuery_CallFilter> {
  /**
   * @generated from field: string dest_module = 1;
   */
  destModule = "";

  /**
   * @generated from field: optional string dest_verb = 2;
   */
  destVerb?: string;

  /**
   * @generated from field: optional string source_module = 3;
   */
  sourceModule?: string;

  constructor(data?: PartialMessage<EventsQuery_CallFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.CallFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dest_module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dest_verb", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "source_module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_CallFilter {
    return new EventsQuery_CallFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_CallFilter {
    return new EventsQuery_CallFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_CallFilter {
    return new EventsQuery_CallFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_CallFilter | PlainMessage<EventsQuery_CallFilter> | undefined, b: EventsQuery_CallFilter | PlainMessage<EventsQuery_CallFilter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_CallFilter, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.EventsQuery.Filter
 */
export class EventsQuery_Filter extends Message<EventsQuery_Filter> {
  /**
   * These map 1:1 with filters in backend/controller/internal/dal/events.go
   *
   * @generated from oneof xyz.block.ftl.v1.console.EventsQuery.Filter.filter
   */
  filter: {
    /**
     * @generated from field: xyz.block.ftl.v1.console.EventsQuery.LimitFilter limit = 1;
     */
    value: EventsQuery_LimitFilter;
    case: "limit";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.EventsQuery.LogLevelFilter log_level = 2;
     */
    value: EventsQuery_LogLevelFilter;
    case: "logLevel";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.EventsQuery.DeploymentFilter deployments = 3;
     */
    value: EventsQuery_DeploymentFilter;
    case: "deployments";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.EventsQuery.RequestFilter requests = 4;
     */
    value: EventsQuery_RequestFilter;
    case: "requests";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.EventsQuery.EventTypeFilter event_types = 5;
     */
    value: EventsQuery_EventTypeFilter;
    case: "eventTypes";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.EventsQuery.TimeFilter time = 6;
     */
    value: EventsQuery_TimeFilter;
    case: "time";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.EventsQuery.IDFilter id = 7;
     */
    value: EventsQuery_IDFilter;
    case: "id";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.EventsQuery.CallFilter call = 8;
     */
    value: EventsQuery_CallFilter;
    case: "call";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<EventsQuery_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.EventsQuery.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "message", T: EventsQuery_LimitFilter, oneof: "filter" },
    { no: 2, name: "log_level", kind: "message", T: EventsQuery_LogLevelFilter, oneof: "filter" },
    { no: 3, name: "deployments", kind: "message", T: EventsQuery_DeploymentFilter, oneof: "filter" },
    { no: 4, name: "requests", kind: "message", T: EventsQuery_RequestFilter, oneof: "filter" },
    { no: 5, name: "event_types", kind: "message", T: EventsQuery_EventTypeFilter, oneof: "filter" },
    { no: 6, name: "time", kind: "message", T: EventsQuery_TimeFilter, oneof: "filter" },
    { no: 7, name: "id", kind: "message", T: EventsQuery_IDFilter, oneof: "filter" },
    { no: 8, name: "call", kind: "message", T: EventsQuery_CallFilter, oneof: "filter" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsQuery_Filter {
    return new EventsQuery_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsQuery_Filter {
    return new EventsQuery_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsQuery_Filter {
    return new EventsQuery_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: EventsQuery_Filter | PlainMessage<EventsQuery_Filter> | undefined, b: EventsQuery_Filter | PlainMessage<EventsQuery_Filter> | undefined): boolean {
    return proto3.util.equals(EventsQuery_Filter, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.StreamEventsRequest
 */
export class StreamEventsRequest extends Message<StreamEventsRequest> {
  /**
   * @generated from field: optional google.protobuf.Duration update_interval = 1;
   */
  updateInterval?: Duration;

  /**
   * @generated from field: xyz.block.ftl.v1.console.EventsQuery query = 2;
   */
  query?: EventsQuery;

  constructor(data?: PartialMessage<StreamEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.StreamEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_interval", kind: "message", T: Duration, opt: true },
    { no: 2, name: "query", kind: "message", T: EventsQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEventsRequest | PlainMessage<StreamEventsRequest> | undefined, b: StreamEventsRequest | PlainMessage<StreamEventsRequest> | undefined): boolean {
    return proto3.util.equals(StreamEventsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.StreamEventsResponse
 */
export class StreamEventsResponse extends Message<StreamEventsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Event events = 1;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<StreamEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.StreamEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEventsResponse | PlainMessage<StreamEventsResponse> | undefined, b: StreamEventsResponse | PlainMessage<StreamEventsResponse> | undefined): boolean {
    return proto3.util.equals(StreamEventsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 1;
   */
  timeStamp?: Timestamp;

  /**
   * Unique ID for event.
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from oneof xyz.block.ftl.v1.console.Event.entry
   */
  entry: {
    /**
     * @generated from field: xyz.block.ftl.v1.console.LogEvent log = 3;
     */
    value: LogEvent;
    case: "log";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.CallEvent call = 4;
     */
    value: CallEvent;
    case: "call";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.DeploymentCreatedEvent deployment_created = 5;
     */
    value: DeploymentCreatedEvent;
    case: "deploymentCreated";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.DeploymentUpdatedEvent deployment_updated = 6;
     */
    value: DeploymentUpdatedEvent;
    case: "deploymentUpdated";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "log", kind: "message", T: LogEvent, oneof: "entry" },
    { no: 4, name: "call", kind: "message", T: CallEvent, oneof: "entry" },
    { no: 5, name: "deployment_created", kind: "message", T: DeploymentCreatedEvent, oneof: "entry" },
    { no: 6, name: "deployment_updated", kind: "message", T: DeploymentUpdatedEvent, oneof: "entry" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetEventsResponse
 */
export class GetEventsResponse extends Message<GetEventsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Event events = 1;
   */
  events: Event[] = [];

  /**
   * For pagination, this cursor is where we should start our next query
   *
   * @generated from field: optional int64 cursor = 2;
   */
  cursor?: bigint;

  constructor(data?: PartialMessage<GetEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventsResponse | PlainMessage<GetEventsResponse> | undefined, b: GetEventsResponse | PlainMessage<GetEventsResponse> | undefined): boolean {
    return proto3.util.equals(GetEventsResponse, a, b);
  }
}

