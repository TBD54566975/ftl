// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/ftl.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { Module, Ref, Schema, Type } from "./schema/schema_pb.js";

/**
 * @generated from enum xyz.block.ftl.v1.DeploymentChangeType
 */
export enum DeploymentChangeType {
  /**
   * @generated from enum value: DEPLOYMENT_ADDED = 0;
   */
  DEPLOYMENT_ADDED = 0,

  /**
   * @generated from enum value: DEPLOYMENT_REMOVED = 1;
   */
  DEPLOYMENT_REMOVED = 1,

  /**
   * @generated from enum value: DEPLOYMENT_CHANGED = 2;
   */
  DEPLOYMENT_CHANGED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentChangeType)
proto3.util.setEnumType(DeploymentChangeType, "xyz.block.ftl.v1.DeploymentChangeType", [
  { no: 0, name: "DEPLOYMENT_ADDED" },
  { no: 1, name: "DEPLOYMENT_REMOVED" },
  { no: 2, name: "DEPLOYMENT_CHANGED" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.RunnerState
 */
export enum RunnerState {
  /**
   * The Runner is waiting for a deployment.
   *
   * @generated from enum value: RUNNER_IDLE = 0;
   */
  RUNNER_IDLE = 0,

  /**
   * The Runner and Controller have agreed that the Runner is reserved.
   *
   * @generated from enum value: RUNNER_RESERVED = 1;
   */
  RUNNER_RESERVED = 1,

  /**
   * The Runner is assigned to a deployment.
   *
   * @generated from enum value: RUNNER_ASSIGNED = 2;
   */
  RUNNER_ASSIGNED = 2,

  /**
   * The Runner is dead.
   *
   * @generated from enum value: RUNNER_DEAD = 3;
   */
  RUNNER_DEAD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RunnerState)
proto3.util.setEnumType(RunnerState, "xyz.block.ftl.v1.RunnerState", [
  { no: 0, name: "RUNNER_IDLE" },
  { no: 1, name: "RUNNER_RESERVED" },
  { no: 2, name: "RUNNER_ASSIGNED" },
  { no: 3, name: "RUNNER_DEAD" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.ConfigProvider
 */
export enum ConfigProvider {
  /**
   * Write values inline in the configuration file.
   *
   * @generated from enum value: CONFIG_INLINE = 0;
   */
  CONFIG_INLINE = 0,

  /**
   * Print configuration as environment variables.
   *
   * @generated from enum value: CONFIG_ENVAR = 1;
   */
  CONFIG_ENVAR = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ConfigProvider)
proto3.util.setEnumType(ConfigProvider, "xyz.block.ftl.v1.ConfigProvider", [
  { no: 0, name: "CONFIG_INLINE" },
  { no: 1, name: "CONFIG_ENVAR" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.SecretProvider
 */
export enum SecretProvider {
  /**
   * Write values inline in the configuration file.
   *
   * @generated from enum value: SECRET_INLINE = 0;
   */
  SECRET_INLINE = 0,

  /**
   * Print configuration as environment variables.
   *
   * @generated from enum value: SECRET_ENVAR = 1;
   */
  SECRET_ENVAR = 1,

  /**
   * Write to the system keychain.
   *
   * @generated from enum value: SECRET_KEYCHAIN = 2;
   */
  SECRET_KEYCHAIN = 2,

  /**
   * Store a secret in the 1Password vault.
   *
   * @generated from enum value: SECRET_OP = 3;
   */
  SECRET_OP = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SecretProvider)
proto3.util.setEnumType(SecretProvider, "xyz.block.ftl.v1.SecretProvider", [
  { no: 0, name: "SECRET_INLINE" },
  { no: 1, name: "SECRET_ENVAR" },
  { no: 2, name: "SECRET_KEYCHAIN" },
  { no: 3, name: "SECRET_OP" },
]);

/**
 * @generated from message xyz.block.ftl.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * If present, the service is not ready to accept requests and this is the
   * reason.
   *
   * @generated from field: optional string not_ready = 1;
   */
  notReady?: string;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "not_ready", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ModuleContextRequest
 */
export class ModuleContextRequest extends Message<ModuleContextRequest> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  constructor(data?: PartialMessage<ModuleContextRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ModuleContextRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleContextRequest {
    return new ModuleContextRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleContextRequest {
    return new ModuleContextRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleContextRequest {
    return new ModuleContextRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleContextRequest | PlainMessage<ModuleContextRequest> | undefined, b: ModuleContextRequest | PlainMessage<ModuleContextRequest> | undefined): boolean {
    return proto3.util.equals(ModuleContextRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ModuleContextResponse
 */
export class ModuleContextResponse extends Message<ModuleContextResponse> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: map<string, bytes> configs = 2;
   */
  configs: { [key: string]: Uint8Array } = {};

  /**
   * @generated from field: map<string, bytes> secrets = 3;
   */
  secrets: { [key: string]: Uint8Array } = {};

  /**
   * @generated from field: repeated xyz.block.ftl.v1.ModuleContextResponse.DSN databases = 4;
   */
  databases: ModuleContextResponse_DSN[] = [];

  constructor(data?: PartialMessage<ModuleContextResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ModuleContextResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "configs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 3, name: "secrets", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 4, name: "databases", kind: "message", T: ModuleContextResponse_DSN, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleContextResponse {
    return new ModuleContextResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleContextResponse {
    return new ModuleContextResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleContextResponse {
    return new ModuleContextResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleContextResponse | PlainMessage<ModuleContextResponse> | undefined, b: ModuleContextResponse | PlainMessage<ModuleContextResponse> | undefined): boolean {
    return proto3.util.equals(ModuleContextResponse, a, b);
  }
}

/**
 * @generated from enum xyz.block.ftl.v1.ModuleContextResponse.DBType
 */
export enum ModuleContextResponse_DBType {
  /**
   * @generated from enum value: POSTGRES = 0;
   */
  POSTGRES = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(ModuleContextResponse_DBType)
proto3.util.setEnumType(ModuleContextResponse_DBType, "xyz.block.ftl.v1.ModuleContextResponse.DBType", [
  { no: 0, name: "POSTGRES" },
]);

/**
 * @generated from message xyz.block.ftl.v1.ModuleContextResponse.Ref
 */
export class ModuleContextResponse_Ref extends Message<ModuleContextResponse_Ref> {
  /**
   * @generated from field: optional string module = 1;
   */
  module?: string;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ModuleContextResponse_Ref>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ModuleContextResponse.Ref";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleContextResponse_Ref {
    return new ModuleContextResponse_Ref().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleContextResponse_Ref {
    return new ModuleContextResponse_Ref().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleContextResponse_Ref {
    return new ModuleContextResponse_Ref().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleContextResponse_Ref | PlainMessage<ModuleContextResponse_Ref> | undefined, b: ModuleContextResponse_Ref | PlainMessage<ModuleContextResponse_Ref> | undefined): boolean {
    return proto3.util.equals(ModuleContextResponse_Ref, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ModuleContextResponse.DSN
 */
export class ModuleContextResponse_DSN extends Message<ModuleContextResponse_DSN> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: xyz.block.ftl.v1.ModuleContextResponse.DBType type = 2;
   */
  type = ModuleContextResponse_DBType.POSTGRES;

  /**
   * @generated from field: string dsn = 3;
   */
  dsn = "";

  constructor(data?: PartialMessage<ModuleContextResponse_DSN>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ModuleContextResponse.DSN";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ModuleContextResponse_DBType) },
    { no: 3, name: "dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleContextResponse_DSN {
    return new ModuleContextResponse_DSN().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleContextResponse_DSN {
    return new ModuleContextResponse_DSN().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleContextResponse_DSN {
    return new ModuleContextResponse_DSN().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleContextResponse_DSN | PlainMessage<ModuleContextResponse_DSN> | undefined, b: ModuleContextResponse_DSN | PlainMessage<ModuleContextResponse_DSN> | undefined): boolean {
    return proto3.util.equals(ModuleContextResponse_DSN, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.Metadata.Pair values = 1;
   */
  values: Metadata_Pair[] = [];

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: Metadata_Pair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.Metadata.Pair
 */
export class Metadata_Pair extends Message<Metadata_Pair> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Metadata_Pair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.Metadata.Pair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata_Pair {
    return new Metadata_Pair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata_Pair {
    return new Metadata_Pair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata_Pair {
    return new Metadata_Pair().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata_Pair | PlainMessage<Metadata_Pair> | undefined, b: Metadata_Pair | PlainMessage<Metadata_Pair> | undefined): boolean {
    return proto3.util.equals(Metadata_Pair, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CallRequest
 */
export class CallRequest extends Message<CallRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Ref verb = 2;
   */
  verb?: Ref;

  /**
   * @generated from field: bytes body = 3;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<CallRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CallRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "verb", kind: "message", T: Ref },
    { no: 3, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallRequest {
    return new CallRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallRequest {
    return new CallRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallRequest {
    return new CallRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CallRequest | PlainMessage<CallRequest> | undefined, b: CallRequest | PlainMessage<CallRequest> | undefined): boolean {
    return proto3.util.equals(CallRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CallResponse
 */
export class CallResponse extends Message<CallResponse> {
  /**
   * @generated from oneof xyz.block.ftl.v1.CallResponse.response
   */
  response: {
    /**
     * @generated from field: bytes body = 1;
     */
    value: Uint8Array;
    case: "body";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.CallResponse.Error error = 2;
     */
    value: CallResponse_Error;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CallResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CallResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "response" },
    { no: 2, name: "error", kind: "message", T: CallResponse_Error, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallResponse {
    return new CallResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallResponse {
    return new CallResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallResponse {
    return new CallResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CallResponse | PlainMessage<CallResponse> | undefined, b: CallResponse | PlainMessage<CallResponse> | undefined): boolean {
    return proto3.util.equals(CallResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CallResponse.Error
 */
export class CallResponse_Error extends Message<CallResponse_Error> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * TODO: Richer error type.
   *
   * @generated from field: optional string stack = 2;
   */
  stack?: string;

  constructor(data?: PartialMessage<CallResponse_Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CallResponse.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stack", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallResponse_Error {
    return new CallResponse_Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallResponse_Error {
    return new CallResponse_Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallResponse_Error {
    return new CallResponse_Error().fromJsonString(jsonString, options);
  }

  static equals(a: CallResponse_Error | PlainMessage<CallResponse_Error> | undefined, b: CallResponse_Error | PlainMessage<CallResponse_Error> | undefined): boolean {
    return proto3.util.equals(CallResponse_Error, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.AcquireLeaseRequest
 */
export class AcquireLeaseRequest extends Message<AcquireLeaseRequest> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: repeated string key = 2;
   */
  key: string[] = [];

  /**
   * @generated from field: google.protobuf.Duration ttl = 3;
   */
  ttl?: Duration;

  constructor(data?: PartialMessage<AcquireLeaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.AcquireLeaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "ttl", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcquireLeaseRequest {
    return new AcquireLeaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcquireLeaseRequest {
    return new AcquireLeaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcquireLeaseRequest {
    return new AcquireLeaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcquireLeaseRequest | PlainMessage<AcquireLeaseRequest> | undefined, b: AcquireLeaseRequest | PlainMessage<AcquireLeaseRequest> | undefined): boolean {
    return proto3.util.equals(AcquireLeaseRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.AcquireLeaseResponse
 */
export class AcquireLeaseResponse extends Message<AcquireLeaseResponse> {
  constructor(data?: PartialMessage<AcquireLeaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.AcquireLeaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcquireLeaseResponse {
    return new AcquireLeaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcquireLeaseResponse {
    return new AcquireLeaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcquireLeaseResponse {
    return new AcquireLeaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AcquireLeaseResponse | PlainMessage<AcquireLeaseResponse> | undefined, b: AcquireLeaseResponse | PlainMessage<AcquireLeaseResponse> | undefined): boolean {
    return proto3.util.equals(AcquireLeaseResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SendFSMEventRequest
 */
export class SendFSMEventRequest extends Message<SendFSMEventRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Ref fsm = 1;
   */
  fsm?: Ref;

  /**
   * @generated from field: string instance = 2;
   */
  instance = "";

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Type event = 3;
   */
  event?: Type;

  /**
   * @generated from field: bytes body = 4;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<SendFSMEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SendFSMEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fsm", kind: "message", T: Ref },
    { no: 2, name: "instance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "event", kind: "message", T: Type },
    { no: 4, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendFSMEventRequest {
    return new SendFSMEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendFSMEventRequest {
    return new SendFSMEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendFSMEventRequest {
    return new SendFSMEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendFSMEventRequest | PlainMessage<SendFSMEventRequest> | undefined, b: SendFSMEventRequest | PlainMessage<SendFSMEventRequest> | undefined): boolean {
    return proto3.util.equals(SendFSMEventRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SendFSMEventResponse
 */
export class SendFSMEventResponse extends Message<SendFSMEventResponse> {
  constructor(data?: PartialMessage<SendFSMEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SendFSMEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendFSMEventResponse {
    return new SendFSMEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendFSMEventResponse {
    return new SendFSMEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendFSMEventResponse {
    return new SendFSMEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendFSMEventResponse | PlainMessage<SendFSMEventResponse> | undefined, b: SendFSMEventResponse | PlainMessage<SendFSMEventResponse> | undefined): boolean {
    return proto3.util.equals(SendFSMEventResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PublishEventRequest
 */
export class PublishEventRequest extends Message<PublishEventRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Ref topic = 1;
   */
  topic?: Ref;

  /**
   * @generated from field: bytes body = 2;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<PublishEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PublishEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "message", T: Ref },
    { no: 2, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishEventRequest {
    return new PublishEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishEventRequest {
    return new PublishEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishEventRequest {
    return new PublishEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishEventRequest | PlainMessage<PublishEventRequest> | undefined, b: PublishEventRequest | PlainMessage<PublishEventRequest> | undefined): boolean {
    return proto3.util.equals(PublishEventRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PublishEventResponse
 */
export class PublishEventResponse extends Message<PublishEventResponse> {
  constructor(data?: PartialMessage<PublishEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PublishEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishEventResponse {
    return new PublishEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishEventResponse {
    return new PublishEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishEventResponse {
    return new PublishEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishEventResponse | PlainMessage<PublishEventResponse> | undefined, b: PublishEventResponse | PlainMessage<PublishEventResponse> | undefined): boolean {
    return proto3.util.equals(PublishEventResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetSchemaRequest
 */
export class GetSchemaRequest extends Message<GetSchemaRequest> {
  constructor(data?: PartialMessage<GetSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined, b: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetSchemaRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetSchemaResponse
 */
export class GetSchemaResponse extends Message<GetSchemaResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Schema schema = 1;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<GetSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined, b: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetSchemaResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaRequest
 */
export class PullSchemaRequest extends Message<PullSchemaRequest> {
  constructor(data?: PartialMessage<PullSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaRequest | PlainMessage<PullSchemaRequest> | undefined, b: PullSchemaRequest | PlainMessage<PullSchemaRequest> | undefined): boolean {
    return proto3.util.equals(PullSchemaRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse
 */
export class PullSchemaResponse extends Message<PullSchemaResponse> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: string module_name = 2;
   */
  moduleName = "";

  /**
   * For deletes this will not be present.
   *
   * @generated from field: optional xyz.block.ftl.v1.schema.Module schema = 4;
   */
  schema?: Module;

  /**
   * If true there are more schema changes immediately following this one as part of the initial batch.
   * If false this is the last schema change in the initial batch, but others may follow later.
   *
   * @generated from field: bool more = 3;
   */
  more = false;

  /**
   * @generated from field: xyz.block.ftl.v1.DeploymentChangeType change_type = 5;
   */
  changeType = DeploymentChangeType.DEPLOYMENT_ADDED;

  constructor(data?: PartialMessage<PullSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schema", kind: "message", T: Module, opt: true },
    { no: 3, name: "more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "change_type", kind: "enum", T: proto3.getEnumType(DeploymentChangeType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse | PlainMessage<PullSchemaResponse> | undefined, b: PullSchemaResponse | PlainMessage<PullSchemaResponse> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetArtefactDiffsRequest
 */
export class GetArtefactDiffsRequest extends Message<GetArtefactDiffsRequest> {
  /**
   * @generated from field: repeated string client_digests = 1;
   */
  clientDigests: string[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetArtefactDiffsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined, b: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetArtefactDiffsResponse
 */
export class GetArtefactDiffsResponse extends Message<GetArtefactDiffsResponse> {
  /**
   * @generated from field: repeated string missing_digests = 1;
   */
  missingDigests: string[] = [];

  /**
   * Artefacts that the client already has, and their path+executable status.
   *
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact client_artefacts = 2;
   */
  clientArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetArtefactDiffsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "missing_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "client_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined, b: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UploadArtefactRequest
 */
export class UploadArtefactRequest extends Message<UploadArtefactRequest> {
  /**
   * @generated from field: bytes content = 1;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UploadArtefactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined, b: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined): boolean {
    return proto3.util.equals(UploadArtefactRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UploadArtefactResponse
 */
export class UploadArtefactResponse extends Message<UploadArtefactResponse> {
  /**
   * @generated from field: bytes digest = 2;
   */
  digest = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UploadArtefactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined, b: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined): boolean {
    return proto3.util.equals(UploadArtefactResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DeploymentArtefact
 */
export class DeploymentArtefact extends Message<DeploymentArtefact> {
  /**
   * @generated from field: string digest = 1;
   */
  digest = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: bool executable = 3;
   */
  executable = false;

  constructor(data?: PartialMessage<DeploymentArtefact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DeploymentArtefact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "executable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined, b: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined): boolean {
    return proto3.util.equals(DeploymentArtefact, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateDeploymentRequest
 */
export class CreateDeploymentRequest extends Message<CreateDeploymentRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 1;
   */
  schema?: Module;

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact artefacts = 2;
   */
  artefacts: DeploymentArtefact[] = [];

  /**
   * Runner labels required to run this deployment.
   *
   * @generated from field: optional google.protobuf.Struct labels = 3;
   */
  labels?: Struct;

  constructor(data?: PartialMessage<CreateDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module },
    { no: 2, name: "artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
    { no: 3, name: "labels", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined, b: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(CreateDeploymentRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateDeploymentResponse
 */
export class CreateDeploymentResponse extends Message<CreateDeploymentResponse> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * Currently active deployment for this module, if any.
   *
   * @generated from field: optional string active_deployment_key = 2;
   */
  activeDeploymentKey?: string;

  constructor(data?: PartialMessage<CreateDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active_deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined, b: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(CreateDeploymentResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentArtefactsRequest
 */
export class GetDeploymentArtefactsRequest extends Message<GetDeploymentArtefactsRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact have_artefacts = 2;
   */
  haveArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetDeploymentArtefactsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentArtefactsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "have_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentArtefactsRequest | PlainMessage<GetDeploymentArtefactsRequest> | undefined, b: GetDeploymentArtefactsRequest | PlainMessage<GetDeploymentArtefactsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentArtefactsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentArtefactsResponse
 */
export class GetDeploymentArtefactsResponse extends Message<GetDeploymentArtefactsResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.DeploymentArtefact artefact = 1;
   */
  artefact?: DeploymentArtefact;

  /**
   * @generated from field: bytes chunk = 2;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<GetDeploymentArtefactsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentArtefactsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artefact", kind: "message", T: DeploymentArtefact },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentArtefactsResponse | PlainMessage<GetDeploymentArtefactsResponse> | undefined, b: GetDeploymentArtefactsResponse | PlainMessage<GetDeploymentArtefactsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentArtefactsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentRequest
 */
export class GetDeploymentRequest extends Message<GetDeploymentRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<GetDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined, b: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentResponse
 */
export class GetDeploymentResponse extends Message<GetDeploymentResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 1;
   */
  schema?: Module;

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact artefacts = 2;
   */
  artefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module },
    { no: 2, name: "artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined, b: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.RegisterRunnerRequest
 */
export class RegisterRunnerRequest extends Message<RegisterRunnerRequest> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: optional string deployment = 3;
   */
  deployment?: string;

  /**
   * @generated from field: xyz.block.ftl.v1.RunnerState state = 4;
   */
  state = RunnerState.RUNNER_IDLE;

  /**
   * @generated from field: google.protobuf.Struct labels = 5;
   */
  labels?: Struct;

  /**
   * If present, the reason the Runner is transitioning from ASSIGNED to IDLE.
   *
   * @generated from field: optional string error = 7;
   */
  error?: string;

  constructor(data?: PartialMessage<RegisterRunnerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.RegisterRunnerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(RunnerState) },
    { no: 5, name: "labels", kind: "message", T: Struct },
    { no: 7, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRunnerRequest {
    return new RegisterRunnerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRunnerRequest | PlainMessage<RegisterRunnerRequest> | undefined, b: RegisterRunnerRequest | PlainMessage<RegisterRunnerRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRunnerRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.RegisterRunnerResponse
 */
export class RegisterRunnerResponse extends Message<RegisterRunnerResponse> {
  constructor(data?: PartialMessage<RegisterRunnerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.RegisterRunnerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRunnerResponse | PlainMessage<RegisterRunnerResponse> | undefined, b: RegisterRunnerResponse | PlainMessage<RegisterRunnerResponse> | undefined): boolean {
    return proto3.util.equals(RegisterRunnerResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeployRequest
 */
export class UpdateDeployRequest extends Message<UpdateDeployRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  constructor(data?: PartialMessage<UpdateDeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeployRequest | PlainMessage<UpdateDeployRequest> | undefined, b: UpdateDeployRequest | PlainMessage<UpdateDeployRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDeployRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeployResponse
 */
export class UpdateDeployResponse extends Message<UpdateDeployResponse> {
  constructor(data?: PartialMessage<UpdateDeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeployResponse | PlainMessage<UpdateDeployResponse> | undefined, b: UpdateDeployResponse | PlainMessage<UpdateDeployResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDeployResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReplaceDeployRequest
 */
export class ReplaceDeployRequest extends Message<ReplaceDeployRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  constructor(data?: PartialMessage<ReplaceDeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReplaceDeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceDeployRequest | PlainMessage<ReplaceDeployRequest> | undefined, b: ReplaceDeployRequest | PlainMessage<ReplaceDeployRequest> | undefined): boolean {
    return proto3.util.equals(ReplaceDeployRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReplaceDeployResponse
 */
export class ReplaceDeployResponse extends Message<ReplaceDeployResponse> {
  constructor(data?: PartialMessage<ReplaceDeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReplaceDeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceDeployResponse | PlainMessage<ReplaceDeployResponse> | undefined, b: ReplaceDeployResponse | PlainMessage<ReplaceDeployResponse> | undefined): boolean {
    return proto3.util.equals(ReplaceDeployResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StreamDeploymentLogsRequest
 */
export class StreamDeploymentLogsRequest extends Message<StreamDeploymentLogsRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: optional string request_key = 2;
   */
  requestKey?: string;

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: int32 log_level = 4;
   */
  logLevel = 0;

  /**
   * @generated from field: map<string, string> attributes = 5;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * @generated from field: optional string error = 7;
   */
  error?: string;

  constructor(data?: PartialMessage<StreamDeploymentLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StreamDeploymentLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "log_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamDeploymentLogsRequest | PlainMessage<StreamDeploymentLogsRequest> | undefined, b: StreamDeploymentLogsRequest | PlainMessage<StreamDeploymentLogsRequest> | undefined): boolean {
    return proto3.util.equals(StreamDeploymentLogsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StreamDeploymentLogsResponse
 */
export class StreamDeploymentLogsResponse extends Message<StreamDeploymentLogsResponse> {
  constructor(data?: PartialMessage<StreamDeploymentLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StreamDeploymentLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamDeploymentLogsResponse | PlainMessage<StreamDeploymentLogsResponse> | undefined, b: StreamDeploymentLogsResponse | PlainMessage<StreamDeploymentLogsResponse> | undefined): boolean {
    return proto3.util.equals(StreamDeploymentLogsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusRequest
 */
export class StatusRequest extends Message<StatusRequest> {
  constructor(data?: PartialMessage<StatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusRequest {
    return new StatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatusRequest | PlainMessage<StatusRequest> | undefined, b: StatusRequest | PlainMessage<StatusRequest> | undefined): boolean {
    return proto3.util.equals(StatusRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse
 */
export class StatusResponse extends Message<StatusResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Controller controllers = 1;
   */
  controllers: StatusResponse_Controller[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Runner runners = 2;
   */
  runners: StatusResponse_Runner[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Deployment deployments = 3;
   */
  deployments: StatusResponse_Deployment[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.IngressRoute ingress_routes = 4;
   */
  ingressRoutes: StatusResponse_IngressRoute[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Route routes = 5;
   */
  routes: StatusResponse_Route[] = [];

  constructor(data?: PartialMessage<StatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controllers", kind: "message", T: StatusResponse_Controller, repeated: true },
    { no: 2, name: "runners", kind: "message", T: StatusResponse_Runner, repeated: true },
    { no: 3, name: "deployments", kind: "message", T: StatusResponse_Deployment, repeated: true },
    { no: 4, name: "ingress_routes", kind: "message", T: StatusResponse_IngressRoute, repeated: true },
    { no: 5, name: "routes", kind: "message", T: StatusResponse_Route, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse {
    return new StatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse | PlainMessage<StatusResponse> | undefined, b: StatusResponse | PlainMessage<StatusResponse> | undefined): boolean {
    return proto3.util.equals(StatusResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Controller
 */
export class StatusResponse_Controller extends Message<StatusResponse_Controller> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  constructor(data?: PartialMessage<StatusResponse_Controller>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Controller";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Controller | PlainMessage<StatusResponse_Controller> | undefined, b: StatusResponse_Controller | PlainMessage<StatusResponse_Controller> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Controller, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Runner
 */
export class StatusResponse_Runner extends Message<StatusResponse_Runner> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: repeated string languages = 2;
   */
  languages: string[] = [];

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  /**
   * @generated from field: xyz.block.ftl.v1.RunnerState state = 4;
   */
  state = RunnerState.RUNNER_IDLE;

  /**
   * @generated from field: optional string deployment = 5;
   */
  deployment?: string;

  /**
   * @generated from field: google.protobuf.Struct labels = 6;
   */
  labels?: Struct;

  constructor(data?: PartialMessage<StatusResponse_Runner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Runner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "languages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(RunnerState) },
    { no: 5, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "labels", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Runner | PlainMessage<StatusResponse_Runner> | undefined, b: StatusResponse_Runner | PlainMessage<StatusResponse_Runner> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Runner, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Deployment
 */
export class StatusResponse_Deployment extends Message<StatusResponse_Deployment> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: int32 min_replicas = 4;
   */
  minReplicas = 0;

  /**
   * @generated from field: int32 replicas = 7;
   */
  replicas = 0;

  /**
   * @generated from field: google.protobuf.Struct labels = 5;
   */
  labels?: Struct;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 6;
   */
  schema?: Module;

  constructor(data?: PartialMessage<StatusResponse_Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "labels", kind: "message", T: Struct },
    { no: 6, name: "schema", kind: "message", T: Module },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Deployment | PlainMessage<StatusResponse_Deployment> | undefined, b: StatusResponse_Deployment | PlainMessage<StatusResponse_Deployment> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Deployment, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.IngressRoute
 */
export class StatusResponse_IngressRoute extends Message<StatusResponse_IngressRoute> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Ref verb = 2;
   */
  verb?: Ref;

  /**
   * @generated from field: string method = 3;
   */
  method = "";

  /**
   * @generated from field: string path = 4;
   */
  path = "";

  constructor(data?: PartialMessage<StatusResponse_IngressRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.IngressRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verb", kind: "message", T: Ref },
    { no: 3, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_IngressRoute | PlainMessage<StatusResponse_IngressRoute> | undefined, b: StatusResponse_IngressRoute | PlainMessage<StatusResponse_IngressRoute> | undefined): boolean {
    return proto3.util.equals(StatusResponse_IngressRoute, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Route
 */
export class StatusResponse_Route extends Message<StatusResponse_Route> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: string runner = 2;
   */
  runner = "";

  /**
   * @generated from field: string deployment = 3;
   */
  deployment = "";

  /**
   * @generated from field: string endpoint = 4;
   */
  endpoint = "";

  constructor(data?: PartialMessage<StatusResponse_Route>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Route";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "runner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Route {
    return new StatusResponse_Route().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Route {
    return new StatusResponse_Route().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Route {
    return new StatusResponse_Route().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Route | PlainMessage<StatusResponse_Route> | undefined, b: StatusResponse_Route | PlainMessage<StatusResponse_Route> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Route, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ProcessListRequest
 */
export class ProcessListRequest extends Message<ProcessListRequest> {
  constructor(data?: PartialMessage<ProcessListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ProcessListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessListRequest {
    return new ProcessListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessListRequest {
    return new ProcessListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessListRequest {
    return new ProcessListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessListRequest | PlainMessage<ProcessListRequest> | undefined, b: ProcessListRequest | PlainMessage<ProcessListRequest> | undefined): boolean {
    return proto3.util.equals(ProcessListRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ProcessListResponse
 */
export class ProcessListResponse extends Message<ProcessListResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.ProcessListResponse.Process processes = 1;
   */
  processes: ProcessListResponse_Process[] = [];

  constructor(data?: PartialMessage<ProcessListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ProcessListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "processes", kind: "message", T: ProcessListResponse_Process, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessListResponse {
    return new ProcessListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessListResponse {
    return new ProcessListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessListResponse {
    return new ProcessListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessListResponse | PlainMessage<ProcessListResponse> | undefined, b: ProcessListResponse | PlainMessage<ProcessListResponse> | undefined): boolean {
    return proto3.util.equals(ProcessListResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ProcessListResponse.ProcessRunner
 */
export class ProcessListResponse_ProcessRunner extends Message<ProcessListResponse_ProcessRunner> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: google.protobuf.Struct labels = 3;
   */
  labels?: Struct;

  constructor(data?: PartialMessage<ProcessListResponse_ProcessRunner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ProcessListResponse.ProcessRunner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessListResponse_ProcessRunner {
    return new ProcessListResponse_ProcessRunner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessListResponse_ProcessRunner {
    return new ProcessListResponse_ProcessRunner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessListResponse_ProcessRunner {
    return new ProcessListResponse_ProcessRunner().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessListResponse_ProcessRunner | PlainMessage<ProcessListResponse_ProcessRunner> | undefined, b: ProcessListResponse_ProcessRunner | PlainMessage<ProcessListResponse_ProcessRunner> | undefined): boolean {
    return proto3.util.equals(ProcessListResponse_ProcessRunner, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ProcessListResponse.Process
 */
export class ProcessListResponse_Process extends Message<ProcessListResponse_Process> {
  /**
   * @generated from field: string deployment = 1;
   */
  deployment = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  /**
   * @generated from field: google.protobuf.Struct labels = 3;
   */
  labels?: Struct;

  /**
   * @generated from field: optional xyz.block.ftl.v1.ProcessListResponse.ProcessRunner runner = 4;
   */
  runner?: ProcessListResponse_ProcessRunner;

  constructor(data?: PartialMessage<ProcessListResponse_Process>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ProcessListResponse.Process";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "labels", kind: "message", T: Struct },
    { no: 4, name: "runner", kind: "message", T: ProcessListResponse_ProcessRunner, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessListResponse_Process {
    return new ProcessListResponse_Process().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessListResponse_Process {
    return new ProcessListResponse_Process().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessListResponse_Process {
    return new ProcessListResponse_Process().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessListResponse_Process | PlainMessage<ProcessListResponse_Process> | undefined, b: ProcessListResponse_Process | PlainMessage<ProcessListResponse_Process> | undefined): boolean {
    return proto3.util.equals(ProcessListResponse_Process, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DeployRequest
 */
export class DeployRequest extends Message<DeployRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<DeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployRequest {
    return new DeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployRequest | PlainMessage<DeployRequest> | undefined, b: DeployRequest | PlainMessage<DeployRequest> | undefined): boolean {
    return proto3.util.equals(DeployRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DeployResponse
 */
export class DeployResponse extends Message<DeployResponse> {
  constructor(data?: PartialMessage<DeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployResponse {
    return new DeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployResponse | PlainMessage<DeployResponse> | undefined, b: DeployResponse | PlainMessage<DeployResponse> | undefined): boolean {
    return proto3.util.equals(DeployResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.TerminateRequest
 */
export class TerminateRequest extends Message<TerminateRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<TerminateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.TerminateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminateRequest {
    return new TerminateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminateRequest {
    return new TerminateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminateRequest {
    return new TerminateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TerminateRequest | PlainMessage<TerminateRequest> | undefined, b: TerminateRequest | PlainMessage<TerminateRequest> | undefined): boolean {
    return proto3.util.equals(TerminateRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReserveRequest
 */
export class ReserveRequest extends Message<ReserveRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<ReserveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReserveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReserveRequest {
    return new ReserveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReserveRequest {
    return new ReserveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReserveRequest {
    return new ReserveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReserveRequest | PlainMessage<ReserveRequest> | undefined, b: ReserveRequest | PlainMessage<ReserveRequest> | undefined): boolean {
    return proto3.util.equals(ReserveRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReserveResponse
 */
export class ReserveResponse extends Message<ReserveResponse> {
  constructor(data?: PartialMessage<ReserveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReserveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReserveResponse {
    return new ReserveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReserveResponse {
    return new ReserveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReserveResponse {
    return new ReserveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReserveResponse | PlainMessage<ReserveResponse> | undefined, b: ReserveResponse | PlainMessage<ReserveResponse> | undefined): boolean {
    return proto3.util.equals(ReserveResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ConfigRef
 */
export class ConfigRef extends Message<ConfigRef> {
  /**
   * @generated from field: optional string module = 1;
   */
  module?: string;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ConfigRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ConfigRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigRef {
    return new ConfigRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigRef {
    return new ConfigRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigRef {
    return new ConfigRef().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigRef | PlainMessage<ConfigRef> | undefined, b: ConfigRef | PlainMessage<ConfigRef> | undefined): boolean {
    return proto3.util.equals(ConfigRef, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ListConfigRequest
 */
export class ListConfigRequest extends Message<ListConfigRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.ConfigProvider provider = 1;
   */
  provider?: ConfigProvider;

  /**
   * @generated from field: optional string module = 2;
   */
  module?: string;

  /**
   * @generated from field: optional bool include_values = 3;
   */
  includeValues?: boolean;

  constructor(data?: PartialMessage<ListConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ListConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
    { no: 2, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "include_values", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConfigRequest {
    return new ListConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConfigRequest {
    return new ListConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConfigRequest {
    return new ListConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConfigRequest | PlainMessage<ListConfigRequest> | undefined, b: ListConfigRequest | PlainMessage<ListConfigRequest> | undefined): boolean {
    return proto3.util.equals(ListConfigRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ListConfigResponse
 */
export class ListConfigResponse extends Message<ListConfigResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.ListConfigResponse.Config configs = 1;
   */
  configs: ListConfigResponse_Config[] = [];

  constructor(data?: PartialMessage<ListConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ListConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configs", kind: "message", T: ListConfigResponse_Config, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConfigResponse {
    return new ListConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConfigResponse {
    return new ListConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConfigResponse {
    return new ListConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListConfigResponse | PlainMessage<ListConfigResponse> | undefined, b: ListConfigResponse | PlainMessage<ListConfigResponse> | undefined): boolean {
    return proto3.util.equals(ListConfigResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ListConfigResponse.Config
 */
export class ListConfigResponse_Config extends Message<ListConfigResponse_Config> {
  /**
   * @generated from field: string refPath = 1;
   */
  refPath = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  constructor(data?: PartialMessage<ListConfigResponse_Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ListConfigResponse.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "refPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConfigResponse_Config {
    return new ListConfigResponse_Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConfigResponse_Config {
    return new ListConfigResponse_Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConfigResponse_Config {
    return new ListConfigResponse_Config().fromJsonString(jsonString, options);
  }

  static equals(a: ListConfigResponse_Config | PlainMessage<ListConfigResponse_Config> | undefined, b: ListConfigResponse_Config | PlainMessage<ListConfigResponse_Config> | undefined): boolean {
    return proto3.util.equals(ListConfigResponse_Config, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetConfigRequest
 */
export class GetConfigRequest extends Message<GetConfigRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.ConfigProvider provider = 1;
   */
  provider?: ConfigProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<GetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined, b: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetConfigRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetConfigResponse
 */
export class GetConfigResponse extends Message<GetConfigResponse> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<GetConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigResponse | PlainMessage<GetConfigResponse> | undefined, b: GetConfigResponse | PlainMessage<GetConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetConfigResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SetConfigRequest
 */
export class SetConfigRequest extends Message<SetConfigRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.ConfigProvider provider = 1;
   */
  provider?: ConfigProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<SetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetConfigRequest {
    return new SetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetConfigRequest {
    return new SetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetConfigRequest {
    return new SetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetConfigRequest | PlainMessage<SetConfigRequest> | undefined, b: SetConfigRequest | PlainMessage<SetConfigRequest> | undefined): boolean {
    return proto3.util.equals(SetConfigRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SetConfigResponse
 */
export class SetConfigResponse extends Message<SetConfigResponse> {
  constructor(data?: PartialMessage<SetConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SetConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetConfigResponse {
    return new SetConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetConfigResponse {
    return new SetConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetConfigResponse {
    return new SetConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetConfigResponse | PlainMessage<SetConfigResponse> | undefined, b: SetConfigResponse | PlainMessage<SetConfigResponse> | undefined): boolean {
    return proto3.util.equals(SetConfigResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UnsetConfigRequest
 */
export class UnsetConfigRequest extends Message<UnsetConfigRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.ConfigProvider provider = 1;
   */
  provider?: ConfigProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<UnsetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UnsetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsetConfigRequest {
    return new UnsetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsetConfigRequest {
    return new UnsetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsetConfigRequest {
    return new UnsetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnsetConfigRequest | PlainMessage<UnsetConfigRequest> | undefined, b: UnsetConfigRequest | PlainMessage<UnsetConfigRequest> | undefined): boolean {
    return proto3.util.equals(UnsetConfigRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UnsetConfigResponse
 */
export class UnsetConfigResponse extends Message<UnsetConfigResponse> {
  constructor(data?: PartialMessage<UnsetConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UnsetConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsetConfigResponse {
    return new UnsetConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsetConfigResponse {
    return new UnsetConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsetConfigResponse {
    return new UnsetConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnsetConfigResponse | PlainMessage<UnsetConfigResponse> | undefined, b: UnsetConfigResponse | PlainMessage<UnsetConfigResponse> | undefined): boolean {
    return proto3.util.equals(UnsetConfigResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ListSecretsRequest
 */
export class ListSecretsRequest extends Message<ListSecretsRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.SecretProvider provider = 1;
   */
  provider?: SecretProvider;

  /**
   * @generated from field: optional string module = 2;
   */
  module?: string;

  /**
   * @generated from field: optional bool include_values = 3;
   */
  includeValues?: boolean;

  constructor(data?: PartialMessage<ListSecretsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ListSecretsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
    { no: 2, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "include_values", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsRequest | PlainMessage<ListSecretsRequest> | undefined, b: ListSecretsRequest | PlainMessage<ListSecretsRequest> | undefined): boolean {
    return proto3.util.equals(ListSecretsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ListSecretsResponse
 */
export class ListSecretsResponse extends Message<ListSecretsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.ListSecretsResponse.Secret secrets = 1;
   */
  secrets: ListSecretsResponse_Secret[] = [];

  constructor(data?: PartialMessage<ListSecretsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ListSecretsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secrets", kind: "message", T: ListSecretsResponse_Secret, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsResponse | PlainMessage<ListSecretsResponse> | undefined, b: ListSecretsResponse | PlainMessage<ListSecretsResponse> | undefined): boolean {
    return proto3.util.equals(ListSecretsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ListSecretsResponse.Secret
 */
export class ListSecretsResponse_Secret extends Message<ListSecretsResponse_Secret> {
  /**
   * @generated from field: string refPath = 1;
   */
  refPath = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  constructor(data?: PartialMessage<ListSecretsResponse_Secret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ListSecretsResponse.Secret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "refPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsResponse_Secret {
    return new ListSecretsResponse_Secret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsResponse_Secret {
    return new ListSecretsResponse_Secret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsResponse_Secret {
    return new ListSecretsResponse_Secret().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsResponse_Secret | PlainMessage<ListSecretsResponse_Secret> | undefined, b: ListSecretsResponse_Secret | PlainMessage<ListSecretsResponse_Secret> | undefined): boolean {
    return proto3.util.equals(ListSecretsResponse_Secret, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetSecretRequest
 */
export class GetSecretRequest extends Message<GetSecretRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.SecretProvider provider = 1;
   */
  provider?: SecretProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<GetSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSecretRequest {
    return new GetSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSecretRequest | PlainMessage<GetSecretRequest> | undefined, b: GetSecretRequest | PlainMessage<GetSecretRequest> | undefined): boolean {
    return proto3.util.equals(GetSecretRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetSecretResponse
 */
export class GetSecretResponse extends Message<GetSecretResponse> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<GetSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSecretResponse {
    return new GetSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSecretResponse | PlainMessage<GetSecretResponse> | undefined, b: GetSecretResponse | PlainMessage<GetSecretResponse> | undefined): boolean {
    return proto3.util.equals(GetSecretResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SetSecretRequest
 */
export class SetSecretRequest extends Message<SetSecretRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.SecretProvider provider = 1;
   */
  provider?: SecretProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<SetSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SetSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSecretRequest {
    return new SetSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSecretRequest {
    return new SetSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSecretRequest {
    return new SetSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSecretRequest | PlainMessage<SetSecretRequest> | undefined, b: SetSecretRequest | PlainMessage<SetSecretRequest> | undefined): boolean {
    return proto3.util.equals(SetSecretRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.SetSecretResponse
 */
export class SetSecretResponse extends Message<SetSecretResponse> {
  constructor(data?: PartialMessage<SetSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.SetSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSecretResponse {
    return new SetSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSecretResponse {
    return new SetSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSecretResponse {
    return new SetSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSecretResponse | PlainMessage<SetSecretResponse> | undefined, b: SetSecretResponse | PlainMessage<SetSecretResponse> | undefined): boolean {
    return proto3.util.equals(SetSecretResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UnsetSecretRequest
 */
export class UnsetSecretRequest extends Message<UnsetSecretRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.v1.SecretProvider provider = 1;
   */
  provider?: SecretProvider;

  /**
   * @generated from field: xyz.block.ftl.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<UnsetSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UnsetSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsetSecretRequest {
    return new UnsetSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsetSecretRequest {
    return new UnsetSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsetSecretRequest {
    return new UnsetSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnsetSecretRequest | PlainMessage<UnsetSecretRequest> | undefined, b: UnsetSecretRequest | PlainMessage<UnsetSecretRequest> | undefined): boolean {
    return proto3.util.equals(UnsetSecretRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UnsetSecretResponse
 */
export class UnsetSecretResponse extends Message<UnsetSecretResponse> {
  constructor(data?: PartialMessage<UnsetSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UnsetSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsetSecretResponse {
    return new UnsetSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsetSecretResponse {
    return new UnsetSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsetSecretResponse {
    return new UnsetSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnsetSecretResponse | PlainMessage<UnsetSecretResponse> | undefined, b: UnsetSecretResponse | PlainMessage<UnsetSecretResponse> | undefined): boolean {
    return proto3.util.equals(UnsetSecretResponse, a, b);
  }
}

