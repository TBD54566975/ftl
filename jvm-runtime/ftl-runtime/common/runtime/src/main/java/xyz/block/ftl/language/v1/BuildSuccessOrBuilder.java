// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xyz/block/ftl/language/v1/language.proto
// Protobuf Java Version: 4.29.0

package xyz.block.ftl.language.v1;

public interface BuildSuccessOrBuilder extends
    // @@protoc_insertion_point(interface_extends:xyz.block.ftl.language.v1.BuildSuccess)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The id of build context used while building.
   * </pre>
   *
   * <code>string context_id = 1 [json_name = "contextId"];</code>
   * @return The contextId.
   */
  java.lang.String getContextId();
  /**
   * <pre>
   * The id of build context used while building.
   * </pre>
   *
   * <code>string context_id = 1 [json_name = "contextId"];</code>
   * @return The bytes for contextId.
   */
  com.google.protobuf.ByteString
      getContextIdBytes();

  /**
   * <pre>
   * Indicates whether the build was automatically started by the plugin, rather than due to a Build rpc call.
   * </pre>
   *
   * <code>bool is_automatic_rebuild = 2 [json_name = "isAutomaticRebuild"];</code>
   * @return The isAutomaticRebuild.
   */
  boolean getIsAutomaticRebuild();

  /**
   * <pre>
   * Module schema for the built module
   * </pre>
   *
   * <code>.xyz.block.ftl.schema.v1.Module module = 3 [json_name = "module"];</code>
   * @return Whether the module field is set.
   */
  boolean hasModule();
  /**
   * <pre>
   * Module schema for the built module
   * </pre>
   *
   * <code>.xyz.block.ftl.schema.v1.Module module = 3 [json_name = "module"];</code>
   * @return The module.
   */
  xyz.block.ftl.schema.v1.Module getModule();
  /**
   * <pre>
   * Module schema for the built module
   * </pre>
   *
   * <code>.xyz.block.ftl.schema.v1.Module module = 3 [json_name = "module"];</code>
   */
  xyz.block.ftl.schema.v1.ModuleOrBuilder getModuleOrBuilder();

  /**
   * <pre>
   * Paths for files/directories to be deployed
   * </pre>
   *
   * <code>repeated string deploy = 4 [json_name = "deploy"];</code>
   * @return A list containing the deploy.
   */
  java.util.List<java.lang.String>
      getDeployList();
  /**
   * <pre>
   * Paths for files/directories to be deployed
   * </pre>
   *
   * <code>repeated string deploy = 4 [json_name = "deploy"];</code>
   * @return The count of deploy.
   */
  int getDeployCount();
  /**
   * <pre>
   * Paths for files/directories to be deployed
   * </pre>
   *
   * <code>repeated string deploy = 4 [json_name = "deploy"];</code>
   * @param index The index of the element to return.
   * @return The deploy at the given index.
   */
  java.lang.String getDeploy(int index);
  /**
   * <pre>
   * Paths for files/directories to be deployed
   * </pre>
   *
   * <code>repeated string deploy = 4 [json_name = "deploy"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the deploy at the given index.
   */
  com.google.protobuf.ByteString
      getDeployBytes(int index);

  /**
   * <pre>
   * Name of the docker image to use for the runner
   * </pre>
   *
   * <code>string docker_image = 5 [json_name = "dockerImage"];</code>
   * @return The dockerImage.
   */
  java.lang.String getDockerImage();
  /**
   * <pre>
   * Name of the docker image to use for the runner
   * </pre>
   *
   * <code>string docker_image = 5 [json_name = "dockerImage"];</code>
   * @return The bytes for dockerImage.
   */
  com.google.protobuf.ByteString
      getDockerImageBytes();

  /**
   * <pre>
   * Errors contains any errors that occurred during the build
   * No errors can have a level of ERROR, instead a BuildFailure should be sent
   * Instead this is useful for INFO and WARN level errors.
   * </pre>
   *
   * <code>.xyz.block.ftl.language.v1.ErrorList errors = 6 [json_name = "errors"];</code>
   * @return Whether the errors field is set.
   */
  boolean hasErrors();
  /**
   * <pre>
   * Errors contains any errors that occurred during the build
   * No errors can have a level of ERROR, instead a BuildFailure should be sent
   * Instead this is useful for INFO and WARN level errors.
   * </pre>
   *
   * <code>.xyz.block.ftl.language.v1.ErrorList errors = 6 [json_name = "errors"];</code>
   * @return The errors.
   */
  xyz.block.ftl.language.v1.ErrorList getErrors();
  /**
   * <pre>
   * Errors contains any errors that occurred during the build
   * No errors can have a level of ERROR, instead a BuildFailure should be sent
   * Instead this is useful for INFO and WARN level errors.
   * </pre>
   *
   * <code>.xyz.block.ftl.language.v1.ErrorList errors = 6 [json_name = "errors"];</code>
   */
  xyz.block.ftl.language.v1.ErrorListOrBuilder getErrorsOrBuilder();

  /**
   * <pre>
   * Dev mode endpoint URI. If this is set then rather than trying to deploy the module, FTL will start a runner that
   * connects to this endpoint.
   * </pre>
   *
   * <code>optional string dev_endpoint = 7 [json_name = "devEndpoint"];</code>
   * @return Whether the devEndpoint field is set.
   */
  boolean hasDevEndpoint();
  /**
   * <pre>
   * Dev mode endpoint URI. If this is set then rather than trying to deploy the module, FTL will start a runner that
   * connects to this endpoint.
   * </pre>
   *
   * <code>optional string dev_endpoint = 7 [json_name = "devEndpoint"];</code>
   * @return The devEndpoint.
   */
  java.lang.String getDevEndpoint();
  /**
   * <pre>
   * Dev mode endpoint URI. If this is set then rather than trying to deploy the module, FTL will start a runner that
   * connects to this endpoint.
   * </pre>
   *
   * <code>optional string dev_endpoint = 7 [json_name = "devEndpoint"];</code>
   * @return The bytes for devEndpoint.
   */
  com.google.protobuf.ByteString
      getDevEndpointBytes();

  /**
   * <pre>
   * Dev mode debug port
   * </pre>
   *
   * <code>optional int32 debug_port = 8 [json_name = "debugPort"];</code>
   * @return Whether the debugPort field is set.
   */
  boolean hasDebugPort();
  /**
   * <pre>
   * Dev mode debug port
   * </pre>
   *
   * <code>optional int32 debug_port = 8 [json_name = "debugPort"];</code>
   * @return The debugPort.
   */
  int getDebugPort();
}
