// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xyz/block/ftl/v1/admin.proto
// Protobuf Java Version: 4.29.0

package xyz.block.ftl.v1;

/**
 * Protobuf enum {@code xyz.block.ftl.v1.ConfigProvider}
 */
public enum ConfigProvider
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>CONFIG_PROVIDER_UNSPECIFIED = 0;</code>
   */
  CONFIG_PROVIDER_UNSPECIFIED(0),
  /**
   * <pre>
   * Write values inline in the configuration file.
   * </pre>
   *
   * <code>CONFIG_PROVIDER_INLINE = 1;</code>
   */
  CONFIG_PROVIDER_INLINE(1),
  /**
   * <pre>
   * Print configuration as environment variables.
   * </pre>
   *
   * <code>CONFIG_PROVIDER_ENVAR = 2;</code>
   */
  CONFIG_PROVIDER_ENVAR(2),
  /**
   * <pre>
   * Use the database as a configuration store.
   * </pre>
   *
   * <code>CONFIG_PROVIDER_DB = 3;</code>
   */
  CONFIG_PROVIDER_DB(3),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 0,
      /* suffix= */ "",
      ConfigProvider.class.getName());
  }
  /**
   * <code>CONFIG_PROVIDER_UNSPECIFIED = 0;</code>
   */
  public static final int CONFIG_PROVIDER_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Write values inline in the configuration file.
   * </pre>
   *
   * <code>CONFIG_PROVIDER_INLINE = 1;</code>
   */
  public static final int CONFIG_PROVIDER_INLINE_VALUE = 1;
  /**
   * <pre>
   * Print configuration as environment variables.
   * </pre>
   *
   * <code>CONFIG_PROVIDER_ENVAR = 2;</code>
   */
  public static final int CONFIG_PROVIDER_ENVAR_VALUE = 2;
  /**
   * <pre>
   * Use the database as a configuration store.
   * </pre>
   *
   * <code>CONFIG_PROVIDER_DB = 3;</code>
   */
  public static final int CONFIG_PROVIDER_DB_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ConfigProvider valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ConfigProvider forNumber(int value) {
    switch (value) {
      case 0: return CONFIG_PROVIDER_UNSPECIFIED;
      case 1: return CONFIG_PROVIDER_INLINE;
      case 2: return CONFIG_PROVIDER_ENVAR;
      case 3: return CONFIG_PROVIDER_DB;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ConfigProvider>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ConfigProvider> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ConfigProvider>() {
          public ConfigProvider findValueByNumber(int number) {
            return ConfigProvider.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return xyz.block.ftl.v1.Admin.getDescriptor().getEnumTypes().get(0);
  }

  private static final ConfigProvider[] VALUES = values();

  public static ConfigProvider valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ConfigProvider(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:xyz.block.ftl.v1.ConfigProvider)
}

