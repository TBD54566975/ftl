// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.PullSchemaResponse in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString
import xyz.block.ftl.v1.schema.Module

public class PullSchemaResponse(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "deploymentKey",
    schemaIndex = 0,
  )
  public val deployment_key: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "moduleName",
    schemaIndex = 1,
  )
  public val module_name: String = "",
  /**
   * For deletes this will not be present.
   */
  @field:WireField(
    tag = 4,
    adapter = "xyz.block.ftl.v1.schema.Module#ADAPTER",
    schemaIndex = 2,
  )
  public val schema: Module? = null,
  /**
   * If true there are more schema changes immediately following this one as part of the initial
   * batch.
   * If false this is the last schema change in the initial batch, but others may follow later.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val more: Boolean = false,
  @field:WireField(
    tag = 5,
    adapter = "xyz.block.ftl.v1.DeploymentChangeType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "changeType",
    schemaIndex = 4,
  )
  public val change_type: DeploymentChangeType = DeploymentChangeType.DEPLOYMENT_ADDED,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<PullSchemaResponse, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PullSchemaResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (deployment_key != other.deployment_key) return false
    if (module_name != other.module_name) return false
    if (schema != other.schema) return false
    if (more != other.more) return false
    if (change_type != other.change_type) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + deployment_key.hashCode()
      result = result * 37 + module_name.hashCode()
      result = result * 37 + (schema?.hashCode() ?: 0)
      result = result * 37 + more.hashCode()
      result = result * 37 + change_type.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """deployment_key=${sanitize(deployment_key)}"""
    result += """module_name=${sanitize(module_name)}"""
    if (schema != null) result += """schema=$schema"""
    result += """more=$more"""
    result += """change_type=$change_type"""
    return result.joinToString(prefix = "PullSchemaResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    deployment_key: String = this.deployment_key,
    module_name: String = this.module_name,
    schema: Module? = this.schema,
    more: Boolean = this.more,
    change_type: DeploymentChangeType = this.change_type,
    unknownFields: ByteString = this.unknownFields,
  ): PullSchemaResponse = PullSchemaResponse(deployment_key, module_name, schema, more, change_type,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<PullSchemaResponse> = object :
        ProtoAdapter<PullSchemaResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      PullSchemaResponse::class, 
      "type.googleapis.com/xyz.block.ftl.v1.PullSchemaResponse", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/ftl.proto"
    ) {
      public override fun encodedSize(`value`: PullSchemaResponse): Int {
        var size = value.unknownFields.size
        if (value.deployment_key != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.deployment_key)
        if (value.module_name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.module_name)
        size += Module.ADAPTER.encodedSizeWithTag(4, value.schema)
        if (value.more != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.more)
        if (value.change_type != DeploymentChangeType.DEPLOYMENT_ADDED) size +=
            DeploymentChangeType.ADAPTER.encodedSizeWithTag(5, value.change_type)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: PullSchemaResponse): Unit {
        if (value.deployment_key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.deployment_key)
        if (value.module_name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.module_name)
        Module.ADAPTER.encodeWithTag(writer, 4, value.schema)
        if (value.more != false) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.more)
        if (value.change_type != DeploymentChangeType.DEPLOYMENT_ADDED)
            DeploymentChangeType.ADAPTER.encodeWithTag(writer, 5, value.change_type)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: PullSchemaResponse): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.change_type != DeploymentChangeType.DEPLOYMENT_ADDED)
            DeploymentChangeType.ADAPTER.encodeWithTag(writer, 5, value.change_type)
        if (value.more != false) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.more)
        Module.ADAPTER.encodeWithTag(writer, 4, value.schema)
        if (value.module_name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.module_name)
        if (value.deployment_key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.deployment_key)
      }

      public override fun decode(reader: ProtoReader): PullSchemaResponse {
        var deployment_key: String = ""
        var module_name: String = ""
        var schema: Module? = null
        var more: Boolean = false
        var change_type: DeploymentChangeType = DeploymentChangeType.DEPLOYMENT_ADDED
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> deployment_key = ProtoAdapter.STRING.decode(reader)
            2 -> module_name = ProtoAdapter.STRING.decode(reader)
            4 -> schema = Module.ADAPTER.decode(reader)
            3 -> more = ProtoAdapter.BOOL.decode(reader)
            5 -> try {
              change_type = DeploymentChangeType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return PullSchemaResponse(
          deployment_key = deployment_key,
          module_name = module_name,
          schema = schema,
          more = more,
          change_type = change_type,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: PullSchemaResponse): PullSchemaResponse = value.copy(
        schema = value.schema?.let(Module.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
