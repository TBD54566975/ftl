// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.console.TimelineEntry in xyz/block/ftl/v1/console/console.proto
package xyz.block.ftl.v1.console

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.countNonNull
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class TimelineEntry(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "timeStamp",
  )
  public val time_stamp: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "xyz.block.ftl.v1.console.Call#ADAPTER",
    oneofName = "entry",
  )
  public val call: Call? = null,
  @field:WireField(
    tag = 3,
    adapter = "xyz.block.ftl.v1.console.Deployment#ADAPTER",
    oneofName = "entry",
  )
  public val deployment: Deployment? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<TimelineEntry, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(call, deployment) <= 1) {
      "At most one of call, deployment may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TimelineEntry) return false
    if (unknownFields != other.unknownFields) return false
    if (time_stamp != other.time_stamp) return false
    if (call != other.call) return false
    if (deployment != other.deployment) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + time_stamp.hashCode()
      result = result * 37 + (call?.hashCode() ?: 0)
      result = result * 37 + (deployment?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """time_stamp=$time_stamp"""
    if (call != null) result += """call=$call"""
    if (deployment != null) result += """deployment=$deployment"""
    return result.joinToString(prefix = "TimelineEntry{", separator = ", ", postfix = "}")
  }

  public fun copy(
    time_stamp: Long = this.time_stamp,
    call: Call? = this.call,
    deployment: Deployment? = this.deployment,
    unknownFields: ByteString = this.unknownFields,
  ): TimelineEntry = TimelineEntry(time_stamp, call, deployment, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TimelineEntry> = object : ProtoAdapter<TimelineEntry>(
      FieldEncoding.LENGTH_DELIMITED, 
      TimelineEntry::class, 
      "type.googleapis.com/xyz.block.ftl.v1.console.TimelineEntry", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/console/console.proto"
    ) {
      public override fun encodedSize(`value`: TimelineEntry): Int {
        var size = value.unknownFields.size
        if (value.time_stamp != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(1,
            value.time_stamp)
        size += Call.ADAPTER.encodedSizeWithTag(2, value.call)
        size += Deployment.ADAPTER.encodedSizeWithTag(3, value.deployment)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: TimelineEntry): Unit {
        if (value.time_stamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.time_stamp)
        Call.ADAPTER.encodeWithTag(writer, 2, value.call)
        Deployment.ADAPTER.encodeWithTag(writer, 3, value.deployment)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: TimelineEntry): Unit {
        writer.writeBytes(value.unknownFields)
        Deployment.ADAPTER.encodeWithTag(writer, 3, value.deployment)
        Call.ADAPTER.encodeWithTag(writer, 2, value.call)
        if (value.time_stamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.time_stamp)
      }

      public override fun decode(reader: ProtoReader): TimelineEntry {
        var time_stamp: Long = 0L
        var call: Call? = null
        var deployment: Deployment? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> time_stamp = ProtoAdapter.INT64.decode(reader)
            2 -> call = Call.ADAPTER.decode(reader)
            3 -> deployment = Deployment.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return TimelineEntry(
          time_stamp = time_stamp,
          call = call,
          deployment = deployment,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: TimelineEntry): TimelineEntry = value.copy(
        call = value.call?.let(Call.ADAPTER::redact),
        deployment = value.deployment?.let(Deployment.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
