// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.ControllerService in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.GrpcCall
import com.squareup.wire.GrpcClient
import com.squareup.wire.GrpcMethod
import com.squareup.wire.GrpcStreamingCall

public class GrpcControllerServiceClient(
  private val client: GrpcClient,
) : ControllerServiceClient {
  /**
   * Ping service for readiness.
   */
  public override fun Ping(): GrpcCall<PingRequest, PingResponse> = client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/Ping",
      requestAdapter = PingRequest.ADAPTER,
      responseAdapter = PingResponse.ADAPTER
  ))

  public override fun Status(): GrpcCall<StatusRequest, StatusResponse> = client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/Status",
      requestAdapter = StatusRequest.ADAPTER,
      responseAdapter = StatusResponse.ADAPTER
  ))

  /**
   * Get list of artefacts that differ between the server and client.
   */
  public override fun GetArtefactDiffs():
      GrpcCall<GetArtefactDiffsRequest, GetArtefactDiffsResponse> = client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/GetArtefactDiffs",
      requestAdapter = GetArtefactDiffsRequest.ADAPTER,
      responseAdapter = GetArtefactDiffsResponse.ADAPTER
  ))

  /**
   * Upload an artefact to the server.
   */
  public override fun UploadArtefact(): GrpcCall<UploadArtefactRequest, UploadArtefactResponse> =
      client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/UploadArtefact",
      requestAdapter = UploadArtefactRequest.ADAPTER,
      responseAdapter = UploadArtefactResponse.ADAPTER
  ))

  /**
   * Create a deployment.
   */
  public override fun CreateDeployment():
      GrpcCall<CreateDeploymentRequest, CreateDeploymentResponse> = client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/CreateDeployment",
      requestAdapter = CreateDeploymentRequest.ADAPTER,
      responseAdapter = CreateDeploymentResponse.ADAPTER
  ))

  /**
   * Get the schema and artefact metadata for a deployment.
   */
  public override fun GetDeployment(): GrpcCall<GetDeploymentRequest, GetDeploymentResponse> =
      client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/GetDeployment",
      requestAdapter = GetDeploymentRequest.ADAPTER,
      responseAdapter = GetDeploymentResponse.ADAPTER
  ))

  /**
   * Stream deployment artefacts from the server.
   *
   * Each artefact is streamed one after the other as a sequence of max 1MB
   * chunks.
   */
  public override fun GetDeploymentArtefacts():
      GrpcStreamingCall<GetDeploymentArtefactsRequest, GetDeploymentArtefactsResponse> =
      client.newStreamingCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/GetDeploymentArtefacts",
      requestAdapter = GetDeploymentArtefactsRequest.ADAPTER,
      responseAdapter = GetDeploymentArtefactsResponse.ADAPTER
  ))

  /**
   * Register a Runner with the Controller.
   *
   * Each runner issue a RegisterRunnerRequest to the ControllerService
   * every 10 seconds to maintain its heartbeat.
   */
  public override fun RegisterRunner(): GrpcStreamingCall<RunnerHeartbeat, RegisterRunnerResponse> =
      client.newStreamingCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/RegisterRunner",
      requestAdapter = RunnerHeartbeat.ADAPTER,
      responseAdapter = RegisterRunnerResponse.ADAPTER
  ))

  /**
   * Update an existing deployment.
   */
  public override fun UpdateDeploy(): GrpcCall<UpdateDeployRequest, UpdateDeployResponse> =
      client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/UpdateDeploy",
      requestAdapter = UpdateDeployRequest.ADAPTER,
      responseAdapter = UpdateDeployResponse.ADAPTER
  ))

  /**
   * Gradually replace an existing deployment with a new one.
   *
   * If a deployment already exists for the module of the new deployment,
   * it will be scaled down and replaced by the new one.
   */
  public override fun ReplaceDeploy(): GrpcCall<ReplaceDeployRequest, ReplaceDeployResponse> =
      client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/ReplaceDeploy",
      requestAdapter = ReplaceDeployRequest.ADAPTER,
      responseAdapter = ReplaceDeployResponse.ADAPTER
  ))

  /**
   * Stream logs from a deployment
   */
  public override fun StreamDeploymentLogs():
      GrpcStreamingCall<StreamDeploymentLogsRequest, StreamDeploymentLogsResponse> =
      client.newStreamingCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/StreamDeploymentLogs",
      requestAdapter = StreamDeploymentLogsRequest.ADAPTER,
      responseAdapter = StreamDeploymentLogsResponse.ADAPTER
  ))

  /**
   * Pull schema changes from the Controller.
   */
  public override fun PullSchema(): GrpcStreamingCall<PullSchemaRequest, PullSchemaResponse> =
      client.newStreamingCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.ControllerService/PullSchema",
      requestAdapter = PullSchemaRequest.ADAPTER,
      responseAdapter = PullSchemaResponse.ADAPTER
  ))
}
