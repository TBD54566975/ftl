// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.schema.Map in xyz/block/ftl/v1/schema/schema.proto
package xyz.block.ftl.v1.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class Map(
  @field:WireField(
    tag = 1,
    adapter = "xyz.block.ftl.v1.schema.Type#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val key: Type? = null,
  @field:WireField(
    tag = 2,
    adapter = "xyz.block.ftl.v1.schema.Type#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "value",
  )
  public val value_: Type? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Map, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Map) return false
    if (unknownFields != other.unknownFields) return false
    if (key != other.key) return false
    if (value_ != other.value_) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (key?.hashCode() ?: 0)
      result = result * 37 + (value_?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (key != null) result += """key=$key"""
    if (value_ != null) result += """value_=$value_"""
    return result.joinToString(prefix = "Map{", separator = ", ", postfix = "}")
  }

  public fun copy(
    key: Type? = this.key,
    value_: Type? = this.value_,
    unknownFields: ByteString = this.unknownFields,
  ): Map = Map(key, value_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Map> = object : ProtoAdapter<Map>(
      FieldEncoding.LENGTH_DELIMITED, 
      Map::class, 
      "type.googleapis.com/xyz.block.ftl.v1.schema.Map", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/schema/schema.proto"
    ) {
      public override fun encodedSize(`value`: Map): Int {
        var size = value.unknownFields.size
        if (value.key != null) size += Type.ADAPTER.encodedSizeWithTag(1, value.key)
        if (value.value_ != null) size += Type.ADAPTER.encodedSizeWithTag(2, value.value_)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: Map): Unit {
        if (value.key != null) Type.ADAPTER.encodeWithTag(writer, 1, value.key)
        if (value.value_ != null) Type.ADAPTER.encodeWithTag(writer, 2, value.value_)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: Map): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.value_ != null) Type.ADAPTER.encodeWithTag(writer, 2, value.value_)
        if (value.key != null) Type.ADAPTER.encodeWithTag(writer, 1, value.key)
      }

      public override fun decode(reader: ProtoReader): Map {
        var key: Type? = null
        var value_: Type? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> key = Type.ADAPTER.decode(reader)
            2 -> value_ = Type.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Map(
          key = key,
          value_ = value_,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: Map): Map = value.copy(
        key = value.key?.let(Type.ADAPTER::redact),
        value_ = value.value_?.let(Type.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
