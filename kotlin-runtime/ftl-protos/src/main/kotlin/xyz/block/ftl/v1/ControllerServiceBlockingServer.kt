// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.ControllerService in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.MessageSink
import com.squareup.wire.MessageSource
import com.squareup.wire.Service
import com.squareup.wire.WireRpc
import kotlin.Unit

public interface ControllerServiceBlockingServer : Service {
  /**
   * Ping service for readiness.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/Ping",
    requestAdapter = "xyz.block.ftl.v1.PingRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.PingResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun Ping(request: PingRequest): PingResponse

  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/Status",
    requestAdapter = "xyz.block.ftl.v1.StatusRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.StatusResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun Status(request: StatusRequest): StatusResponse

  /**
   * Get list of artefacts that differ between the server and client.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/GetArtefactDiffs",
    requestAdapter = "xyz.block.ftl.v1.GetArtefactDiffsRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.GetArtefactDiffsResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun GetArtefactDiffs(request: GetArtefactDiffsRequest): GetArtefactDiffsResponse

  /**
   * Upload an artefact to the server.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/UploadArtefact",
    requestAdapter = "xyz.block.ftl.v1.UploadArtefactRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.UploadArtefactResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun UploadArtefact(request: UploadArtefactRequest): UploadArtefactResponse

  /**
   * Create a deployment.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/CreateDeployment",
    requestAdapter = "xyz.block.ftl.v1.CreateDeploymentRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.CreateDeploymentResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun CreateDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse

  /**
   * Get the schema and artefact metadata for a deployment.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/GetDeployment",
    requestAdapter = "xyz.block.ftl.v1.GetDeploymentRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.GetDeploymentResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun GetDeployment(request: GetDeploymentRequest): GetDeploymentResponse

  /**
   * Stream deployment artefacts from the server.
   *
   * Each artefact is streamed one after the other as a sequence of max 1MB
   * chunks.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/GetDeploymentArtefacts",
    requestAdapter = "xyz.block.ftl.v1.GetDeploymentArtefactsRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.GetDeploymentArtefactsResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun GetDeploymentArtefacts(request: GetDeploymentArtefactsRequest,
      response: MessageSink<GetDeploymentArtefactsResponse>): Unit

  /**
   * Register a Runner with the Controller.
   *
   * Each runner issue a RegisterRunnerRequest to the ControllerService
   * every 10 seconds to maintain its heartbeat.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/RegisterRunner",
    requestAdapter = "xyz.block.ftl.v1.RunnerHeartbeat#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.RegisterRunnerResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun RegisterRunner(request: MessageSource<RunnerHeartbeat>): RegisterRunnerResponse

  /**
   * Update an existing deployment.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/UpdateDeploy",
    requestAdapter = "xyz.block.ftl.v1.UpdateDeployRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.UpdateDeployResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun UpdateDeploy(request: UpdateDeployRequest): UpdateDeployResponse

  /**
   * Gradually replace an existing deployment with a new one.
   *
   * If a deployment already exists for the module of the new deployment,
   * it will be scaled down and replaced by the new one.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/ReplaceDeploy",
    requestAdapter = "xyz.block.ftl.v1.ReplaceDeployRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.ReplaceDeployResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun ReplaceDeploy(request: ReplaceDeployRequest): ReplaceDeployResponse

  /**
   * Stream logs from a deployment
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/StreamDeploymentLogs",
    requestAdapter = "xyz.block.ftl.v1.StreamDeploymentLogsRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.StreamDeploymentLogsResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun StreamDeploymentLogs(request: MessageSource<StreamDeploymentLogsRequest>):
      StreamDeploymentLogsResponse

  /**
   * Pull schema changes from the Controller.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.ControllerService/PullSchema",
    requestAdapter = "xyz.block.ftl.v1.PullSchemaRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.PullSchemaResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun PullSchema(request: PullSchemaRequest, response: MessageSink<PullSchemaResponse>): Unit
}
