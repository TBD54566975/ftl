// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.GetArtefactDiffsResponse in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

public class GetArtefactDiffsResponse(
  missing_digests: List<String> = emptyList(),
  client_artefacts: List<DeploymentArtefact> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<GetArtefactDiffsResponse, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "missingDigests",
  )
  public val missing_digests: List<String> = immutableCopyOf("missing_digests", missing_digests)

  /**
   * Artefacts that the client already has, and their path+executable status.
   */
  @field:WireField(
    tag = 2,
    adapter = "xyz.block.ftl.v1.DeploymentArtefact#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "clientArtefacts",
  )
  public val client_artefacts: List<DeploymentArtefact> = immutableCopyOf("client_artefacts",
      client_artefacts)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is GetArtefactDiffsResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (missing_digests != other.missing_digests) return false
    if (client_artefacts != other.client_artefacts) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + missing_digests.hashCode()
      result = result * 37 + client_artefacts.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (missing_digests.isNotEmpty()) result += """missing_digests=${sanitize(missing_digests)}"""
    if (client_artefacts.isNotEmpty()) result += """client_artefacts=$client_artefacts"""
    return result.joinToString(prefix = "GetArtefactDiffsResponse{", separator = ", ", postfix =
        "}")
  }

  public fun copy(
    missing_digests: List<String> = this.missing_digests,
    client_artefacts: List<DeploymentArtefact> = this.client_artefacts,
    unknownFields: ByteString = this.unknownFields,
  ): GetArtefactDiffsResponse = GetArtefactDiffsResponse(missing_digests, client_artefacts,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<GetArtefactDiffsResponse> = object :
        ProtoAdapter<GetArtefactDiffsResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      GetArtefactDiffsResponse::class, 
      "type.googleapis.com/xyz.block.ftl.v1.GetArtefactDiffsResponse", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/ftl.proto"
    ) {
      public override fun encodedSize(`value`: GetArtefactDiffsResponse): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(1, value.missing_digests)
        size += DeploymentArtefact.ADAPTER.asRepeated().encodedSizeWithTag(2,
            value.client_artefacts)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: GetArtefactDiffsResponse): Unit {
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1, value.missing_digests)
        DeploymentArtefact.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.client_artefacts)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: GetArtefactDiffsResponse):
          Unit {
        writer.writeBytes(value.unknownFields)
        DeploymentArtefact.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.client_artefacts)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1, value.missing_digests)
      }

      public override fun decode(reader: ProtoReader): GetArtefactDiffsResponse {
        val missing_digests = mutableListOf<String>()
        val client_artefacts = mutableListOf<DeploymentArtefact>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> missing_digests.add(ProtoAdapter.STRING.decode(reader))
            2 -> client_artefacts.add(DeploymentArtefact.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return GetArtefactDiffsResponse(
          missing_digests = missing_digests,
          client_artefacts = client_artefacts,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: GetArtefactDiffsResponse): GetArtefactDiffsResponse =
          value.copy(
        client_artefacts = value.client_artefacts.redactElements(DeploymentArtefact.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
