// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.RunnerService in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.Service
import com.squareup.wire.WireRpc

/**
 * RunnerService is the service that executes Deployments.
 *
 * The Controller will scale the Runner horizontally as required. The Runner will
 * register itself automatically with the ControllerService, which will then
 * assign modules to it.
 */
public interface RunnerServiceBlockingServer : Service {
  @WireRpc(
    path = "/xyz.block.ftl.v1.RunnerService/Ping",
    requestAdapter = "xyz.block.ftl.v1.PingRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.PingResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun Ping(request: PingRequest): PingResponse

  /**
   * Reserve synchronously reserves a Runner for a deployment but does nothing else.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.RunnerService/Reserve",
    requestAdapter = "xyz.block.ftl.v1.ReserveRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.ReserveResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun Reserve(request: ReserveRequest): ReserveResponse

  /**
   * Initiate a deployment on this Runner.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.RunnerService/Deploy",
    requestAdapter = "xyz.block.ftl.v1.DeployRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.DeployResponse#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun Deploy(request: DeployRequest): DeployResponse

  /**
   * Terminate the deployment on this Runner.
   */
  @WireRpc(
    path = "/xyz.block.ftl.v1.RunnerService/Terminate",
    requestAdapter = "xyz.block.ftl.v1.TerminateRequest#ADAPTER",
    responseAdapter = "xyz.block.ftl.v1.RunnerHeartbeat#ADAPTER",
    sourceFile = "xyz/block/ftl/v1/ftl.proto",
  )
  public fun Terminate(request: TerminateRequest): RunnerHeartbeat
}
