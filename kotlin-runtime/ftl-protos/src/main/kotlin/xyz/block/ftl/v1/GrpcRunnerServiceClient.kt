// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.RunnerService in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.GrpcCall
import com.squareup.wire.GrpcClient
import com.squareup.wire.GrpcMethod

/**
 * RunnerService is the service that executes Deployments.
 *
 * The Controller will scale the Runner horizontally as required. The Runner will
 * register itself automatically with the ControllerService, which will then
 * assign modules to it.
 */
public class GrpcRunnerServiceClient(
  private val client: GrpcClient,
) : RunnerServiceClient {
  public override fun Ping(): GrpcCall<PingRequest, PingResponse> = client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.RunnerService/Ping",
      requestAdapter = PingRequest.ADAPTER,
      responseAdapter = PingResponse.ADAPTER
  ))

  /**
   * Reserve synchronously reserves a Runner for a deployment but does nothing else.
   */
  public override fun Reserve(): GrpcCall<ReserveRequest, ReserveResponse> =
      client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.RunnerService/Reserve",
      requestAdapter = ReserveRequest.ADAPTER,
      responseAdapter = ReserveResponse.ADAPTER
  ))

  /**
   * Initiate a deployment on this Runner.
   */
  public override fun Deploy(): GrpcCall<DeployRequest, DeployResponse> = client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.RunnerService/Deploy",
      requestAdapter = DeployRequest.ADAPTER,
      responseAdapter = DeployResponse.ADAPTER
  ))

  /**
   * Terminate the deployment on this Runner.
   */
  public override fun Terminate(): GrpcCall<TerminateRequest, RunnerHeartbeat> =
      client.newCall(GrpcMethod(
      path = "/xyz.block.ftl.v1.RunnerService/Terminate",
      requestAdapter = TerminateRequest.ADAPTER,
      responseAdapter = RunnerHeartbeat.ADAPTER
  ))
}
