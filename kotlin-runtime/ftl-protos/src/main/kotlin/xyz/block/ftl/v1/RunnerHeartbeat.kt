// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.RunnerHeartbeat in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class RunnerHeartbeat(
  /**
   * UUID representing the runner instance.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val key: String = "",
  /**
   * Language the runner supports.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val language: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val endpoint: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
  )
  public val deployment: String? = null,
  @field:WireField(
    tag = 5,
    adapter = "xyz.block.ftl.v1.RunnerState#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val state: RunnerState = RunnerState.RUNNER_IDLE,
  /**
   * If present, the reason the Runner is transitioning from ASSIGNED to IDLE.
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
  )
  public val error: String? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<RunnerHeartbeat, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RunnerHeartbeat) return false
    if (unknownFields != other.unknownFields) return false
    if (key != other.key) return false
    if (language != other.language) return false
    if (endpoint != other.endpoint) return false
    if (deployment != other.deployment) return false
    if (state != other.state) return false
    if (error != other.error) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + key.hashCode()
      result = result * 37 + language.hashCode()
      result = result * 37 + endpoint.hashCode()
      result = result * 37 + (deployment?.hashCode() ?: 0)
      result = result * 37 + state.hashCode()
      result = result * 37 + (error?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """key=${sanitize(key)}"""
    result += """language=${sanitize(language)}"""
    result += """endpoint=${sanitize(endpoint)}"""
    if (deployment != null) result += """deployment=${sanitize(deployment)}"""
    result += """state=$state"""
    if (error != null) result += """error=${sanitize(error)}"""
    return result.joinToString(prefix = "RunnerHeartbeat{", separator = ", ", postfix = "}")
  }

  public fun copy(
    key: String = this.key,
    language: String = this.language,
    endpoint: String = this.endpoint,
    deployment: String? = this.deployment,
    state: RunnerState = this.state,
    error: String? = this.error,
    unknownFields: ByteString = this.unknownFields,
  ): RunnerHeartbeat = RunnerHeartbeat(key, language, endpoint, deployment, state, error,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<RunnerHeartbeat> = object : ProtoAdapter<RunnerHeartbeat>(
      FieldEncoding.LENGTH_DELIMITED, 
      RunnerHeartbeat::class, 
      "type.googleapis.com/xyz.block.ftl.v1.RunnerHeartbeat", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/ftl.proto"
    ) {
      public override fun encodedSize(`value`: RunnerHeartbeat): Int {
        var size = value.unknownFields.size
        if (value.key != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.key)
        if (value.language != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.language)
        if (value.endpoint != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.endpoint)
        size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.deployment)
        if (value.state != RunnerState.RUNNER_IDLE) size +=
            RunnerState.ADAPTER.encodedSizeWithTag(5, value.state)
        size += ProtoAdapter.STRING.encodedSizeWithTag(6, value.error)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: RunnerHeartbeat): Unit {
        if (value.key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.key)
        if (value.language != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.language)
        if (value.endpoint != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.endpoint)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.deployment)
        if (value.state != RunnerState.RUNNER_IDLE) RunnerState.ADAPTER.encodeWithTag(writer, 5,
            value.state)
        ProtoAdapter.STRING.encodeWithTag(writer, 6, value.error)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: RunnerHeartbeat): Unit {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.encodeWithTag(writer, 6, value.error)
        if (value.state != RunnerState.RUNNER_IDLE) RunnerState.ADAPTER.encodeWithTag(writer, 5,
            value.state)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.deployment)
        if (value.endpoint != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.endpoint)
        if (value.language != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.language)
        if (value.key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.key)
      }

      public override fun decode(reader: ProtoReader): RunnerHeartbeat {
        var key: String = ""
        var language: String = ""
        var endpoint: String = ""
        var deployment: String? = null
        var state: RunnerState = RunnerState.RUNNER_IDLE
        var error: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> key = ProtoAdapter.STRING.decode(reader)
            2 -> language = ProtoAdapter.STRING.decode(reader)
            3 -> endpoint = ProtoAdapter.STRING.decode(reader)
            4 -> deployment = ProtoAdapter.STRING.decode(reader)
            5 -> try {
              state = RunnerState.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            6 -> error = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return RunnerHeartbeat(
          key = key,
          language = language,
          endpoint = endpoint,
          deployment = deployment,
          state = state,
          error = error,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: RunnerHeartbeat): RunnerHeartbeat = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
