// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.GetDeploymentArtefactsResponse in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class GetDeploymentArtefactsResponse(
  @field:WireField(
    tag = 1,
    adapter = "xyz.block.ftl.v1.DeploymentArtefact#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val artefact: DeploymentArtefact? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val chunk: ByteString = ByteString.EMPTY,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<GetDeploymentArtefactsResponse, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is GetDeploymentArtefactsResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (artefact != other.artefact) return false
    if (chunk != other.chunk) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (artefact?.hashCode() ?: 0)
      result = result * 37 + chunk.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (artefact != null) result += """artefact=$artefact"""
    result += """chunk=$chunk"""
    return result.joinToString(prefix = "GetDeploymentArtefactsResponse{", separator = ", ", postfix
        = "}")
  }

  public fun copy(
    artefact: DeploymentArtefact? = this.artefact,
    chunk: ByteString = this.chunk,
    unknownFields: ByteString = this.unknownFields,
  ): GetDeploymentArtefactsResponse = GetDeploymentArtefactsResponse(artefact, chunk, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<GetDeploymentArtefactsResponse> = object :
        ProtoAdapter<GetDeploymentArtefactsResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      GetDeploymentArtefactsResponse::class, 
      "type.googleapis.com/xyz.block.ftl.v1.GetDeploymentArtefactsResponse", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/ftl.proto"
    ) {
      public override fun encodedSize(`value`: GetDeploymentArtefactsResponse): Int {
        var size = value.unknownFields.size
        if (value.artefact != null) size += DeploymentArtefact.ADAPTER.encodedSizeWithTag(1,
            value.artefact)
        if (value.chunk != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
            value.chunk)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: GetDeploymentArtefactsResponse):
          Unit {
        if (value.artefact != null) DeploymentArtefact.ADAPTER.encodeWithTag(writer, 1,
            value.artefact)
        if (value.chunk != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.chunk)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter,
          `value`: GetDeploymentArtefactsResponse): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.chunk != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.chunk)
        if (value.artefact != null) DeploymentArtefact.ADAPTER.encodeWithTag(writer, 1,
            value.artefact)
      }

      public override fun decode(reader: ProtoReader): GetDeploymentArtefactsResponse {
        var artefact: DeploymentArtefact? = null
        var chunk: ByteString = ByteString.EMPTY
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> artefact = DeploymentArtefact.ADAPTER.decode(reader)
            2 -> chunk = ProtoAdapter.BYTES.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return GetDeploymentArtefactsResponse(
          artefact = artefact,
          chunk = chunk,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: GetDeploymentArtefactsResponse):
          GetDeploymentArtefactsResponse = value.copy(
        artefact = value.artefact?.let(DeploymentArtefact.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
