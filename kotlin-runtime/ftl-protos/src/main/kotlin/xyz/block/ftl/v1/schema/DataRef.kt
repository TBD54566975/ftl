// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.schema.DataRef in xyz/block/ftl/v1/schema/schema.proto
package xyz.block.ftl.v1.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class DataRef(
  @field:WireField(
    tag = 1,
    adapter = "xyz.block.ftl.v1.schema.Position#ADAPTER",
  )
  public val pos: Position? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val name: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val module: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<DataRef, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is DataRef) return false
    if (unknownFields != other.unknownFields) return false
    if (pos != other.pos) return false
    if (name != other.name) return false
    if (module != other.module) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (pos?.hashCode() ?: 0)
      result = result * 37 + name.hashCode()
      result = result * 37 + module.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (pos != null) result += """pos=$pos"""
    result += """name=${sanitize(name)}"""
    result += """module=${sanitize(module)}"""
    return result.joinToString(prefix = "DataRef{", separator = ", ", postfix = "}")
  }

  public fun copy(
    pos: Position? = this.pos,
    name: String = this.name,
    module: String = this.module,
    unknownFields: ByteString = this.unknownFields,
  ): DataRef = DataRef(pos, name, module, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<DataRef> = object : ProtoAdapter<DataRef>(
      FieldEncoding.LENGTH_DELIMITED, 
      DataRef::class, 
      "type.googleapis.com/xyz.block.ftl.v1.schema.DataRef", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/schema/schema.proto"
    ) {
      public override fun encodedSize(`value`: DataRef): Int {
        var size = value.unknownFields.size
        size += Position.ADAPTER.encodedSizeWithTag(1, value.pos)
        if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
        if (value.module != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.module)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: DataRef): Unit {
        Position.ADAPTER.encodeWithTag(writer, 1, value.pos)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name)
        if (value.module != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.module)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: DataRef): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.module != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.module)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name)
        Position.ADAPTER.encodeWithTag(writer, 1, value.pos)
      }

      public override fun decode(reader: ProtoReader): DataRef {
        var pos: Position? = null
        var name: String = ""
        var module: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> pos = Position.ADAPTER.decode(reader)
            2 -> name = ProtoAdapter.STRING.decode(reader)
            3 -> module = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return DataRef(
          pos = pos,
          name = name,
          module = module,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: DataRef): DataRef = value.copy(
        pos = value.pos?.let(Position.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
