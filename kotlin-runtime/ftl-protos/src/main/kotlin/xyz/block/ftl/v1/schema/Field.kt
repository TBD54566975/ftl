// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.schema.Field in xyz/block/ftl/v1/schema/schema.proto
package xyz.block.ftl.v1.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

public class Field(
  @field:WireField(
    tag = 1,
    adapter = "xyz.block.ftl.v1.schema.Position#ADAPTER",
  )
  public val pos: Position? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val name: String = "",
  comments: List<String> = emptyList(),
  @field:WireField(
    tag = 4,
    adapter = "xyz.block.ftl.v1.schema.Type#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val type: Type? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Field, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
  )
  public val comments: List<String> = immutableCopyOf("comments", comments)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Field) return false
    if (unknownFields != other.unknownFields) return false
    if (pos != other.pos) return false
    if (name != other.name) return false
    if (comments != other.comments) return false
    if (type != other.type) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (pos?.hashCode() ?: 0)
      result = result * 37 + name.hashCode()
      result = result * 37 + comments.hashCode()
      result = result * 37 + (type?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (pos != null) result += """pos=$pos"""
    result += """name=${sanitize(name)}"""
    if (comments.isNotEmpty()) result += """comments=${sanitize(comments)}"""
    if (type != null) result += """type=$type"""
    return result.joinToString(prefix = "Field{", separator = ", ", postfix = "}")
  }

  public fun copy(
    pos: Position? = this.pos,
    name: String = this.name,
    comments: List<String> = this.comments,
    type: Type? = this.type,
    unknownFields: ByteString = this.unknownFields,
  ): Field = Field(pos, name, comments, type, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Field> = object : ProtoAdapter<Field>(
      FieldEncoding.LENGTH_DELIMITED, 
      Field::class, 
      "type.googleapis.com/xyz.block.ftl.v1.schema.Field", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/schema/schema.proto"
    ) {
      public override fun encodedSize(`value`: Field): Int {
        var size = value.unknownFields.size
        size += Position.ADAPTER.encodedSizeWithTag(1, value.pos)
        if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.comments)
        if (value.type != null) size += Type.ADAPTER.encodedSizeWithTag(4, value.type)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: Field): Unit {
        Position.ADAPTER.encodeWithTag(writer, 1, value.pos)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.comments)
        if (value.type != null) Type.ADAPTER.encodeWithTag(writer, 4, value.type)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: Field): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.type != null) Type.ADAPTER.encodeWithTag(writer, 4, value.type)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.comments)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name)
        Position.ADAPTER.encodeWithTag(writer, 1, value.pos)
      }

      public override fun decode(reader: ProtoReader): Field {
        var pos: Position? = null
        var name: String = ""
        val comments = mutableListOf<String>()
        var type: Type? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> pos = Position.ADAPTER.decode(reader)
            2 -> name = ProtoAdapter.STRING.decode(reader)
            3 -> comments.add(ProtoAdapter.STRING.decode(reader))
            4 -> type = Type.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Field(
          pos = pos,
          name = name,
          comments = comments,
          type = type,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: Field): Field = value.copy(
        pos = value.pos?.let(Position.ADAPTER::redact),
        type = value.type?.let(Type.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
