// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.StreamDeploymentLogsRequest in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class StreamDeploymentLogsRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "deploymentKey",
  )
  public val deployment_key: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "timeStamp",
  )
  public val time_stamp: Long = 0L,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "logLevel",
  )
  public val log_level: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val scope: String = "",
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val message: String = "",
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
  )
  public val error: String? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<StreamDeploymentLogsRequest, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is StreamDeploymentLogsRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (deployment_key != other.deployment_key) return false
    if (time_stamp != other.time_stamp) return false
    if (log_level != other.log_level) return false
    if (scope != other.scope) return false
    if (message != other.message) return false
    if (error != other.error) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + deployment_key.hashCode()
      result = result * 37 + time_stamp.hashCode()
      result = result * 37 + log_level.hashCode()
      result = result * 37 + scope.hashCode()
      result = result * 37 + message.hashCode()
      result = result * 37 + (error?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """deployment_key=${sanitize(deployment_key)}"""
    result += """time_stamp=$time_stamp"""
    result += """log_level=$log_level"""
    result += """scope=${sanitize(scope)}"""
    result += """message=${sanitize(message)}"""
    if (error != null) result += """error=${sanitize(error)}"""
    return result.joinToString(prefix = "StreamDeploymentLogsRequest{", separator = ", ", postfix =
        "}")
  }

  public fun copy(
    deployment_key: String = this.deployment_key,
    time_stamp: Long = this.time_stamp,
    log_level: Int = this.log_level,
    scope: String = this.scope,
    message: String = this.message,
    error: String? = this.error,
    unknownFields: ByteString = this.unknownFields,
  ): StreamDeploymentLogsRequest = StreamDeploymentLogsRequest(deployment_key, time_stamp,
      log_level, scope, message, error, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<StreamDeploymentLogsRequest> = object :
        ProtoAdapter<StreamDeploymentLogsRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      StreamDeploymentLogsRequest::class, 
      "type.googleapis.com/xyz.block.ftl.v1.StreamDeploymentLogsRequest", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/ftl.proto"
    ) {
      public override fun encodedSize(`value`: StreamDeploymentLogsRequest): Int {
        var size = value.unknownFields.size
        if (value.deployment_key != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.deployment_key)
        if (value.time_stamp != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(2,
            value.time_stamp)
        if (value.log_level != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.log_level)
        if (value.scope != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.scope)
        if (value.message != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.message)
        size += ProtoAdapter.STRING.encodedSizeWithTag(6, value.error)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: StreamDeploymentLogsRequest): Unit {
        if (value.deployment_key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.deployment_key)
        if (value.time_stamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.time_stamp)
        if (value.log_level != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.log_level)
        if (value.scope != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.scope)
        if (value.message != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.message)
        ProtoAdapter.STRING.encodeWithTag(writer, 6, value.error)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: StreamDeploymentLogsRequest):
          Unit {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.encodeWithTag(writer, 6, value.error)
        if (value.message != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.message)
        if (value.scope != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.scope)
        if (value.log_level != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.log_level)
        if (value.time_stamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.time_stamp)
        if (value.deployment_key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.deployment_key)
      }

      public override fun decode(reader: ProtoReader): StreamDeploymentLogsRequest {
        var deployment_key: String = ""
        var time_stamp: Long = 0L
        var log_level: Int = 0
        var scope: String = ""
        var message: String = ""
        var error: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> deployment_key = ProtoAdapter.STRING.decode(reader)
            2 -> time_stamp = ProtoAdapter.INT64.decode(reader)
            3 -> log_level = ProtoAdapter.INT32.decode(reader)
            4 -> scope = ProtoAdapter.STRING.decode(reader)
            5 -> message = ProtoAdapter.STRING.decode(reader)
            6 -> error = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return StreamDeploymentLogsRequest(
          deployment_key = deployment_key,
          time_stamp = time_stamp,
          log_level = log_level,
          scope = scope,
          message = message,
          error = error,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: StreamDeploymentLogsRequest): StreamDeploymentLogsRequest
          = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
