// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.Metadata in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

public class Metadata(
  values: List<Pair> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Metadata, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "xyz.block.ftl.v1.Metadata${'$'}Pair#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val values: List<Pair> = immutableCopyOf("values", values)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Metadata) return false
    if (unknownFields != other.unknownFields) return false
    if (values != other.values) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + values.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (values.isNotEmpty()) result += """values=$values"""
    return result.joinToString(prefix = "Metadata{", separator = ", ", postfix = "}")
  }

  public fun copy(values: List<Pair> = this.values, unknownFields: ByteString = this.unknownFields):
      Metadata = Metadata(values, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Metadata> = object : ProtoAdapter<Metadata>(
      FieldEncoding.LENGTH_DELIMITED, 
      Metadata::class, 
      "type.googleapis.com/xyz.block.ftl.v1.Metadata", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/ftl.proto"
    ) {
      public override fun encodedSize(`value`: Metadata): Int {
        var size = value.unknownFields.size
        size += Pair.ADAPTER.asRepeated().encodedSizeWithTag(1, value.values)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: Metadata): Unit {
        Pair.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.values)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: Metadata): Unit {
        writer.writeBytes(value.unknownFields)
        Pair.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.values)
      }

      public override fun decode(reader: ProtoReader): Metadata {
        val values = mutableListOf<Pair>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> values.add(Pair.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return Metadata(
          values = values,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: Metadata): Metadata = value.copy(
        values = value.values.redactElements(Pair.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public class Pair(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY,
    )
    public val key: String = "",
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY,
      declaredName = "value",
    )
    public val value_: String = "",
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<Pair, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    public override fun newBuilder(): Nothing = throw
        AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Pair) return false
      if (unknownFields != other.unknownFields) return false
      if (key != other.key) return false
      if (value_ != other.value_) return false
      return true
    }

    public override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + key.hashCode()
        result = result * 37 + value_.hashCode()
        super.hashCode = result
      }
      return result
    }

    public override fun toString(): String {
      val result = mutableListOf<String>()
      result += """key=${sanitize(key)}"""
      result += """value_=${sanitize(value_)}"""
      return result.joinToString(prefix = "Pair{", separator = ", ", postfix = "}")
    }

    public fun copy(
      key: String = this.key,
      value_: String = this.value_,
      unknownFields: ByteString = this.unknownFields,
    ): Pair = Pair(key, value_, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Pair> = object : ProtoAdapter<Pair>(
        FieldEncoding.LENGTH_DELIMITED, 
        Pair::class, 
        "type.googleapis.com/xyz.block.ftl.v1.Metadata.Pair", 
        PROTO_3, 
        null, 
        "xyz/block/ftl/v1/ftl.proto"
      ) {
        public override fun encodedSize(`value`: Pair): Int {
          var size = value.unknownFields.size
          if (value.key != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.key)
          if (value.value_ != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.value_)
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: Pair): Unit {
          if (value.key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.key)
          if (value.value_ != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.value_)
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: Pair): Unit {
          writer.writeBytes(value.unknownFields)
          if (value.value_ != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.value_)
          if (value.key != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.key)
        }

        public override fun decode(reader: ProtoReader): Pair {
          var key: String = ""
          var value_: String = ""
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> key = ProtoAdapter.STRING.decode(reader)
              2 -> value_ = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Pair(
            key = key,
            value_ = value_,
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: Pair): Pair = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
