// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.schema.VerbRuntime in xyz/block/ftl/v1/schema/runtime.proto
package xyz.block.ftl.v1.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Instant
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class VerbRuntime(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "createTime",
  )
  public val create_time: Instant? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "startTime",
  )
  public val start_time: Instant? = null,
  @field:WireField(
    tag = 3,
    adapter = "xyz.block.ftl.v1.schema.Status#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val status: Status = Status.OFFLINE,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<VerbRuntime, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VerbRuntime) return false
    if (unknownFields != other.unknownFields) return false
    if (create_time != other.create_time) return false
    if (start_time != other.start_time) return false
    if (status != other.status) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (create_time?.hashCode() ?: 0)
      result = result * 37 + (start_time?.hashCode() ?: 0)
      result = result * 37 + status.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (create_time != null) result += """create_time=$create_time"""
    if (start_time != null) result += """start_time=$start_time"""
    result += """status=$status"""
    return result.joinToString(prefix = "VerbRuntime{", separator = ", ", postfix = "}")
  }

  public fun copy(
    create_time: Instant? = this.create_time,
    start_time: Instant? = this.start_time,
    status: Status = this.status,
    unknownFields: ByteString = this.unknownFields,
  ): VerbRuntime = VerbRuntime(create_time, start_time, status, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<VerbRuntime> = object : ProtoAdapter<VerbRuntime>(
      FieldEncoding.LENGTH_DELIMITED, 
      VerbRuntime::class, 
      "type.googleapis.com/xyz.block.ftl.v1.schema.VerbRuntime", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/schema/runtime.proto"
    ) {
      public override fun encodedSize(`value`: VerbRuntime): Int {
        var size = value.unknownFields.size
        if (value.create_time != null) size += ProtoAdapter.INSTANT.encodedSizeWithTag(1,
            value.create_time)
        if (value.start_time != null) size += ProtoAdapter.INSTANT.encodedSizeWithTag(2,
            value.start_time)
        if (value.status != Status.OFFLINE) size += Status.ADAPTER.encodedSizeWithTag(3,
            value.status)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: VerbRuntime): Unit {
        if (value.create_time != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 1,
            value.create_time)
        if (value.start_time != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 2,
            value.start_time)
        if (value.status != Status.OFFLINE) Status.ADAPTER.encodeWithTag(writer, 3, value.status)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: VerbRuntime): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.status != Status.OFFLINE) Status.ADAPTER.encodeWithTag(writer, 3, value.status)
        if (value.start_time != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 2,
            value.start_time)
        if (value.create_time != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 1,
            value.create_time)
      }

      public override fun decode(reader: ProtoReader): VerbRuntime {
        var create_time: Instant? = null
        var start_time: Instant? = null
        var status: Status = Status.OFFLINE
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> create_time = ProtoAdapter.INSTANT.decode(reader)
            2 -> start_time = ProtoAdapter.INSTANT.decode(reader)
            3 -> try {
              status = Status.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return VerbRuntime(
          create_time = create_time,
          start_time = start_time,
          status = status,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: VerbRuntime): VerbRuntime = value.copy(
        create_time = value.create_time?.let(ProtoAdapter.INSTANT::redact),
        start_time = value.start_time?.let(ProtoAdapter.INSTANT::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
