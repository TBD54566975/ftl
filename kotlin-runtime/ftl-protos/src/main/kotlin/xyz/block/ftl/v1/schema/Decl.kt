// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.schema.Decl in xyz/block/ftl/v1/schema/schema.proto
package xyz.block.ftl.v1.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.countNonNull
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class Decl(
  @field:WireField(
    tag = 1,
    adapter = "xyz.block.ftl.v1.schema.Data#ADAPTER",
    declaredName = "data",
    oneofName = "value",
  )
  public val data_: Data? = null,
  @field:WireField(
    tag = 2,
    adapter = "xyz.block.ftl.v1.schema.Verb#ADAPTER",
    oneofName = "value",
  )
  public val verb: Verb? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Decl, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(data_, verb) <= 1) {
      "At most one of data_, verb may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Decl) return false
    if (unknownFields != other.unknownFields) return false
    if (data_ != other.data_) return false
    if (verb != other.verb) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (data_?.hashCode() ?: 0)
      result = result * 37 + (verb?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (data_ != null) result += """data_=$data_"""
    if (verb != null) result += """verb=$verb"""
    return result.joinToString(prefix = "Decl{", separator = ", ", postfix = "}")
  }

  public fun copy(
    data_: Data? = this.data_,
    verb: Verb? = this.verb,
    unknownFields: ByteString = this.unknownFields,
  ): Decl = Decl(data_, verb, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Decl> = object : ProtoAdapter<Decl>(
      FieldEncoding.LENGTH_DELIMITED, 
      Decl::class, 
      "type.googleapis.com/xyz.block.ftl.v1.schema.Decl", 
      PROTO_3, 
      null, 
      "xyz/block/ftl/v1/schema/schema.proto"
    ) {
      public override fun encodedSize(`value`: Decl): Int {
        var size = value.unknownFields.size
        size += Data.ADAPTER.encodedSizeWithTag(1, value.data_)
        size += Verb.ADAPTER.encodedSizeWithTag(2, value.verb)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: Decl): Unit {
        Data.ADAPTER.encodeWithTag(writer, 1, value.data_)
        Verb.ADAPTER.encodeWithTag(writer, 2, value.verb)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: Decl): Unit {
        writer.writeBytes(value.unknownFields)
        Verb.ADAPTER.encodeWithTag(writer, 2, value.verb)
        Data.ADAPTER.encodeWithTag(writer, 1, value.data_)
      }

      public override fun decode(reader: ProtoReader): Decl {
        var data_: Data? = null
        var verb: Verb? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> data_ = Data.ADAPTER.decode(reader)
            2 -> verb = Verb.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Decl(
          data_ = data_,
          verb = verb,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: Decl): Decl = value.copy(
        data_ = value.data_?.let(Data.ADAPTER::redact),
        verb = value.verb?.let(Verb.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
