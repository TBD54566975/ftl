// Code generated by Wire protocol buffer compiler, do not edit.
// Source: xyz.block.ftl.v1.VerbService in xyz/block/ftl/v1/ftl.proto
package xyz.block.ftl.v1

import com.google.protobuf.DescriptorProtos
import com.google.protobuf.Descriptors
import com.squareup.wire.kotlin.grpcserver.WireBindableService
import com.squareup.wire.kotlin.grpcserver.WireMethodMarshaller
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.MethodDescriptor
import io.grpc.ServerServiceDefinition
import io.grpc.ServiceDescriptor
import io.grpc.ServiceDescriptor.newBuilder
import io.grpc.stub.AbstractStub
import io.grpc.stub.ClientCalls
import io.grpc.stub.ClientCalls.blockingUnaryCall
import io.grpc.stub.ServerCalls
import io.grpc.stub.ServerCalls.asyncUnaryCall
import io.grpc.stub.StreamObserver
import java.io.InputStream
import java.lang.Class
import java.lang.UnsupportedOperationException
import java.util.concurrent.ExecutorService
import kotlin.Array
import kotlin.String
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.Set
import kotlin.jvm.Volatile

public object VerbServiceWireGrpc {
  public val SERVICE_NAME: String = "xyz.block.ftl.v1.VerbService"

  @Volatile
  private var serviceDescriptor: ServiceDescriptor? = null

  private val descriptorMap: Map<String, DescriptorProtos.FileDescriptorProto> = mapOf(
    "xyz/block/ftl/v1/ftl.proto" to descriptorFor(arrayOf(
      "Chp4eXovYmxvY2svZnRsL3YxL2Z0bC5wcm90bxIQeHl6LmJsb2NrLmZ0bC52MRokeHl6L2Jsb2NrL2Z0",
      "bC92MS9zY2hlbWEvc2NoZW1hLnByb3RvIg0KC1BpbmdSZXF1ZXN0IjQKDFBpbmdSZXNwb25zZRIWCglu",
      "b3RfcmVhZHkYASABKAmIAQFIAEIMCgpfbm90X3JlYWR5Il8KCE1ldGFkYXRhEi8KBnZhbHVlcxgBIAMo",
      "CzIfLnh5ei5ibG9jay5mdGwudjEuTWV0YWRhdGEuUGFpchoiCgRQYWlyEgsKA2tleRgBIAEoCRINCgV2",
      "YWx1ZRgCIAEoCSJ5CgtDYWxsUmVxdWVzdBIsCghtZXRhZGF0YRgBIAEoCzIaLnh5ei5ibG9jay5mdGwu",
      "djEuTWV0YWRhdGESLgoEdmVyYhgCIAEoCzIgLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLlZlcmJSZWYS",
      "DAoEYm9keRgDIAEoDCJ7CgxDYWxsUmVzcG9uc2USDgoEYm9keRgBIAEoDEgAEjUKBWVycm9yGAIgASgL",
      "MiQueHl6LmJsb2NrLmZ0bC52MS5DYWxsUmVzcG9uc2UuRXJyb3JIABoYCgVFcnJvchIPCgdtZXNzYWdl",
      "GAEgASgJQgoKCHJlc3BvbnNlIhMKEVB1bGxTY2hlbWFSZXF1ZXN0Is0BChJQdWxsU2NoZW1hUmVzcG9u",
      "c2USFgoOZGVwbG95bWVudF9rZXkYASABKAkSEwoLbW9kdWxlX25hbWUYAiABKAkSNAoGc2NoZW1hGAQg",
      "ASgLMh8ueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuTW9kdWxliAEBSAASDAoEbW9yZRgDIAEoCBI7Cgtj",
      "aGFuZ2VfdHlwZRgFIAEoDjImLnh5ei5ibG9jay5mdGwudjEuRGVwbG95bWVudENoYW5nZVR5cGVCCQoH",
      "X3NjaGVtYSIxChdHZXRBcnRlZmFjdERpZmZzUmVxdWVzdBIWCg5jbGllbnRfZGlnZXN0cxgBIAMoCSJz",
      "ChhHZXRBcnRlZmFjdERpZmZzUmVzcG9uc2USFwoPbWlzc2luZ19kaWdlc3RzGAEgAygJEj4KEGNsaWVu",
      "dF9hcnRlZmFjdHMYAiADKAsyJC54eXouYmxvY2suZnRsLnYxLkRlcGxveW1lbnRBcnRlZmFjdCIoChVV",
      "cGxvYWRBcnRlZmFjdFJlcXVlc3QSDwoHY29udGVudBgBIAEoDCIoChZVcGxvYWRBcnRlZmFjdFJlc3Bv",
      "bnNlEg4KBmRpZ2VzdBgCIAEoDCJGChJEZXBsb3ltZW50QXJ0ZWZhY3QSDgoGZGlnZXN0GAEgASgJEgwK",
      "BHBhdGgYAiABKAkSEgoKZXhlY3V0YWJsZRgDIAEoCCKDAQoXQ3JlYXRlRGVwbG95bWVudFJlcXVlc3QS",
      "LwoGc2NoZW1hGAEgASgLMh8ueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuTW9kdWxlEjcKCWFydGVmYWN0",
      "cxgCIAMoCzIkLnh5ei5ibG9jay5mdGwudjEuRGVwbG95bWVudEFydGVmYWN0InAKGENyZWF0ZURlcGxv",
      "eW1lbnRSZXNwb25zZRIWCg5kZXBsb3ltZW50X2tleRgBIAEoCRIiChVhY3RpdmVfZGVwbG95bWVudF9r",
      "ZXkYAiABKAmIAQFIAEIYChZfYWN0aXZlX2RlcGxveW1lbnRfa2V5InUKHUdldERlcGxveW1lbnRBcnRl",
      "ZmFjdHNSZXF1ZXN0EhYKDmRlcGxveW1lbnRfa2V5GAEgASgJEjwKDmhhdmVfYXJ0ZWZhY3RzGAIgAygL",
      "MiQueHl6LmJsb2NrLmZ0bC52MS5EZXBsb3ltZW50QXJ0ZWZhY3QiZwoeR2V0RGVwbG95bWVudEFydGVm",
      "YWN0c1Jlc3BvbnNlEjYKCGFydGVmYWN0GAEgASgLMiQueHl6LmJsb2NrLmZ0bC52MS5EZXBsb3ltZW50",
      "QXJ0ZWZhY3QSDQoFY2h1bmsYAiABKAwiLgoUR2V0RGVwbG95bWVudFJlcXVlc3QSFgoOZGVwbG95bWVu",
      "dF9rZXkYASABKAkigQEKFUdldERlcGxveW1lbnRSZXNwb25zZRIvCgZzY2hlbWEYASABKAsyHy54eXou",
      "YmxvY2suZnRsLnYxLnNjaGVtYS5Nb2R1bGUSNwoJYXJ0ZWZhY3RzGAIgAygLMiQueHl6LmJsb2NrLmZ0",
      "bC52MS5EZXBsb3ltZW50QXJ0ZWZhY3QitgEKD1J1bm5lckhlYXJ0YmVhdBILCgNrZXkYASABKAkSEAoI",
      "bGFuZ3VhZ2UYAiABKAkSEAoIZW5kcG9pbnQYAyABKAkSFwoKZGVwbG95bWVudBgEIAEoCYgBAUgAEiwK",
      "BXN0YXRlGAUgASgOMh0ueHl6LmJsb2NrLmZ0bC52MS5SdW5uZXJTdGF0ZRISCgVlcnJvchgGIAEoCYgB",
      "AUgBQg0KC19kZXBsb3ltZW50QggKBl9lcnJvciIYChZSZWdpc3RlclJ1bm5lclJlc3BvbnNlIkMKE1Vw",
      "ZGF0ZURlcGxveVJlcXVlc3QSFgoOZGVwbG95bWVudF9rZXkYASABKAkSFAoMbWluX3JlcGxpY2FzGAIg",
      "ASgFIhYKFFVwZGF0ZURlcGxveVJlc3BvbnNlIkQKFFJlcGxhY2VEZXBsb3lSZXF1ZXN0EhYKDmRlcGxv",
      "eW1lbnRfa2V5GAEgASgJEhQKDG1pbl9yZXBsaWNhcxgCIAEoBSIXChVSZXBsYWNlRGVwbG95UmVzcG9u",
      "c2UimgEKG1N0cmVhbURlcGxveW1lbnRMb2dzUmVxdWVzdBIWCg5kZXBsb3ltZW50X2tleRgBIAEoCRIS",
      "Cgp0aW1lX3N0YW1wGAIgASgDEhEKCWxvZ19sZXZlbBgDIAEoBRINCgVzY29wZRgEIAEoCRIPCgdtZXNz",
      "YWdlGAUgASgJEhIKBWVycm9yGAYgASgJiAEBSABCCAoGX2Vycm9yIh4KHFN0cmVhbURlcGxveW1lbnRM",
      "b2dzUmVzcG9uc2UicgoNU3RhdHVzUmVxdWVzdBIXCg9hbGxfZGVwbG95bWVudHMYASABKAgSEwoLYWxs",
      "X3J1bm5lcnMYAiABKAgSFwoPYWxsX2NvbnRyb2xsZXJzGAMgASgIEhoKEmFsbF9pbmdyZXNzX3JvdXRl",
      "cxgEIAEoCCLtBQoOU3RhdHVzUmVzcG9uc2USQAoLY29udHJvbGxlcnMYASADKAsyKy54eXouYmxvY2su",
      "ZnRsLnYxLlN0YXR1c1Jlc3BvbnNlLkNvbnRyb2xsZXISOAoHcnVubmVycxgCIAMoCzInLnh5ei5ibG9j",
      "ay5mdGwudjEuU3RhdHVzUmVzcG9uc2UuUnVubmVyEkAKC2RlcGxveW1lbnRzGAMgAygLMisueHl6LmJs",
      "b2NrLmZ0bC52MS5TdGF0dXNSZXNwb25zZS5EZXBsb3ltZW50EkUKDmluZ3Jlc3Nfcm91dGVzGAQgAygL",
      "Mi0ueHl6LmJsb2NrLmZ0bC52MS5TdGF0dXNSZXNwb25zZS5JbmdyZXNzUm91dGUaXQoKQ29udHJvbGxl",
      "chILCgNrZXkYASABKAkSEAoIZW5kcG9pbnQYAiABKAkSMAoFc3RhdGUYBCABKA4yIS54eXouYmxvY2su",
      "ZnRsLnYxLkNvbnRyb2xsZXJTdGF0ZRqPAQoGUnVubmVyEgsKA2tleRgBIAEoCRIQCghsYW5ndWFnZRgC",
      "IAEoCRIQCghlbmRwb2ludBgDIAEoCRIsCgVzdGF0ZRgEIAEoDjIdLnh5ei5ibG9jay5mdGwudjEuUnVu",
      "bmVyU3RhdGUSFwoKZGVwbG95bWVudBgFIAEoCYgBAUgAQg0KC19kZXBsb3ltZW50GoABCgpEZXBsb3lt",
      "ZW50EgsKA2tleRgBIAEoCRIQCghsYW5ndWFnZRgCIAEoCRIMCgRuYW1lGAMgASgJEhQKDG1pbl9yZXBs",
      "aWNhcxgEIAEoBRIvCgZzY2hlbWEYBSABKAsyHy54eXouYmxvY2suZnRsLnYxLnNjaGVtYS5Nb2R1bGUa",
      "YgoMSW5ncmVzc1JvdXRlEhYKDmRlcGxveW1lbnRfa2V5GAEgASgJEg4KBm1vZHVsZRgCIAEoCRIMCgR2",
      "ZXJiGAMgASgJEg4KBm1ldGhvZBgEIAEoCRIMCgRwYXRoGAUgASgJIicKDURlcGxveVJlcXVlc3QSFgoO",
      "ZGVwbG95bWVudF9rZXkYASABKAkiEAoORGVwbG95UmVzcG9uc2UiKgoQVGVybWluYXRlUmVxdWVzdBIW",
      "Cg5kZXBsb3ltZW50X2tleRgBIAEoCSIoCg5SZXNlcnZlUmVxdWVzdBIWCg5kZXBsb3ltZW50X2tleRgB",
      "IAEoCSIRCg9SZXNlcnZlUmVzcG9uc2UqXAoURGVwbG95bWVudENoYW5nZVR5cGUSFAoQREVQTE9ZTUVO",
      "VF9BRERFRBAAEhYKEkRFUExPWU1FTlRfUkVNT1ZFRBABEhYKEkRFUExPWU1FTlRfQ0hBTkdFRBACKjsK",
      "D0NvbnRyb2xsZXJTdGF0ZRITCg9DT05UUk9MTEVSX0xJVkUQABITCg9DT05UUk9MTEVSX0RFQUQQASpZ",
      "CgtSdW5uZXJTdGF0ZRIPCgtSVU5ORVJfSURMRRAAEhMKD1JVTk5FUl9SRVNFUlZFRBABEhMKD1JVTk5F",
      "Ul9BU1NJR05FRBACEg8KC1JVTk5FUl9ERUFEEAMyoAEKC1ZlcmJTZXJ2aWNlEkoKBFBpbmcSHS54eXou",
      "YmxvY2suZnRsLnYxLlBpbmdSZXF1ZXN0Gh4ueHl6LmJsb2NrLmZ0bC52MS5QaW5nUmVzcG9uc2UiA5AC",
      "ARJFCgRDYWxsEh0ueHl6LmJsb2NrLmZ0bC52MS5DYWxsUmVxdWVzdBoeLnh5ei5ibG9jay5mdGwudjEu",
      "Q2FsbFJlc3BvbnNlMr4JChFDb250cm9sbGVyU2VydmljZRJKCgRQaW5nEh0ueHl6LmJsb2NrLmZ0bC52",
      "MS5QaW5nUmVxdWVzdBoeLnh5ei5ibG9jay5mdGwudjEuUGluZ1Jlc3BvbnNlIgOQAgESSwoGU3RhdHVz",
      "Eh8ueHl6LmJsb2NrLmZ0bC52MS5TdGF0dXNSZXF1ZXN0GiAueHl6LmJsb2NrLmZ0bC52MS5TdGF0dXNS",
      "ZXNwb25zZRJpChBHZXRBcnRlZmFjdERpZmZzEikueHl6LmJsb2NrLmZ0bC52MS5HZXRBcnRlZmFjdERp",
      "ZmZzUmVxdWVzdBoqLnh5ei5ibG9jay5mdGwudjEuR2V0QXJ0ZWZhY3REaWZmc1Jlc3BvbnNlEmMKDlVw",
      "bG9hZEFydGVmYWN0EicueHl6LmJsb2NrLmZ0bC52MS5VcGxvYWRBcnRlZmFjdFJlcXVlc3QaKC54eXou",
      "YmxvY2suZnRsLnYxLlVwbG9hZEFydGVmYWN0UmVzcG9uc2USaQoQQ3JlYXRlRGVwbG95bWVudBIpLnh5",
      "ei5ibG9jay5mdGwudjEuQ3JlYXRlRGVwbG95bWVudFJlcXVlc3QaKi54eXouYmxvY2suZnRsLnYxLkNy",
      "ZWF0ZURlcGxveW1lbnRSZXNwb25zZRJgCg1HZXREZXBsb3ltZW50EiYueHl6LmJsb2NrLmZ0bC52MS5H",
      "ZXREZXBsb3ltZW50UmVxdWVzdBonLnh5ei5ibG9jay5mdGwudjEuR2V0RGVwbG95bWVudFJlc3BvbnNl",
      "En0KFkdldERlcGxveW1lbnRBcnRlZmFjdHMSLy54eXouYmxvY2suZnRsLnYxLkdldERlcGxveW1lbnRB",
      "cnRlZmFjdHNSZXF1ZXN0GjAueHl6LmJsb2NrLmZ0bC52MS5HZXREZXBsb3ltZW50QXJ0ZWZhY3RzUmVz",
      "cG9uc2UwARJfCg5SZWdpc3RlclJ1bm5lchIhLnh5ei5ibG9jay5mdGwudjEuUnVubmVySGVhcnRiZWF0",
      "GigueHl6LmJsb2NrLmZ0bC52MS5SZWdpc3RlclJ1bm5lclJlc3BvbnNlKAESXQoMVXBkYXRlRGVwbG95",
      "EiUueHl6LmJsb2NrLmZ0bC52MS5VcGRhdGVEZXBsb3lSZXF1ZXN0GiYueHl6LmJsb2NrLmZ0bC52MS5V",
      "cGRhdGVEZXBsb3lSZXNwb25zZRJgCg1SZXBsYWNlRGVwbG95EiYueHl6LmJsb2NrLmZ0bC52MS5SZXBs",
      "YWNlRGVwbG95UmVxdWVzdBonLnh5ei5ibG9jay5mdGwudjEuUmVwbGFjZURlcGxveVJlc3BvbnNlEncK",
      "FFN0cmVhbURlcGxveW1lbnRMb2dzEi0ueHl6LmJsb2NrLmZ0bC52MS5TdHJlYW1EZXBsb3ltZW50TG9n",
      "c1JlcXVlc3QaLi54eXouYmxvY2suZnRsLnYxLlN0cmVhbURlcGxveW1lbnRMb2dzUmVzcG9uc2UoARJZ",
      "CgpQdWxsU2NoZW1hEiMueHl6LmJsb2NrLmZ0bC52MS5QdWxsU2NoZW1hUmVxdWVzdBokLnh5ei5ibG9j",
      "ay5mdGwudjEuUHVsbFNjaGVtYVJlc3BvbnNlMAEyzAIKDVJ1bm5lclNlcnZpY2USSgoEUGluZxIdLnh5",
      "ei5ibG9jay5mdGwudjEuUGluZ1JlcXVlc3QaHi54eXouYmxvY2suZnRsLnYxLlBpbmdSZXNwb25zZSID",
      "kAIBEk4KB1Jlc2VydmUSIC54eXouYmxvY2suZnRsLnYxLlJlc2VydmVSZXF1ZXN0GiEueHl6LmJsb2Nr",
      "LmZ0bC52MS5SZXNlcnZlUmVzcG9uc2USSwoGRGVwbG95Eh8ueHl6LmJsb2NrLmZ0bC52MS5EZXBsb3lS",
      "ZXF1ZXN0GiAueHl6LmJsb2NrLmZ0bC52MS5EZXBsb3lSZXNwb25zZRJSCglUZXJtaW5hdGUSIi54eXou",
      "YmxvY2suZnRsLnYxLlRlcm1pbmF0ZVJlcXVlc3QaIS54eXouYmxvY2suZnRsLnYxLlJ1bm5lckhlYXJ0",
      "YmVhdEI8UAFaOGdpdGh1Yi5jb20vVEJENTQ1NjY5NzUvZnRsL3Byb3Rvcy94eXovYmxvY2svZnRsL3Yx",
      "O2Z0bHYxYgZwcm90bzM=",
    )),
    "xyz/block/ftl/v1/schema/schema.proto" to descriptorFor(arrayOf(
      "CiR4eXovYmxvY2svZnRsL3YxL3NjaGVtYS9zY2hlbWEucHJvdG8SF3h5ei5ibG9jay5mdGwudjEuc2No",
      "ZW1hGiV4eXovYmxvY2svZnRsL3YxL3NjaGVtYS9ydW50aW1lLnByb3RvIjcKBUFycmF5Ei4KB2VsZW1l",
      "bnQYASABKAsyHS54eXouYmxvY2suZnRsLnYxLnNjaGVtYS5UeXBlIgYKBEJvb2wiyAEKBERhdGESMwoD",
      "cG9zGAEgASgLMiEueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuUG9zaXRpb26IAQFIABIMCgRuYW1lGAIg",
      "ASgJEi4KBmZpZWxkcxgDIAMoCzIeLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLkZpZWxkEjMKCG1ldGFk",
      "YXRhGAQgAygLMiEueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuTWV0YWRhdGESEAoIY29tbWVudHMYBSAD",
      "KAlCBgoEX3BvcyJkCgdEYXRhUmVmEjMKA3BvcxgBIAEoCzIhLnh5ei5ibG9jay5mdGwudjEuc2NoZW1h",
      "LlBvc2l0aW9uiAEBSAASDAoEbmFtZRgCIAEoCRIOCgZtb2R1bGUYAyABKAlCBgoEX3BvcyJtCgREZWNs",
      "Ei0KBGRhdGEYASABKAsyHS54eXouYmxvY2suZnRsLnYxLnNjaGVtYS5EYXRhSAASLQoEdmVyYhgCIAEo",
      "CzIdLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLlZlcmJIAEIHCgV2YWx1ZSKRAQoFRmllbGQSMwoDcG9z",
      "GAEgASgLMiEueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuUG9zaXRpb26IAQFIABIMCgRuYW1lGAIgASgJ",
      "EhAKCGNvbW1lbnRzGAMgAygJEisKBHR5cGUYBCABKAsyHS54eXouYmxvY2suZnRsLnYxLnNjaGVtYS5U",
      "eXBlQgYKBF9wb3MiBwoFRmxvYXQiBQoDSW50Il8KA01hcBIqCgNrZXkYASABKAsyHS54eXouYmxvY2su",
      "ZnRsLnYxLnNjaGVtYS5UeXBlEiwKBXZhbHVlGAIgASgLMh0ueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEu",
      "VHlwZSKJAQoITWV0YWRhdGESNwoFY2FsbHMYASABKAsyJi54eXouYmxvY2suZnRsLnYxLnNjaGVtYS5N",
      "ZXRhZGF0YUNhbGxzSAASOwoHaW5ncmVzcxgCIAEoCzIoLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLk1l",
      "dGFkYXRhSW5ncmVzc0gAQgcKBXZhbHVlIn0KDU1ldGFkYXRhQ2FsbHMSMwoDcG9zGAEgASgLMiEueHl6",
      "LmJsb2NrLmZ0bC52MS5zY2hlbWEuUG9zaXRpb26IAQFIABIvCgVjYWxscxgCIAMoCzIgLnh5ei5ibG9j",
      "ay5mdGwudjEuc2NoZW1hLlZlcmJSZWZCBgoEX3BvcyJsCg9NZXRhZGF0YUluZ3Jlc3MSMwoDcG9zGAEg",
      "ASgLMiEueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuUG9zaXRpb26IAQFIABIOCgZtZXRob2QYAiABKAkS",
      "DAoEcGF0aBgDIAEoCUIGCgRfcG9zIt8BCgZNb2R1bGUSPgoHcnVudGltZRiS9wEgASgLMiYueHl6LmJs",
      "b2NrLmZ0bC52MS5zY2hlbWEuTW9kdWxlUnVudGltZYgBAUgAEjMKA3BvcxgBIAEoCzIhLnh5ei5ibG9j",
      "ay5mdGwudjEuc2NoZW1hLlBvc2l0aW9uiAEBSAESDAoEbmFtZRgCIAEoCRIQCghjb21tZW50cxgDIAMo",
      "CRIsCgVkZWNscxgEIAMoCzIdLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLkRlY2xCCgoIX3J1bnRpbWVC",
      "BgoEX3BvcyI6CghQb3NpdGlvbhIQCghmaWxlbmFtZRgBIAEoCRIMCgRsaW5lGAIgASgDEg4KBmNvbHVt",
      "bhgDIAEoAyJ3CgZTY2hlbWESMwoDcG9zGAEgASgLMiEueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuUG9z",
      "aXRpb26IAQFIABIwCgdtb2R1bGVzGAIgAygLMh8ueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuTW9kdWxl",
      "QgYKBF9wb3MiCAoGU3RyaW5nIgYKBFRpbWUixgMKBFR5cGUSKwoDaW50GAEgASgLMhwueHl6LmJsb2Nr",
      "LmZ0bC52MS5zY2hlbWEuSW50SAASLwoFZmxvYXQYAiABKAsyHi54eXouYmxvY2suZnRsLnYxLnNjaGVt",
      "YS5GbG9hdEgAEjEKBnN0cmluZxgDIAEoCzIfLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLlN0cmluZ0gA",
      "Ei0KBGJvb2wYBCABKAsyHS54eXouYmxvY2suZnRsLnYxLnNjaGVtYS5Cb29sSAASLQoEdGltZRgFIAEo",
      "CzIdLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLlRpbWVIABIvCgVhcnJheRgGIAEoCzIeLnh5ei5ibG9j",
      "ay5mdGwudjEuc2NoZW1hLkFycmF5SAASKwoDbWFwGAcgASgLMhwueHl6LmJsb2NrLmZ0bC52MS5zY2hl",
      "bWEuTWFwSAASMwoHdmVyYlJlZhgIIAEoCzIgLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLlZlcmJSZWZI",
      "ABIzCgdkYXRhUmVmGAkgASgLMiAueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuRGF0YVJlZkgAQgcKBXZh",
      "bHVlIskCCgRWZXJiEjwKB3J1bnRpbWUYkvcBIAEoCzIkLnh5ei5ibG9jay5mdGwudjEuc2NoZW1hLlZl",
      "cmJSdW50aW1liAEBSAASMwoDcG9zGAEgASgLMiEueHl6LmJsb2NrLmZ0bC52MS5zY2hlbWEuUG9zaXRp",
      "b26IAQFIARIMCgRuYW1lGAIgASgJEhAKCGNvbW1lbnRzGAMgAygJEjEKB3JlcXVlc3QYBCABKAsyIC54",
      "eXouYmxvY2suZnRsLnYxLnNjaGVtYS5EYXRhUmVmEjIKCHJlc3BvbnNlGAUgASgLMiAueHl6LmJsb2Nr",
      "LmZ0bC52MS5zY2hlbWEuRGF0YVJlZhIzCghtZXRhZGF0YRgGIAMoCzIhLnh5ei5ibG9jay5mdGwudjEu",
      "c2NoZW1hLk1ldGFkYXRhQgoKCF9ydW50aW1lQgYKBF9wb3MiZAoHVmVyYlJlZhIzCgNwb3MYASABKAsy",
      "IS54eXouYmxvY2suZnRsLnYxLnNjaGVtYS5Qb3NpdGlvbogBAUgAEgwKBG5hbWUYAiABKAkSDgoGbW9k",
      "dWxlGAMgASgJQgYKBF9wb3NCRVABWkFnaXRodWIuY29tL1RCRDU0NTY2OTc1L2Z0bC9wcm90b3MveHl6",
      "L2Jsb2NrL2Z0bC92MS9zY2hlbWE7cHNjaGVtYWIGcHJvdG8z",
    )),
    "xyz/block/ftl/v1/schema/runtime.proto" to descriptorFor(arrayOf(
      "CiV4eXovYmxvY2svZnRsL3YxL3NjaGVtYS9ydW50aW1lLnByb3RvEhd4eXouYmxvY2suZnRsLnYxLnNj",
      "aGVtYRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byJoCg1Nb2R1bGVSdW50aW1lEi8KC2Ny",
      "ZWF0ZV90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIQCghsYW5ndWFnZRgCIAEo",
      "CRIUCgxtaW5fcmVwbGljYXMYAyABKAUinwEKC1ZlcmJSdW50aW1lEi8KC2NyZWF0ZV90aW1lGAEgASgL",
      "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgpzdGFydF90aW1lGAIgASgLMhouZ29vZ2xlLnBy",
      "b3RvYnVmLlRpbWVzdGFtcBIvCgZzdGF0dXMYAyABKA4yHy54eXouYmxvY2suZnRsLnYxLnNjaGVtYS5T",
      "dGF0dXMqVwoGU3RhdHVzEgsKB09GRkxJTkUQABIMCghTVEFSVElORxABEgoKBk9OTElORRACEgwKCFNU",
      "T1BQSU5HEAMSCwoHU1RPUFBFRBAEEgsKB0VSUk9SRUQQBUJFUAFaQWdpdGh1Yi5jb20vVEJENTQ1NjY5",
      "NzUvZnRsL3Byb3Rvcy94eXovYmxvY2svZnRsL3YxL3NjaGVtYTtwc2NoZW1hYgZwcm90bzM=",
    )),
    "google/protobuf/timestamp.proto" to descriptorFor(arrayOf(
      "Ch9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvEg9nb29nbGUucHJvdG9idWYiCwoJVGltZXN0",
      "YW1wYgZwcm90bzM=",
    )),
  )


  @Volatile
  private var getPingMethod: MethodDescriptor<PingRequest, PingResponse>? = null

  @Volatile
  private var getCallMethod: MethodDescriptor<CallRequest, CallResponse>? = null

  private fun descriptorFor(`data`: Array<String>): DescriptorProtos.FileDescriptorProto {
    val str = data.fold(java.lang.StringBuilder()) { b, s -> b.append(s) }.toString()
    val bytes = java.util.Base64.getDecoder().decode(str)
    return DescriptorProtos.FileDescriptorProto.parseFrom(bytes)
  }

  private fun fileDescriptor(path: String, visited: Set<String>): Descriptors.FileDescriptor {
    val proto = descriptorMap[path]!!
    val deps = proto.dependencyList.filter { !visited.contains(it) }.map { fileDescriptor(it,
        visited + path) }
    return Descriptors.FileDescriptor.buildFrom(proto, deps.toTypedArray())
  }

  public fun getServiceDescriptor(): ServiceDescriptor? {
    var result = serviceDescriptor
    if (result == null) {
      synchronized(VerbServiceWireGrpc::class) {
        result = serviceDescriptor
        if (result == null) {
          result = newBuilder(SERVICE_NAME)
          .addMethod(getPingMethod())
          .addMethod(getCallMethod())
          .setSchemaDescriptor(io.grpc.protobuf.ProtoFileDescriptorSupplier {
                fileDescriptor("xyz/block/ftl/v1/ftl.proto", emptySet())
              })
          .build()
          serviceDescriptor = result
        }
      }
    }
    return result
  }

  public fun getPingMethod(): MethodDescriptor<PingRequest, PingResponse> {
    var result: MethodDescriptor<PingRequest, PingResponse>? = getPingMethod
    if (result == null) {
      synchronized(VerbServiceWireGrpc::class) {
        result = getPingMethod
        if (result == null) {
          getPingMethod = MethodDescriptor.newBuilder<PingRequest, PingResponse>()
            .setType(MethodDescriptor.MethodType.UNARY)
            .setFullMethodName(
              MethodDescriptor.generateFullMethodName(
                "xyz.block.ftl.v1.VerbService", "Ping"
              )
            )
            .setSampledToLocalTracing(true)
            .setRequestMarshaller(VerbServiceImplBase.PingRequestMarshaller())
            .setResponseMarshaller(VerbServiceImplBase.PingResponseMarshaller())
            .build()
        }
      }
    }
    return getPingMethod!!
  }

  public fun getCallMethod(): MethodDescriptor<CallRequest, CallResponse> {
    var result: MethodDescriptor<CallRequest, CallResponse>? = getCallMethod
    if (result == null) {
      synchronized(VerbServiceWireGrpc::class) {
        result = getCallMethod
        if (result == null) {
          getCallMethod = MethodDescriptor.newBuilder<CallRequest, CallResponse>()
            .setType(MethodDescriptor.MethodType.UNARY)
            .setFullMethodName(
              MethodDescriptor.generateFullMethodName(
                "xyz.block.ftl.v1.VerbService", "Call"
              )
            )
            .setSampledToLocalTracing(true)
            .setRequestMarshaller(VerbServiceImplBase.CallRequestMarshaller())
            .setResponseMarshaller(VerbServiceImplBase.CallResponseMarshaller())
            .build()
        }
      }
    }
    return getCallMethod!!
  }

  public fun newStub(channel: Channel): VerbServiceStub = VerbServiceStub(channel)

  public fun newBlockingStub(channel: Channel): VerbServiceBlockingStub =
      VerbServiceBlockingStub(channel)

  public abstract class VerbServiceImplBase : WireBindableService {
    public open fun Ping(request: PingRequest, response: StreamObserver<PingResponse>): Unit = throw
        UnsupportedOperationException()

    public open fun Call(request: CallRequest, response: StreamObserver<CallResponse>): Unit = throw
        UnsupportedOperationException()

    public override fun bindService(): ServerServiceDefinition =
        ServerServiceDefinition.builder(getServiceDescriptor()).addMethod(
              getPingMethod(),
              asyncUnaryCall(this@VerbServiceImplBase::Ping)
            ).addMethod(
              getCallMethod(),
              asyncUnaryCall(this@VerbServiceImplBase::Call)
            ).build()

    public class PingRequestMarshaller : WireMethodMarshaller<PingRequest> {
      public override fun stream(`value`: PingRequest): InputStream =
          PingRequest.ADAPTER.encode(value).inputStream()

      public override fun marshalledClass(): Class<PingRequest> = PingRequest::class.java

      public override fun parse(stream: InputStream): PingRequest =
          PingRequest.ADAPTER.decode(stream)
    }

    public class PingResponseMarshaller : WireMethodMarshaller<PingResponse> {
      public override fun stream(`value`: PingResponse): InputStream =
          PingResponse.ADAPTER.encode(value).inputStream()

      public override fun marshalledClass(): Class<PingResponse> = PingResponse::class.java

      public override fun parse(stream: InputStream): PingResponse =
          PingResponse.ADAPTER.decode(stream)
    }

    public class CallRequestMarshaller : WireMethodMarshaller<CallRequest> {
      public override fun stream(`value`: CallRequest): InputStream =
          CallRequest.ADAPTER.encode(value).inputStream()

      public override fun marshalledClass(): Class<CallRequest> = CallRequest::class.java

      public override fun parse(stream: InputStream): CallRequest =
          CallRequest.ADAPTER.decode(stream)
    }

    public class CallResponseMarshaller : WireMethodMarshaller<CallResponse> {
      public override fun stream(`value`: CallResponse): InputStream =
          CallResponse.ADAPTER.encode(value).inputStream()

      public override fun marshalledClass(): Class<CallResponse> = CallResponse::class.java

      public override fun parse(stream: InputStream): CallResponse =
          CallResponse.ADAPTER.decode(stream)
    }
  }

  public class BindableAdapter(
    private val streamExecutor: ExecutorService,
    private val service: () -> VerbServiceBlockingServer,
  ) : VerbServiceImplBase() {
    public override fun Ping(request: PingRequest, response: StreamObserver<PingResponse>): Unit {
      response.onNext(service().Ping(request))
      response.onCompleted()
    }

    public override fun Call(request: CallRequest, response: StreamObserver<CallResponse>): Unit {
      response.onNext(service().Call(request))
      response.onCompleted()
    }
  }

  public class VerbServiceStub : AbstractStub<VerbServiceStub> {
    internal constructor(channel: Channel) : super(channel)

    internal constructor(channel: Channel, callOptions: CallOptions) : super(channel, callOptions)

    public override fun build(channel: Channel, callOptions: CallOptions) = VerbServiceStub(channel,
        callOptions)

    public fun Ping(request: PingRequest, response: StreamObserver<PingResponse>): Unit {
      ClientCalls.asyncUnaryCall(channel.newCall(getPingMethod(), callOptions), request, response)
    }

    public fun Call(request: CallRequest, response: StreamObserver<CallResponse>): Unit {
      ClientCalls.asyncUnaryCall(channel.newCall(getCallMethod(), callOptions), request, response)
    }
  }

  public class VerbServiceBlockingStub : AbstractStub<VerbServiceStub> {
    internal constructor(channel: Channel) : super(channel)

    internal constructor(channel: Channel, callOptions: CallOptions) : super(channel, callOptions)

    public override fun build(channel: Channel, callOptions: CallOptions) = VerbServiceStub(channel,
        callOptions)

    public fun Ping(request: PingRequest): PingResponse = blockingUnaryCall(channel,
        getPingMethod(), callOptions, request)

    public fun Call(request: CallRequest): CallResponse = blockingUnaryCall(channel,
        getCallMethod(), callOptions, request)
  }
}
