package xyz.block.ftl.generator

import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import xyz.block.ftl.v1.schema.*
import xyz.block.ftl.v1.schema.Array
import xyz.block.ftl.v1.schema.Float
import xyz.block.ftl.v1.schema.Int
import xyz.block.ftl.v1.schema.Map
import xyz.block.ftl.v1.schema.String
import kotlin.test.assertEquals

class ModuleGeneratorTest {
  private lateinit var generator: ModuleGenerator

  @BeforeEach
  fun setUp() {
    generator = ModuleGenerator()
  }

  @Test
  fun `should generate basic module`() {
    val file = generator.generateModule(Module(name = "test"))
    val expected = """// Code generated by FTL-Generator, do not edit.
//
package ftl.test

import xyz.block.ftl.Ignore

@Ignore
public class TestModule()
"""
    assertEquals(expected, file.toString())
  }

  @Test
  fun `should generate all Types`() {
    val decls = listOf(
      Decl(
        data_ = Data(
          name = "ParamTestData",
          typeParameters = listOf(TypeParameter(name = "T")),
          fields = listOf(
            Field(name = "t", type = Type(dataRef = DataRef(name = "T"))),
          )
        )
      ),
      Decl(
        data_ = Data(
          comments = listOf("Response comments"), name = "TestResponse",
          fields = listOf(
            Field(name = "int", type = Type(int = Int())),
            Field(name = "float", type = Type(float = Float())),
            Field(name = "string", type = Type(string = String())),
            Field(name = "bytes", type = Type(bytes = Bytes())),
            Field(name = "bool", type = Type(bool = Bool())),
            Field(name = "time", type = Type(time = Time())),
            Field(name = "optional", type = Type(optional = Optional(type = Type(string = String())))),
            Field(name = "array", type = Type(array = Array(element = Type(string = String())))),
            Field(
              name = "nestedArray", type = Type(
                array = Array(element = Type(array = Array(element = Type(string = String()))))
              )
            ),
            Field(
              name = "dataRefArray", type = Type(
                array = Array(element = Type(dataRef = DataRef(name = "TestRequest", module = "test")))
              )
            ),
            Field(
              name = "map",
              type = Type(map = Map(key = Type(string = String()), value_ = Type(int = Int())))
            ),
            Field(
              name = "nestedMap", type = Type(
                map = Map(
                  key = Type(string = String()),
                  value_ = Type(map = Map(key = Type(string = String()), value_ = Type(int = Int())))
                )
              )
            ),
            Field(name = "dataRef", type = Type(dataRef = DataRef(name = "TestRequest"))),
            Field(name = "externalDataRef", type = Type(dataRef = DataRef(module = "other", name = "TestRequest"))),
            Field(name = "any", type = Type(any = xyz.block.ftl.v1.schema.Any())),
            Field(
              name = "parameterizedDataRef", type = Type(
                dataRef = DataRef(
                  name = "ParamTestData",
                  typeParameters = listOf(Type(dataRef = DataRef(name = "T")))
                )
              )
            ),
            Field(name = "withAlias", type = Type(string = String()), alias = "a"),
          )
        )
      ),
    )
    val module = Module(name = "test", comments = listOf("Module comments"), decls = decls)

    val file = generator.generateModule(module)
    val expected = """// Code generated by FTL-Generator, do not edit.
// Module comments
package ftl.test

import java.time.OffsetDateTime
import kotlin.Any
import kotlin.Boolean
import kotlin.ByteArray
import kotlin.Float
import kotlin.Long
import kotlin.String
import kotlin.collections.ArrayList
import kotlin.collections.Map
import xyz.block.ftl.Alias
import xyz.block.ftl.Ignore

public data class ParamTestData<T>(
  public val t: T,
)

/**
 * Response comments
 */
public data class TestResponse(
  public val int: Long,
  public val float: Float,
  public val string: String,
  public val bytes: ByteArray,
  public val bool: Boolean,
  public val time: OffsetDateTime,
  public val optional: String? = null,
  public val array: ArrayList<String>,
  public val nestedArray: ArrayList<ArrayList<String>>,
  public val dataRefArray: ArrayList<TestRequest>,
  public val map: Map<String, Long>,
  public val nestedMap: Map<String, Map<String, Long>>,
  public val dataRef: TestRequest,
  public val externalDataRef: ftl.other.TestRequest,
  public val any: Any,
  public val parameterizedDataRef: ParamTestData<T>,
  @Alias("a")
  public val withAlias: String,
)

@Ignore
public class TestModule()
"""
    assertEquals(expected, file.toString())
  }

  @Test
  fun `should generate all Verbs`() {
    val decls = listOf(
      Decl(
        verb = Verb(
          name = "TestVerb",
          comments = listOf("TestVerb comments"),
          request = Type(dataRef = DataRef(name = "Empty", module = "builtin")),
          response = Type(dataRef = DataRef(name = "Empty", module = "builtin"))
        )
      ),
      Decl(
        verb = Verb(
          name = "TestIngressVerb",
          comments = listOf("TestIngressVerb comments"),
          request = Type(dataRef = DataRef(name = "Empty", module = "builtin")),
          response = Type(dataRef = DataRef(name = "Empty", module = "builtin")),
          metadata = listOf(
            Metadata(
              ingress = MetadataIngress(
                type = "http",
                path = listOf(IngressPathComponent(ingressPathLiteral = IngressPathLiteral(text = "test"))),
                method = "GET"
              )
            ),
          )
        )
      ),
    )
    val module = Module(name = "test", comments = listOf("Module comments"), decls = decls)
    val file = generator.generateModule(module)
    val expected = """// Code generated by FTL-Generator, do not edit.
// Module comments
package ftl.test

import ftl.builtin.Empty
import xyz.block.ftl.Context
import xyz.block.ftl.HttpIngress
import xyz.block.ftl.Ignore
import xyz.block.ftl.Method.GET
import xyz.block.ftl.Verb

@Ignore
public class TestModule() {
  /**
   * TestVerb comments
   */
  @Verb
  public fun TestVerb(context: Context, req: Empty): Empty = throw
      NotImplementedError("Verb stubs should not be called directly, instead use context.call(TestModule::TestVerb, ...)")

  /**
   * TestIngressVerb comments
   */
  @Verb
  @HttpIngress(
    GET,
    "/test",
  )
  public fun TestIngressVerb(context: Context, req: Empty): Empty = throw
      NotImplementedError("Verb stubs should not be called directly, instead use context.call(TestModule::TestIngressVerb, ...)")
}
"""
    assertEquals(expected, file.toString())
  }

  @Test
  fun `builtins are handled correctly`() {
    val decls = listOf(
      Decl(
        data_ = Data(
          comments = listOf("HTTP request structure used for HTTP ingress verbs."),
          name = "HttpRequest",
          fields = listOf(
            Field(name = "method", type = Type(string = String())),
            Field(name = "path", type = Type(string = String())),
            Field(
              name = "pathParameters",
              type = Type(map = Map(key = Type(string = String()), value_ = Type(string = String())))
            ),
            Field(
              name = "query",
              type = Type(
                map = Map(
                  key = Type(string = String()),
                  value_ = Type(array = Array(element = Type(string = String())))
                )
              )
            ),
            Field(
              name = "headers",
              type = Type(
                map = Map(
                  key = Type(string = String()),
                  value_ = Type(array = Array(element = Type(string = String())))
                )
              )
            ),
            Field(name = "body", type = Type(dataRef = DataRef(name = "Body")))
          ),
          typeParameters = listOf(TypeParameter(name = "Body"))
        )
      ),
      Decl(
        data_ = Data(
          comments = listOf("HTTP response structure used for HTTP ingress verbs."),
          name = "HttpResponse",
          fields = listOf(
            Field(name = "status", type = Type(int = Int())),
            Field(
              name = "headers",
              type = Type(
                map = Map(
                  key = Type(string = String()),
                  value_ = Type(array = Array(element = Type(string = String())))
                )
              )
            ),
            Field(name = "body", type = Type(dataRef = DataRef(name = "Body")))
          ),
          typeParameters = listOf(TypeParameter(name = "Body"))
        )
      ),
      Decl(data_ = Data(name = "Empty")),
    )
    val module = Module(name = "builtin", comments = listOf("Built-in types for FTL"), decls = decls)
    val file = generator.generateModule(module)
    val expected = """// Code generated by FTL-Generator, do not edit.
// Built-in types for FTL
package ftl.builtin

import kotlin.Long
import kotlin.String
import kotlin.collections.ArrayList
import kotlin.collections.Map
import xyz.block.ftl.Ignore

/**
 * HTTP request structure used for HTTP ingress verbs.
 */
public data class HttpRequest<Body>(
  public val method: String,
  public val path: String,
  public val pathParameters: Map<String, String>,
  public val query: Map<String, ArrayList<String>>,
  public val headers: Map<String, ArrayList<String>>,
  public val body: Body,
)

/**
 * HTTP response structure used for HTTP ingress verbs.
 */
public data class HttpResponse<Body>(
  public val status: Long,
  public val headers: Map<String, ArrayList<String>>,
  public val body: Body,
)

public class Empty

@Ignore
public class BuiltinModule()
"""
    assertEquals(expected, file.toString())
  }
}
