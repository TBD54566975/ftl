package xyz.block.ftl.gradle

import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import xyz.block.ftl.v1.PullSchemaResponse
import xyz.block.ftl.v1.schema.Array
import xyz.block.ftl.v1.schema.Bool
import xyz.block.ftl.v1.schema.Data
import xyz.block.ftl.v1.schema.DataRef
import xyz.block.ftl.v1.schema.Decl
import xyz.block.ftl.v1.schema.Field
import xyz.block.ftl.v1.schema.Float
import xyz.block.ftl.v1.schema.Int
import xyz.block.ftl.v1.schema.Map
import xyz.block.ftl.v1.schema.Metadata
import xyz.block.ftl.v1.schema.MetadataIngress
import xyz.block.ftl.v1.schema.Module
import xyz.block.ftl.v1.schema.Schema
import xyz.block.ftl.v1.schema.String
import xyz.block.ftl.v1.schema.Time
import xyz.block.ftl.v1.schema.Type
import xyz.block.ftl.v1.schema.Verb
import xyz.block.ftl.v1.schema.VerbRef
import kotlin.test.assertEquals

class ModuleGeneratorTest {
  private lateinit var generator: ModuleGenerator

  @BeforeEach
  fun setUp() {
    generator = ModuleGenerator()
  }

  @Test
  fun `should generate basic module`() {
    val response = PullSchemaResponse(module_name = "test")
    val file = generator.generateModule(response)
    val expected = """// Code generated by FTL-Plugin, do not edit.
package ftl.test

import xyz.block.ftl.Ignore

@Ignore
public class Test()
"""
    assertEquals(expected, file.toString())
  }

  @Test
  fun `should generate all Types`() {
    val decls = listOf(
      Decl(data_ = Data(comments = listOf("Request comments"), name = "TestRequest")),
      Decl(
        data_ = Data(
          comments = listOf("Response comments"), name = "TestResponse", fields = listOf(
          Field(name = "int", type = Type(int = Int())),
          Field(name = "float", type = Type(float = Float())),
          Field(name = "string", type = Type(string = String())),
          Field(name = "bool", type = Type(bool = Bool())),
          Field(name = "time", type = Type(time = Time())),
          Field(name = "array", type = Type(array = Array(element = Type(string = String())))),
          Field(
            name = "nestedArray", type = Type(
            array = Array(element = Type(array = Array(element = Type(string = String()))))
          )
          ),
          Field(
            name = "map",
            type = Type(map = Map(key = Type(string = String()), value_ = Type(int = Int())))
          ),
          Field(
            name = "nestedMap", type = Type(
            map = Map(
              key = Type(string = String()),
              value_ = Type(map = Map(key = Type(string = String()), value_ = Type(int = Int())))
            )
          )
          ),
          Field(name = "verbRef", type = Type(verbRef = VerbRef())),
          Field(name = "dataRef", type = Type(dataRef = DataRef())),
        )
        )
      ),
    )
    val module = Module(comments = listOf("Module comments"), decls = decls)

    val response = PullSchemaResponse(module_name = "test", schema = module)
    val file = generator.generateModule(response)
    val expected = """// Code generated by FTL-Plugin, do not edit.
// Module comments
package ftl.test

import kotlin.Boolean
import kotlin.Float
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.collections.ArrayList
import kotlin.collections.Map
import kotlinx.Instant
import xyz.block.ftl.Ignore
import xyz.block.ftl.v1.schema.DataRef
import xyz.block.ftl.v1.schema.VerbRef

/**
 * Request comments
 */
public data class TestRequest(
  public val _empty: Unit = Unit,
)

/**
 * Response comments
 */
public data class TestResponse(
  public val int: Long,
  public val float: Float,
  public val string: String,
  public val bool: Boolean,
  public val time: Instant,
  public val array: ArrayList<String>,
  public val nestedArray: ArrayList<ArrayList<String>>,
  public val map: Map<String, Long>,
  public val nestedMap: Map<String, Map<String, Long>>,
  public val verbRef: VerbRef,
  public val dataRef: DataRef,
)

@Ignore
public class Test()
"""
    assertEquals(expected, file.toString())
  }

  @Test
  fun `should generate all Verbs`() {
    val decls = listOf(
      Decl(data_ = Data(comments = listOf("Request comments"), name = "TestRequest")),
      Decl(data_ = Data(comments = listOf("Response comments"), name = "TestResponse")),
      Decl(
        verb = Verb(
          name = "TestVerb",
          comments = listOf("TestVerb comments"),
          request = DataRef(name = "TestRequest"),
          response = DataRef(name = "TestResponse")
        )
      ),
      Decl(
        verb = Verb(
          name = "TestIngressVerb",
          comments = listOf("TestIngressVerb comments"),
          request = DataRef(name = "TestRequest"),
          response = DataRef(name = "TestResponse"),
          metadata = listOf(
            Metadata(ingress = MetadataIngress(path = "/test", method = "GET")),
          )
        )
      ),
    )
    val module = Module(comments = listOf("Module comments"), decls = decls)
    val response = PullSchemaResponse(module_name = "test", schema = module)
    val file = generator.generateModule(response)
    val expected = """// Code generated by FTL-Plugin, do not edit.
// Module comments
package ftl.test

import kotlin.Unit
import xyz.block.ftl.Context
import xyz.block.ftl.Ignore
import xyz.block.ftl.Ingress
import xyz.block.ftl.Method.GET
import xyz.block.ftl.Verb

/**
 * Request comments
 */
public data class TestRequest(
  public val _empty: Unit = Unit,
)

/**
 * Response comments
 */
public data class TestResponse(
  public val _empty: Unit = Unit,
)

@Ignore
public class Test() {
  /**
   * TestVerb comments
   */
  @Verb
  public fun TestVerb(context: Context, req: TestRequest): TestResponse = throw
      NotImplementedError("Verb stubs should not be called directly, instead use context.call(Test::TestVerb, ...)")

  /**
   * TestIngressVerb comments
   */
  @Verb
  @Ingress(
    GET,
    "/test",
  )
  public fun TestIngressVerb(context: Context, req: TestRequest): TestResponse = throw
      NotImplementedError("Verb stubs should not be called directly, instead use context.call(Test::TestIngressVerb, ...)")
}
"""
    assertEquals(expected, file.toString())
  }
}
