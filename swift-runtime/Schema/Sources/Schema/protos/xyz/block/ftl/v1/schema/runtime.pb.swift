// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: backend/protos/xyz/block/ftl/v1/schema/runtime.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Xyz_Block_Ftl_V1_Schema_Status: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case offline // = 0
  case starting // = 1
  case online // = 2
  case stopping // = 3
  case stopped // = 4
  case errored // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .offline
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .offline
    case 1: self = .starting
    case 2: self = .online
    case 3: self = .stopping
    case 4: self = .stopped
    case 5: self = .errored
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .offline: return 0
    case .starting: return 1
    case .online: return 2
    case .stopping: return 3
    case .stopped: return 4
    case .errored: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Xyz_Block_Ftl_V1_Schema_Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Xyz_Block_Ftl_V1_Schema_Status] = [
    .offline,
    .starting,
    .online,
    .stopping,
    .stopped,
    .errored,
  ]
}

#endif  // swift(>=4.2)

struct Xyz_Block_Ftl_V1_Schema_ModuleRuntime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  mutating func clearCreateTime() {self._createTime = nil}

  var language: String = String()

  var minReplicas: Int32 = 0

  /// OS the module was built for. If empty, the module is OS-agnostic.
  var os: String {
    get {return _os ?? String()}
    set {_os = newValue}
  }
  /// Returns true if `os` has been explicitly set.
  var hasOs: Bool {return self._os != nil}
  /// Clears the value of `os`. Subsequent reads from it will return its default value.
  mutating func clearOs() {self._os = nil}

  /// CPU architecture the module was built for. If empty, the module is CPU-agnostic.
  var arch: String {
    get {return _arch ?? String()}
    set {_arch = newValue}
  }
  /// Returns true if `arch` has been explicitly set.
  var hasArch: Bool {return self._arch != nil}
  /// Clears the value of `arch`. Subsequent reads from it will return its default value.
  mutating func clearArch() {self._arch = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _os: String? = nil
  fileprivate var _arch: String? = nil
}

struct Xyz_Block_Ftl_V1_Schema_VerbRuntime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  mutating func clearCreateTime() {self._createTime = nil}

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var status: Xyz_Block_Ftl_V1_Schema_Status = .offline

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xyz_Block_Ftl_V1_Schema_Status: @unchecked Sendable {}
extension Xyz_Block_Ftl_V1_Schema_ModuleRuntime: @unchecked Sendable {}
extension Xyz_Block_Ftl_V1_Schema_VerbRuntime: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xyz.block.ftl.v1.schema"

extension Xyz_Block_Ftl_V1_Schema_Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OFFLINE"),
    1: .same(proto: "STARTING"),
    2: .same(proto: "ONLINE"),
    3: .same(proto: "STOPPING"),
    4: .same(proto: "STOPPED"),
    5: .same(proto: "ERRORED"),
  ]
}

extension Xyz_Block_Ftl_V1_Schema_ModuleRuntime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleRuntime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "create_time"),
    2: .same(proto: "language"),
    3: .standard(proto: "min_replicas"),
    4: .same(proto: "os"),
    5: .same(proto: "arch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.language) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.minReplicas) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._os) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._arch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.language.isEmpty {
      try visitor.visitSingularStringField(value: self.language, fieldNumber: 2)
    }
    if self.minReplicas != 0 {
      try visitor.visitSingularInt32Field(value: self.minReplicas, fieldNumber: 3)
    }
    try { if let v = self._os {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._arch {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Xyz_Block_Ftl_V1_Schema_ModuleRuntime, rhs: Xyz_Block_Ftl_V1_Schema_ModuleRuntime) -> Bool {
    if lhs._createTime != rhs._createTime {return false}
    if lhs.language != rhs.language {return false}
    if lhs.minReplicas != rhs.minReplicas {return false}
    if lhs._os != rhs._os {return false}
    if lhs._arch != rhs._arch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xyz_Block_Ftl_V1_Schema_VerbRuntime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerbRuntime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "create_time"),
    2: .standard(proto: "start_time"),
    3: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.status != .offline {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Xyz_Block_Ftl_V1_Schema_VerbRuntime, rhs: Xyz_Block_Ftl_V1_Schema_VerbRuntime) -> Bool {
    if lhs._createTime != rhs._createTime {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
