//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: xyz/block/ftl/v1/ftl.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// VerbService is a common interface shared by multiple services for calling Verbs.
///
/// Usage: instantiate `Xyz_Block_Ftl_V1_VerbServiceClient`, then call methods of this protocol to make API calls.
public protocol Xyz_Block_Ftl_V1_VerbServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>

  func getModuleContext(
    _ request: Xyz_Block_Ftl_V1_ModuleContextRequest,
    callOptions: CallOptions?,
    handler: @escaping (Xyz_Block_Ftl_V1_ModuleContextResponse) -> Void
  ) -> ServerStreamingCall<Xyz_Block_Ftl_V1_ModuleContextRequest, Xyz_Block_Ftl_V1_ModuleContextResponse>

  func acquireLease(
    callOptions: CallOptions?,
    handler: @escaping (Xyz_Block_Ftl_V1_AcquireLeaseResponse) -> Void
  ) -> BidirectionalStreamingCall<Xyz_Block_Ftl_V1_AcquireLeaseRequest, Xyz_Block_Ftl_V1_AcquireLeaseResponse>

  func sendFSMEvent(
    _ request: Xyz_Block_Ftl_V1_SendFSMEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_SendFSMEventRequest, Xyz_Block_Ftl_V1_SendFSMEventResponse>

  func publishEvent(
    _ request: Xyz_Block_Ftl_V1_PublishEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PublishEventRequest, Xyz_Block_Ftl_V1_PublishEventResponse>

  func call(
    _ request: Xyz_Block_Ftl_V1_CallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_CallRequest, Xyz_Block_Ftl_V1_CallResponse>
}

extension Xyz_Block_Ftl_V1_VerbServiceClientProtocol {
  public var serviceName: String {
    return "xyz.block.ftl.v1.VerbService"
  }

  /// Ping service for readiness.
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  /// Get configuration state for the module
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModuleContext.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getModuleContext(
    _ request: Xyz_Block_Ftl_V1_ModuleContextRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Xyz_Block_Ftl_V1_ModuleContextResponse) -> Void
  ) -> ServerStreamingCall<Xyz_Block_Ftl_V1_ModuleContextRequest, Xyz_Block_Ftl_V1_ModuleContextResponse> {
    return self.makeServerStreamingCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.getModuleContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleContextInterceptors() ?? [],
      handler: handler
    )
  }

  /// Acquire (and renew) a lease for a deployment.
  ///
  /// Returns ResourceExhausted if the lease is held.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func acquireLease(
    callOptions: CallOptions? = nil,
    handler: @escaping (Xyz_Block_Ftl_V1_AcquireLeaseResponse) -> Void
  ) -> BidirectionalStreamingCall<Xyz_Block_Ftl_V1_AcquireLeaseRequest, Xyz_Block_Ftl_V1_AcquireLeaseResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.acquireLease.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcquireLeaseInterceptors() ?? [],
      handler: handler
    )
  }

  /// Send an event to an FSM.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendFSMEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendFSMEvent(
    _ request: Xyz_Block_Ftl_V1_SendFSMEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_SendFSMEventRequest, Xyz_Block_Ftl_V1_SendFSMEventResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.sendFSMEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendFSMEventInterceptors() ?? []
    )
  }

  /// Publish an event to a topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to PublishEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func publishEvent(
    _ request: Xyz_Block_Ftl_V1_PublishEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PublishEventRequest, Xyz_Block_Ftl_V1_PublishEventResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.publishEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishEventInterceptors() ?? []
    )
  }

  /// Issue a synchronous call to a Verb.
  ///
  /// - Parameters:
  ///   - request: Request to send to Call.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func call(
    _ request: Xyz_Block_Ftl_V1_CallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_CallRequest, Xyz_Block_Ftl_V1_CallResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.call.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Xyz_Block_Ftl_V1_VerbServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Xyz_Block_Ftl_V1_VerbServiceNIOClient")
public final class Xyz_Block_Ftl_V1_VerbServiceClient: Xyz_Block_Ftl_V1_VerbServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the xyz.block.ftl.v1.VerbService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Xyz_Block_Ftl_V1_VerbServiceNIOClient: Xyz_Block_Ftl_V1_VerbServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the xyz.block.ftl.v1.VerbService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// VerbService is a common interface shared by multiple services for calling Verbs.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xyz_Block_Ftl_V1_VerbServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>

  func makeGetModuleContextCall(
    _ request: Xyz_Block_Ftl_V1_ModuleContextRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Xyz_Block_Ftl_V1_ModuleContextRequest, Xyz_Block_Ftl_V1_ModuleContextResponse>

  func makeAcquireLeaseCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Xyz_Block_Ftl_V1_AcquireLeaseRequest, Xyz_Block_Ftl_V1_AcquireLeaseResponse>

  func makeSendFsmeventCall(
    _ request: Xyz_Block_Ftl_V1_SendFSMEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_SendFSMEventRequest, Xyz_Block_Ftl_V1_SendFSMEventResponse>

  func makePublishEventCall(
    _ request: Xyz_Block_Ftl_V1_PublishEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PublishEventRequest, Xyz_Block_Ftl_V1_PublishEventResponse>

  func makeCallCall(
    _ request: Xyz_Block_Ftl_V1_CallRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_CallRequest, Xyz_Block_Ftl_V1_CallResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_VerbServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xyz_Block_Ftl_V1_VerbServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func makeGetModuleContextCall(
    _ request: Xyz_Block_Ftl_V1_ModuleContextRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Xyz_Block_Ftl_V1_ModuleContextRequest, Xyz_Block_Ftl_V1_ModuleContextResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.getModuleContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleContextInterceptors() ?? []
    )
  }

  public func makeAcquireLeaseCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Xyz_Block_Ftl_V1_AcquireLeaseRequest, Xyz_Block_Ftl_V1_AcquireLeaseResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.acquireLease.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcquireLeaseInterceptors() ?? []
    )
  }

  public func makeSendFsmeventCall(
    _ request: Xyz_Block_Ftl_V1_SendFSMEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_SendFSMEventRequest, Xyz_Block_Ftl_V1_SendFSMEventResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.sendFSMEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendFSMEventInterceptors() ?? []
    )
  }

  public func makePublishEventCall(
    _ request: Xyz_Block_Ftl_V1_PublishEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PublishEventRequest, Xyz_Block_Ftl_V1_PublishEventResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.publishEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishEventInterceptors() ?? []
    )
  }

  public func makeCallCall(
    _ request: Xyz_Block_Ftl_V1_CallRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_CallRequest, Xyz_Block_Ftl_V1_CallResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.call.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_VerbServiceAsyncClientProtocol {
  public func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_PingResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func getModuleContext(
    _ request: Xyz_Block_Ftl_V1_ModuleContextRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xyz_Block_Ftl_V1_ModuleContextResponse> {
    return self.performAsyncServerStreamingCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.getModuleContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleContextInterceptors() ?? []
    )
  }

  public func acquireLease<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xyz_Block_Ftl_V1_AcquireLeaseResponse> where RequestStream: Sequence, RequestStream.Element == Xyz_Block_Ftl_V1_AcquireLeaseRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.acquireLease.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcquireLeaseInterceptors() ?? []
    )
  }

  public func acquireLease<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xyz_Block_Ftl_V1_AcquireLeaseResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Xyz_Block_Ftl_V1_AcquireLeaseRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.acquireLease.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcquireLeaseInterceptors() ?? []
    )
  }

  public func sendFSMEvent(
    _ request: Xyz_Block_Ftl_V1_SendFSMEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_SendFSMEventResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.sendFSMEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendFSMEventInterceptors() ?? []
    )
  }

  public func publishEvent(
    _ request: Xyz_Block_Ftl_V1_PublishEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_PublishEventResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.publishEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishEventInterceptors() ?? []
    )
  }

  public func call(
    _ request: Xyz_Block_Ftl_V1_CallRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_CallResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.call.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Xyz_Block_Ftl_V1_VerbServiceAsyncClient: Xyz_Block_Ftl_V1_VerbServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Xyz_Block_Ftl_V1_VerbServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>]

  /// - Returns: Interceptors to use when invoking 'getModuleContext'.
  func makeGetModuleContextInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_ModuleContextRequest, Xyz_Block_Ftl_V1_ModuleContextResponse>]

  /// - Returns: Interceptors to use when invoking 'acquireLease'.
  func makeAcquireLeaseInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_AcquireLeaseRequest, Xyz_Block_Ftl_V1_AcquireLeaseResponse>]

  /// - Returns: Interceptors to use when invoking 'sendFSMEvent'.
  func makeSendFSMEventInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_SendFSMEventRequest, Xyz_Block_Ftl_V1_SendFSMEventResponse>]

  /// - Returns: Interceptors to use when invoking 'publishEvent'.
  func makePublishEventInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_PublishEventRequest, Xyz_Block_Ftl_V1_PublishEventResponse>]

  /// - Returns: Interceptors to use when invoking 'call'.
  func makeCallInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_CallRequest, Xyz_Block_Ftl_V1_CallResponse>]
}

public enum Xyz_Block_Ftl_V1_VerbServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VerbService",
    fullName: "xyz.block.ftl.v1.VerbService",
    methods: [
      Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.ping,
      Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.getModuleContext,
      Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.acquireLease,
      Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.sendFSMEvent,
      Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.publishEvent,
      Xyz_Block_Ftl_V1_VerbServiceClientMetadata.Methods.call,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/xyz.block.ftl.v1.VerbService/Ping",
      type: GRPCCallType.unary
    )

    public static let getModuleContext = GRPCMethodDescriptor(
      name: "GetModuleContext",
      path: "/xyz.block.ftl.v1.VerbService/GetModuleContext",
      type: GRPCCallType.serverStreaming
    )

    public static let acquireLease = GRPCMethodDescriptor(
      name: "AcquireLease",
      path: "/xyz.block.ftl.v1.VerbService/AcquireLease",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let sendFSMEvent = GRPCMethodDescriptor(
      name: "SendFSMEvent",
      path: "/xyz.block.ftl.v1.VerbService/SendFSMEvent",
      type: GRPCCallType.unary
    )

    public static let publishEvent = GRPCMethodDescriptor(
      name: "PublishEvent",
      path: "/xyz.block.ftl.v1.VerbService/PublishEvent",
      type: GRPCCallType.unary
    )

    public static let call = GRPCMethodDescriptor(
      name: "Call",
      path: "/xyz.block.ftl.v1.VerbService/Call",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Xyz_Block_Ftl_V1_ControllerServiceClient`, then call methods of this protocol to make API calls.
public protocol Xyz_Block_Ftl_V1_ControllerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>

  func processList(
    _ request: Xyz_Block_Ftl_V1_ProcessListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ProcessListRequest, Xyz_Block_Ftl_V1_ProcessListResponse>

  func status(
    _ request: Xyz_Block_Ftl_V1_StatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_StatusRequest, Xyz_Block_Ftl_V1_StatusResponse>

  func getArtefactDiffs(
    _ request: Xyz_Block_Ftl_V1_GetArtefactDiffsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetArtefactDiffsRequest, Xyz_Block_Ftl_V1_GetArtefactDiffsResponse>

  func uploadArtefact(
    _ request: Xyz_Block_Ftl_V1_UploadArtefactRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_UploadArtefactRequest, Xyz_Block_Ftl_V1_UploadArtefactResponse>

  func createDeployment(
    _ request: Xyz_Block_Ftl_V1_CreateDeploymentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_CreateDeploymentRequest, Xyz_Block_Ftl_V1_CreateDeploymentResponse>

  func getDeployment(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetDeploymentRequest, Xyz_Block_Ftl_V1_GetDeploymentResponse>

  func getDeploymentArtefacts(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse) -> Void
  ) -> ServerStreamingCall<Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest, Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse>

  func registerRunner(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Xyz_Block_Ftl_V1_RegisterRunnerRequest, Xyz_Block_Ftl_V1_RegisterRunnerResponse>

  func updateDeploy(
    _ request: Xyz_Block_Ftl_V1_UpdateDeployRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_UpdateDeployRequest, Xyz_Block_Ftl_V1_UpdateDeployResponse>

  func replaceDeploy(
    _ request: Xyz_Block_Ftl_V1_ReplaceDeployRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ReplaceDeployRequest, Xyz_Block_Ftl_V1_ReplaceDeployResponse>

  func streamDeploymentLogs(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest, Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse>

  func getSchema(
    _ request: Xyz_Block_Ftl_V1_GetSchemaRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetSchemaRequest, Xyz_Block_Ftl_V1_GetSchemaResponse>

  func pullSchema(
    _ request: Xyz_Block_Ftl_V1_PullSchemaRequest,
    callOptions: CallOptions?,
    handler: @escaping (Xyz_Block_Ftl_V1_PullSchemaResponse) -> Void
  ) -> ServerStreamingCall<Xyz_Block_Ftl_V1_PullSchemaRequest, Xyz_Block_Ftl_V1_PullSchemaResponse>
}

extension Xyz_Block_Ftl_V1_ControllerServiceClientProtocol {
  public var serviceName: String {
    return "xyz.block.ftl.v1.ControllerService"
  }

  /// Ping service for readiness.
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  /// List "processes" running on the cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProcessList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func processList(
    _ request: Xyz_Block_Ftl_V1_ProcessListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ProcessListRequest, Xyz_Block_Ftl_V1_ProcessListResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.processList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessListInterceptors() ?? []
    )
  }

  /// Unary call to Status
  ///
  /// - Parameters:
  ///   - request: Request to send to Status.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func status(
    _ request: Xyz_Block_Ftl_V1_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_StatusRequest, Xyz_Block_Ftl_V1_StatusResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.status.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  /// Get list of artefacts that differ between the server and client.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetArtefactDiffs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getArtefactDiffs(
    _ request: Xyz_Block_Ftl_V1_GetArtefactDiffsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetArtefactDiffsRequest, Xyz_Block_Ftl_V1_GetArtefactDiffsResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getArtefactDiffs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetArtefactDiffsInterceptors() ?? []
    )
  }

  /// Upload an artefact to the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to UploadArtefact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func uploadArtefact(
    _ request: Xyz_Block_Ftl_V1_UploadArtefactRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_UploadArtefactRequest, Xyz_Block_Ftl_V1_UploadArtefactResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.uploadArtefact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadArtefactInterceptors() ?? []
    )
  }

  /// Create a deployment.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createDeployment(
    _ request: Xyz_Block_Ftl_V1_CreateDeploymentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_CreateDeploymentRequest, Xyz_Block_Ftl_V1_CreateDeploymentResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.createDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? []
    )
  }

  /// Get the schema and artefact metadata for a deployment.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDeployment(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetDeploymentRequest, Xyz_Block_Ftl_V1_GetDeploymentResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeploymentInterceptors() ?? []
    )
  }

  /// Stream deployment artefacts from the server.
  ///
  /// Each artefact is streamed one after the other as a sequence of max 1MB
  /// chunks.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDeploymentArtefacts.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getDeploymentArtefacts(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse) -> Void
  ) -> ServerStreamingCall<Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest, Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse> {
    return self.makeServerStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getDeploymentArtefacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeploymentArtefactsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Register a Runner with the Controller.
  ///
  /// Each runner issue a RegisterRunnerRequest to the ControllerService
  /// every 10 seconds to maintain its heartbeat.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func registerRunner(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Xyz_Block_Ftl_V1_RegisterRunnerRequest, Xyz_Block_Ftl_V1_RegisterRunnerResponse> {
    return self.makeClientStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.registerRunner.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterRunnerInterceptors() ?? []
    )
  }

  /// Update an existing deployment.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDeploy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDeploy(
    _ request: Xyz_Block_Ftl_V1_UpdateDeployRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_UpdateDeployRequest, Xyz_Block_Ftl_V1_UpdateDeployResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.updateDeploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeployInterceptors() ?? []
    )
  }

  /// Gradually replace an existing deployment with a new one.
  ///
  /// If a deployment already exists for the module of the new deployment,
  /// it will be scaled down and replaced by the new one.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReplaceDeploy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func replaceDeploy(
    _ request: Xyz_Block_Ftl_V1_ReplaceDeployRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ReplaceDeployRequest, Xyz_Block_Ftl_V1_ReplaceDeployResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.replaceDeploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReplaceDeployInterceptors() ?? []
    )
  }

  /// Stream logs from a deployment
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func streamDeploymentLogs(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest, Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse> {
    return self.makeClientStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.streamDeploymentLogs.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamDeploymentLogsInterceptors() ?? []
    )
  }

  /// Get the full schema.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSchema.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSchema(
    _ request: Xyz_Block_Ftl_V1_GetSchemaRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetSchemaRequest, Xyz_Block_Ftl_V1_GetSchemaResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? []
    )
  }

  /// Pull schema changes from the Controller.
  ///
  /// Note that if there are no deployments this will block indefinitely, making it unsuitable for
  /// just retrieving the schema. Use GetSchema for that.
  ///
  /// - Parameters:
  ///   - request: Request to send to PullSchema.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func pullSchema(
    _ request: Xyz_Block_Ftl_V1_PullSchemaRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Xyz_Block_Ftl_V1_PullSchemaResponse) -> Void
  ) -> ServerStreamingCall<Xyz_Block_Ftl_V1_PullSchemaRequest, Xyz_Block_Ftl_V1_PullSchemaResponse> {
    return self.makeServerStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.pullSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullSchemaInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Xyz_Block_Ftl_V1_ControllerServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Xyz_Block_Ftl_V1_ControllerServiceNIOClient")
public final class Xyz_Block_Ftl_V1_ControllerServiceClient: Xyz_Block_Ftl_V1_ControllerServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the xyz.block.ftl.v1.ControllerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Xyz_Block_Ftl_V1_ControllerServiceNIOClient: Xyz_Block_Ftl_V1_ControllerServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the xyz.block.ftl.v1.ControllerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xyz_Block_Ftl_V1_ControllerServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>

  func makeProcessListCall(
    _ request: Xyz_Block_Ftl_V1_ProcessListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ProcessListRequest, Xyz_Block_Ftl_V1_ProcessListResponse>

  func makeStatusCall(
    _ request: Xyz_Block_Ftl_V1_StatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_StatusRequest, Xyz_Block_Ftl_V1_StatusResponse>

  func makeGetArtefactDiffsCall(
    _ request: Xyz_Block_Ftl_V1_GetArtefactDiffsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetArtefactDiffsRequest, Xyz_Block_Ftl_V1_GetArtefactDiffsResponse>

  func makeUploadArtefactCall(
    _ request: Xyz_Block_Ftl_V1_UploadArtefactRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_UploadArtefactRequest, Xyz_Block_Ftl_V1_UploadArtefactResponse>

  func makeCreateDeploymentCall(
    _ request: Xyz_Block_Ftl_V1_CreateDeploymentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_CreateDeploymentRequest, Xyz_Block_Ftl_V1_CreateDeploymentResponse>

  func makeGetDeploymentCall(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetDeploymentRequest, Xyz_Block_Ftl_V1_GetDeploymentResponse>

  func makeGetDeploymentArtefactsCall(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest, Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse>

  func makeRegisterRunnerCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Xyz_Block_Ftl_V1_RegisterRunnerRequest, Xyz_Block_Ftl_V1_RegisterRunnerResponse>

  func makeUpdateDeployCall(
    _ request: Xyz_Block_Ftl_V1_UpdateDeployRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_UpdateDeployRequest, Xyz_Block_Ftl_V1_UpdateDeployResponse>

  func makeReplaceDeployCall(
    _ request: Xyz_Block_Ftl_V1_ReplaceDeployRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ReplaceDeployRequest, Xyz_Block_Ftl_V1_ReplaceDeployResponse>

  func makeStreamDeploymentLogsCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest, Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse>

  func makeGetSchemaCall(
    _ request: Xyz_Block_Ftl_V1_GetSchemaRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetSchemaRequest, Xyz_Block_Ftl_V1_GetSchemaResponse>

  func makePullSchemaCall(
    _ request: Xyz_Block_Ftl_V1_PullSchemaRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Xyz_Block_Ftl_V1_PullSchemaRequest, Xyz_Block_Ftl_V1_PullSchemaResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_ControllerServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func makeProcessListCall(
    _ request: Xyz_Block_Ftl_V1_ProcessListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ProcessListRequest, Xyz_Block_Ftl_V1_ProcessListResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.processList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessListInterceptors() ?? []
    )
  }

  public func makeStatusCall(
    _ request: Xyz_Block_Ftl_V1_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_StatusRequest, Xyz_Block_Ftl_V1_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.status.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  public func makeGetArtefactDiffsCall(
    _ request: Xyz_Block_Ftl_V1_GetArtefactDiffsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetArtefactDiffsRequest, Xyz_Block_Ftl_V1_GetArtefactDiffsResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getArtefactDiffs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetArtefactDiffsInterceptors() ?? []
    )
  }

  public func makeUploadArtefactCall(
    _ request: Xyz_Block_Ftl_V1_UploadArtefactRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_UploadArtefactRequest, Xyz_Block_Ftl_V1_UploadArtefactResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.uploadArtefact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadArtefactInterceptors() ?? []
    )
  }

  public func makeCreateDeploymentCall(
    _ request: Xyz_Block_Ftl_V1_CreateDeploymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_CreateDeploymentRequest, Xyz_Block_Ftl_V1_CreateDeploymentResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.createDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? []
    )
  }

  public func makeGetDeploymentCall(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetDeploymentRequest, Xyz_Block_Ftl_V1_GetDeploymentResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeploymentInterceptors() ?? []
    )
  }

  public func makeGetDeploymentArtefactsCall(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest, Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getDeploymentArtefacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeploymentArtefactsInterceptors() ?? []
    )
  }

  public func makeRegisterRunnerCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Xyz_Block_Ftl_V1_RegisterRunnerRequest, Xyz_Block_Ftl_V1_RegisterRunnerResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.registerRunner.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterRunnerInterceptors() ?? []
    )
  }

  public func makeUpdateDeployCall(
    _ request: Xyz_Block_Ftl_V1_UpdateDeployRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_UpdateDeployRequest, Xyz_Block_Ftl_V1_UpdateDeployResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.updateDeploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeployInterceptors() ?? []
    )
  }

  public func makeReplaceDeployCall(
    _ request: Xyz_Block_Ftl_V1_ReplaceDeployRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ReplaceDeployRequest, Xyz_Block_Ftl_V1_ReplaceDeployResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.replaceDeploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReplaceDeployInterceptors() ?? []
    )
  }

  public func makeStreamDeploymentLogsCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest, Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.streamDeploymentLogs.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamDeploymentLogsInterceptors() ?? []
    )
  }

  public func makeGetSchemaCall(
    _ request: Xyz_Block_Ftl_V1_GetSchemaRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetSchemaRequest, Xyz_Block_Ftl_V1_GetSchemaResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? []
    )
  }

  public func makePullSchemaCall(
    _ request: Xyz_Block_Ftl_V1_PullSchemaRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Xyz_Block_Ftl_V1_PullSchemaRequest, Xyz_Block_Ftl_V1_PullSchemaResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.pullSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullSchemaInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_ControllerServiceAsyncClientProtocol {
  public func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_PingResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func processList(
    _ request: Xyz_Block_Ftl_V1_ProcessListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_ProcessListResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.processList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessListInterceptors() ?? []
    )
  }

  public func status(
    _ request: Xyz_Block_Ftl_V1_StatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.status.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  public func getArtefactDiffs(
    _ request: Xyz_Block_Ftl_V1_GetArtefactDiffsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_GetArtefactDiffsResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getArtefactDiffs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetArtefactDiffsInterceptors() ?? []
    )
  }

  public func uploadArtefact(
    _ request: Xyz_Block_Ftl_V1_UploadArtefactRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_UploadArtefactResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.uploadArtefact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadArtefactInterceptors() ?? []
    )
  }

  public func createDeployment(
    _ request: Xyz_Block_Ftl_V1_CreateDeploymentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_CreateDeploymentResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.createDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? []
    )
  }

  public func getDeployment(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_GetDeploymentResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeploymentInterceptors() ?? []
    )
  }

  public func getDeploymentArtefacts(
    _ request: Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse> {
    return self.performAsyncServerStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getDeploymentArtefacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDeploymentArtefactsInterceptors() ?? []
    )
  }

  public func registerRunner<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_RegisterRunnerResponse where RequestStream: Sequence, RequestStream.Element == Xyz_Block_Ftl_V1_RegisterRunnerRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.registerRunner.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterRunnerInterceptors() ?? []
    )
  }

  public func registerRunner<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_RegisterRunnerResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Xyz_Block_Ftl_V1_RegisterRunnerRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.registerRunner.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterRunnerInterceptors() ?? []
    )
  }

  public func updateDeploy(
    _ request: Xyz_Block_Ftl_V1_UpdateDeployRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_UpdateDeployResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.updateDeploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeployInterceptors() ?? []
    )
  }

  public func replaceDeploy(
    _ request: Xyz_Block_Ftl_V1_ReplaceDeployRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_ReplaceDeployResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.replaceDeploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReplaceDeployInterceptors() ?? []
    )
  }

  public func streamDeploymentLogs<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse where RequestStream: Sequence, RequestStream.Element == Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.streamDeploymentLogs.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamDeploymentLogsInterceptors() ?? []
    )
  }

  public func streamDeploymentLogs<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.streamDeploymentLogs.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamDeploymentLogsInterceptors() ?? []
    )
  }

  public func getSchema(
    _ request: Xyz_Block_Ftl_V1_GetSchemaRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_GetSchemaResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? []
    )
  }

  public func pullSchema(
    _ request: Xyz_Block_Ftl_V1_PullSchemaRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xyz_Block_Ftl_V1_PullSchemaResponse> {
    return self.performAsyncServerStreamingCall(
      path: Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.pullSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullSchemaInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Xyz_Block_Ftl_V1_ControllerServiceAsyncClient: Xyz_Block_Ftl_V1_ControllerServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Xyz_Block_Ftl_V1_ControllerServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>]

  /// - Returns: Interceptors to use when invoking 'processList'.
  func makeProcessListInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_ProcessListRequest, Xyz_Block_Ftl_V1_ProcessListResponse>]

  /// - Returns: Interceptors to use when invoking 'status'.
  func makeStatusInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_StatusRequest, Xyz_Block_Ftl_V1_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getArtefactDiffs'.
  func makeGetArtefactDiffsInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_GetArtefactDiffsRequest, Xyz_Block_Ftl_V1_GetArtefactDiffsResponse>]

  /// - Returns: Interceptors to use when invoking 'uploadArtefact'.
  func makeUploadArtefactInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_UploadArtefactRequest, Xyz_Block_Ftl_V1_UploadArtefactResponse>]

  /// - Returns: Interceptors to use when invoking 'createDeployment'.
  func makeCreateDeploymentInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_CreateDeploymentRequest, Xyz_Block_Ftl_V1_CreateDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'getDeployment'.
  func makeGetDeploymentInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_GetDeploymentRequest, Xyz_Block_Ftl_V1_GetDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'getDeploymentArtefacts'.
  func makeGetDeploymentArtefactsInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest, Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse>]

  /// - Returns: Interceptors to use when invoking 'registerRunner'.
  func makeRegisterRunnerInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_RegisterRunnerRequest, Xyz_Block_Ftl_V1_RegisterRunnerResponse>]

  /// - Returns: Interceptors to use when invoking 'updateDeploy'.
  func makeUpdateDeployInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_UpdateDeployRequest, Xyz_Block_Ftl_V1_UpdateDeployResponse>]

  /// - Returns: Interceptors to use when invoking 'replaceDeploy'.
  func makeReplaceDeployInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_ReplaceDeployRequest, Xyz_Block_Ftl_V1_ReplaceDeployResponse>]

  /// - Returns: Interceptors to use when invoking 'streamDeploymentLogs'.
  func makeStreamDeploymentLogsInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest, Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse>]

  /// - Returns: Interceptors to use when invoking 'getSchema'.
  func makeGetSchemaInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_GetSchemaRequest, Xyz_Block_Ftl_V1_GetSchemaResponse>]

  /// - Returns: Interceptors to use when invoking 'pullSchema'.
  func makePullSchemaInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_PullSchemaRequest, Xyz_Block_Ftl_V1_PullSchemaResponse>]
}

public enum Xyz_Block_Ftl_V1_ControllerServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ControllerService",
    fullName: "xyz.block.ftl.v1.ControllerService",
    methods: [
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.ping,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.processList,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.status,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getArtefactDiffs,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.uploadArtefact,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.createDeployment,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getDeployment,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getDeploymentArtefacts,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.registerRunner,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.updateDeploy,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.replaceDeploy,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.streamDeploymentLogs,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.getSchema,
      Xyz_Block_Ftl_V1_ControllerServiceClientMetadata.Methods.pullSchema,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/xyz.block.ftl.v1.ControllerService/Ping",
      type: GRPCCallType.unary
    )

    public static let processList = GRPCMethodDescriptor(
      name: "ProcessList",
      path: "/xyz.block.ftl.v1.ControllerService/ProcessList",
      type: GRPCCallType.unary
    )

    public static let status = GRPCMethodDescriptor(
      name: "Status",
      path: "/xyz.block.ftl.v1.ControllerService/Status",
      type: GRPCCallType.unary
    )

    public static let getArtefactDiffs = GRPCMethodDescriptor(
      name: "GetArtefactDiffs",
      path: "/xyz.block.ftl.v1.ControllerService/GetArtefactDiffs",
      type: GRPCCallType.unary
    )

    public static let uploadArtefact = GRPCMethodDescriptor(
      name: "UploadArtefact",
      path: "/xyz.block.ftl.v1.ControllerService/UploadArtefact",
      type: GRPCCallType.unary
    )

    public static let createDeployment = GRPCMethodDescriptor(
      name: "CreateDeployment",
      path: "/xyz.block.ftl.v1.ControllerService/CreateDeployment",
      type: GRPCCallType.unary
    )

    public static let getDeployment = GRPCMethodDescriptor(
      name: "GetDeployment",
      path: "/xyz.block.ftl.v1.ControllerService/GetDeployment",
      type: GRPCCallType.unary
    )

    public static let getDeploymentArtefacts = GRPCMethodDescriptor(
      name: "GetDeploymentArtefacts",
      path: "/xyz.block.ftl.v1.ControllerService/GetDeploymentArtefacts",
      type: GRPCCallType.serverStreaming
    )

    public static let registerRunner = GRPCMethodDescriptor(
      name: "RegisterRunner",
      path: "/xyz.block.ftl.v1.ControllerService/RegisterRunner",
      type: GRPCCallType.clientStreaming
    )

    public static let updateDeploy = GRPCMethodDescriptor(
      name: "UpdateDeploy",
      path: "/xyz.block.ftl.v1.ControllerService/UpdateDeploy",
      type: GRPCCallType.unary
    )

    public static let replaceDeploy = GRPCMethodDescriptor(
      name: "ReplaceDeploy",
      path: "/xyz.block.ftl.v1.ControllerService/ReplaceDeploy",
      type: GRPCCallType.unary
    )

    public static let streamDeploymentLogs = GRPCMethodDescriptor(
      name: "StreamDeploymentLogs",
      path: "/xyz.block.ftl.v1.ControllerService/StreamDeploymentLogs",
      type: GRPCCallType.clientStreaming
    )

    public static let getSchema = GRPCMethodDescriptor(
      name: "GetSchema",
      path: "/xyz.block.ftl.v1.ControllerService/GetSchema",
      type: GRPCCallType.unary
    )

    public static let pullSchema = GRPCMethodDescriptor(
      name: "PullSchema",
      path: "/xyz.block.ftl.v1.ControllerService/PullSchema",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// RunnerService is the service that executes Deployments.
///
/// The Controller will scale the Runner horizontally as required. The Runner will
/// register itself automatically with the ControllerService, which will then
/// assign modules to it.
///
/// Usage: instantiate `Xyz_Block_Ftl_V1_RunnerServiceClient`, then call methods of this protocol to make API calls.
public protocol Xyz_Block_Ftl_V1_RunnerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>

  func reserve(
    _ request: Xyz_Block_Ftl_V1_ReserveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ReserveRequest, Xyz_Block_Ftl_V1_ReserveResponse>

  func deploy(
    _ request: Xyz_Block_Ftl_V1_DeployRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_DeployRequest, Xyz_Block_Ftl_V1_DeployResponse>

  func terminate(
    _ request: Xyz_Block_Ftl_V1_TerminateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_TerminateRequest, Xyz_Block_Ftl_V1_RegisterRunnerRequest>
}

extension Xyz_Block_Ftl_V1_RunnerServiceClientProtocol {
  public var serviceName: String {
    return "xyz.block.ftl.v1.RunnerService"
  }

  /// Unary call to Ping
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  /// Reserve synchronously reserves a Runner for a deployment but does nothing else.
  ///
  /// - Parameters:
  ///   - request: Request to send to Reserve.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func reserve(
    _ request: Xyz_Block_Ftl_V1_ReserveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ReserveRequest, Xyz_Block_Ftl_V1_ReserveResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.reserve.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReserveInterceptors() ?? []
    )
  }

  /// Initiate a deployment on this Runner.
  ///
  /// - Parameters:
  ///   - request: Request to send to Deploy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deploy(
    _ request: Xyz_Block_Ftl_V1_DeployRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_DeployRequest, Xyz_Block_Ftl_V1_DeployResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.deploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployInterceptors() ?? []
    )
  }

  /// Terminate the deployment on this Runner.
  ///
  /// - Parameters:
  ///   - request: Request to send to Terminate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func terminate(
    _ request: Xyz_Block_Ftl_V1_TerminateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_TerminateRequest, Xyz_Block_Ftl_V1_RegisterRunnerRequest> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Xyz_Block_Ftl_V1_RunnerServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Xyz_Block_Ftl_V1_RunnerServiceNIOClient")
public final class Xyz_Block_Ftl_V1_RunnerServiceClient: Xyz_Block_Ftl_V1_RunnerServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the xyz.block.ftl.v1.RunnerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Xyz_Block_Ftl_V1_RunnerServiceNIOClient: Xyz_Block_Ftl_V1_RunnerServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the xyz.block.ftl.v1.RunnerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// RunnerService is the service that executes Deployments.
///
/// The Controller will scale the Runner horizontally as required. The Runner will
/// register itself automatically with the ControllerService, which will then
/// assign modules to it.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xyz_Block_Ftl_V1_RunnerServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>

  func makeReserveCall(
    _ request: Xyz_Block_Ftl_V1_ReserveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ReserveRequest, Xyz_Block_Ftl_V1_ReserveResponse>

  func makeDeployCall(
    _ request: Xyz_Block_Ftl_V1_DeployRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_DeployRequest, Xyz_Block_Ftl_V1_DeployResponse>

  func makeTerminateCall(
    _ request: Xyz_Block_Ftl_V1_TerminateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_TerminateRequest, Xyz_Block_Ftl_V1_RegisterRunnerRequest>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_RunnerServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func makeReserveCall(
    _ request: Xyz_Block_Ftl_V1_ReserveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ReserveRequest, Xyz_Block_Ftl_V1_ReserveResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.reserve.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReserveInterceptors() ?? []
    )
  }

  public func makeDeployCall(
    _ request: Xyz_Block_Ftl_V1_DeployRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_DeployRequest, Xyz_Block_Ftl_V1_DeployResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.deploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployInterceptors() ?? []
    )
  }

  public func makeTerminateCall(
    _ request: Xyz_Block_Ftl_V1_TerminateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_TerminateRequest, Xyz_Block_Ftl_V1_RegisterRunnerRequest> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_RunnerServiceAsyncClientProtocol {
  public func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_PingResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func reserve(
    _ request: Xyz_Block_Ftl_V1_ReserveRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_ReserveResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.reserve.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReserveInterceptors() ?? []
    )
  }

  public func deploy(
    _ request: Xyz_Block_Ftl_V1_DeployRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_DeployResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.deploy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployInterceptors() ?? []
    )
  }

  public func terminate(
    _ request: Xyz_Block_Ftl_V1_TerminateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_RegisterRunnerRequest {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.terminate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Xyz_Block_Ftl_V1_RunnerServiceAsyncClient: Xyz_Block_Ftl_V1_RunnerServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Xyz_Block_Ftl_V1_RunnerServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>]

  /// - Returns: Interceptors to use when invoking 'reserve'.
  func makeReserveInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_ReserveRequest, Xyz_Block_Ftl_V1_ReserveResponse>]

  /// - Returns: Interceptors to use when invoking 'deploy'.
  func makeDeployInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_DeployRequest, Xyz_Block_Ftl_V1_DeployResponse>]

  /// - Returns: Interceptors to use when invoking 'terminate'.
  func makeTerminateInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_TerminateRequest, Xyz_Block_Ftl_V1_RegisterRunnerRequest>]
}

public enum Xyz_Block_Ftl_V1_RunnerServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RunnerService",
    fullName: "xyz.block.ftl.v1.RunnerService",
    methods: [
      Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.ping,
      Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.reserve,
      Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.deploy,
      Xyz_Block_Ftl_V1_RunnerServiceClientMetadata.Methods.terminate,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/xyz.block.ftl.v1.RunnerService/Ping",
      type: GRPCCallType.unary
    )

    public static let reserve = GRPCMethodDescriptor(
      name: "Reserve",
      path: "/xyz.block.ftl.v1.RunnerService/Reserve",
      type: GRPCCallType.unary
    )

    public static let deploy = GRPCMethodDescriptor(
      name: "Deploy",
      path: "/xyz.block.ftl.v1.RunnerService/Deploy",
      type: GRPCCallType.unary
    )

    public static let terminate = GRPCMethodDescriptor(
      name: "Terminate",
      path: "/xyz.block.ftl.v1.RunnerService/Terminate",
      type: GRPCCallType.unary
    )
  }
}

/// AdminService is the service that provides and updates admin data. For example,
/// it is used to encapsulate configuration and secrets.
///
/// Usage: instantiate `Xyz_Block_Ftl_V1_AdminServiceClient`, then call methods of this protocol to make API calls.
public protocol Xyz_Block_Ftl_V1_AdminServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>

  func configList(
    _ request: Xyz_Block_Ftl_V1_ListConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ListConfigRequest, Xyz_Block_Ftl_V1_ListConfigResponse>

  func configGet(
    _ request: Xyz_Block_Ftl_V1_GetConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetConfigRequest, Xyz_Block_Ftl_V1_GetConfigResponse>

  func configSet(
    _ request: Xyz_Block_Ftl_V1_SetConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_SetConfigRequest, Xyz_Block_Ftl_V1_SetConfigResponse>

  func configUnset(
    _ request: Xyz_Block_Ftl_V1_UnsetConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_UnsetConfigRequest, Xyz_Block_Ftl_V1_UnsetConfigResponse>

  func secretsList(
    _ request: Xyz_Block_Ftl_V1_ListSecretsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ListSecretsRequest, Xyz_Block_Ftl_V1_ListSecretsResponse>

  func secretGet(
    _ request: Xyz_Block_Ftl_V1_GetSecretRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetSecretRequest, Xyz_Block_Ftl_V1_GetSecretResponse>

  func secretSet(
    _ request: Xyz_Block_Ftl_V1_SetSecretRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_SetSecretRequest, Xyz_Block_Ftl_V1_SetSecretResponse>

  func secretUnset(
    _ request: Xyz_Block_Ftl_V1_UnsetSecretRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xyz_Block_Ftl_V1_UnsetSecretRequest, Xyz_Block_Ftl_V1_UnsetSecretResponse>
}

extension Xyz_Block_Ftl_V1_AdminServiceClientProtocol {
  public var serviceName: String {
    return "xyz.block.ftl.v1.AdminService"
  }

  /// Unary call to Ping
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  /// List configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfigList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func configList(
    _ request: Xyz_Block_Ftl_V1_ListConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ListConfigRequest, Xyz_Block_Ftl_V1_ListConfigResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigListInterceptors() ?? []
    )
  }

  /// Get a config value.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfigGet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func configGet(
    _ request: Xyz_Block_Ftl_V1_GetConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetConfigRequest, Xyz_Block_Ftl_V1_GetConfigResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigGetInterceptors() ?? []
    )
  }

  /// Set a config value.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfigSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func configSet(
    _ request: Xyz_Block_Ftl_V1_SetConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_SetConfigRequest, Xyz_Block_Ftl_V1_SetConfigResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigSetInterceptors() ?? []
    )
  }

  /// Unset a config value.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfigUnset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func configUnset(
    _ request: Xyz_Block_Ftl_V1_UnsetConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_UnsetConfigRequest, Xyz_Block_Ftl_V1_UnsetConfigResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configUnset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigUnsetInterceptors() ?? []
    )
  }

  /// List secrets.
  ///
  /// - Parameters:
  ///   - request: Request to send to SecretsList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func secretsList(
    _ request: Xyz_Block_Ftl_V1_ListSecretsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_ListSecretsRequest, Xyz_Block_Ftl_V1_ListSecretsResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretsList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretsListInterceptors() ?? []
    )
  }

  /// Get a secret.
  ///
  /// - Parameters:
  ///   - request: Request to send to SecretGet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func secretGet(
    _ request: Xyz_Block_Ftl_V1_GetSecretRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_GetSecretRequest, Xyz_Block_Ftl_V1_GetSecretResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretGetInterceptors() ?? []
    )
  }

  /// Set a secret.
  ///
  /// - Parameters:
  ///   - request: Request to send to SecretSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func secretSet(
    _ request: Xyz_Block_Ftl_V1_SetSecretRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_SetSecretRequest, Xyz_Block_Ftl_V1_SetSecretResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretSetInterceptors() ?? []
    )
  }

  /// Unset a secret.
  ///
  /// - Parameters:
  ///   - request: Request to send to SecretUnset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func secretUnset(
    _ request: Xyz_Block_Ftl_V1_UnsetSecretRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xyz_Block_Ftl_V1_UnsetSecretRequest, Xyz_Block_Ftl_V1_UnsetSecretResponse> {
    return self.makeUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretUnset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretUnsetInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Xyz_Block_Ftl_V1_AdminServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Xyz_Block_Ftl_V1_AdminServiceNIOClient")
public final class Xyz_Block_Ftl_V1_AdminServiceClient: Xyz_Block_Ftl_V1_AdminServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the xyz.block.ftl.v1.AdminService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Xyz_Block_Ftl_V1_AdminServiceNIOClient: Xyz_Block_Ftl_V1_AdminServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the xyz.block.ftl.v1.AdminService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// AdminService is the service that provides and updates admin data. For example,
/// it is used to encapsulate configuration and secrets.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xyz_Block_Ftl_V1_AdminServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>

  func makeConfigListCall(
    _ request: Xyz_Block_Ftl_V1_ListConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ListConfigRequest, Xyz_Block_Ftl_V1_ListConfigResponse>

  func makeConfigGetCall(
    _ request: Xyz_Block_Ftl_V1_GetConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetConfigRequest, Xyz_Block_Ftl_V1_GetConfigResponse>

  func makeConfigSetCall(
    _ request: Xyz_Block_Ftl_V1_SetConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_SetConfigRequest, Xyz_Block_Ftl_V1_SetConfigResponse>

  func makeConfigUnsetCall(
    _ request: Xyz_Block_Ftl_V1_UnsetConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_UnsetConfigRequest, Xyz_Block_Ftl_V1_UnsetConfigResponse>

  func makeSecretsListCall(
    _ request: Xyz_Block_Ftl_V1_ListSecretsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ListSecretsRequest, Xyz_Block_Ftl_V1_ListSecretsResponse>

  func makeSecretGetCall(
    _ request: Xyz_Block_Ftl_V1_GetSecretRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetSecretRequest, Xyz_Block_Ftl_V1_GetSecretResponse>

  func makeSecretSetCall(
    _ request: Xyz_Block_Ftl_V1_SetSecretRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_SetSecretRequest, Xyz_Block_Ftl_V1_SetSecretResponse>

  func makeSecretUnsetCall(
    _ request: Xyz_Block_Ftl_V1_UnsetSecretRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_UnsetSecretRequest, Xyz_Block_Ftl_V1_UnsetSecretResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_AdminServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xyz_Block_Ftl_V1_AdminServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func makeConfigListCall(
    _ request: Xyz_Block_Ftl_V1_ListConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ListConfigRequest, Xyz_Block_Ftl_V1_ListConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigListInterceptors() ?? []
    )
  }

  public func makeConfigGetCall(
    _ request: Xyz_Block_Ftl_V1_GetConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetConfigRequest, Xyz_Block_Ftl_V1_GetConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigGetInterceptors() ?? []
    )
  }

  public func makeConfigSetCall(
    _ request: Xyz_Block_Ftl_V1_SetConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_SetConfigRequest, Xyz_Block_Ftl_V1_SetConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigSetInterceptors() ?? []
    )
  }

  public func makeConfigUnsetCall(
    _ request: Xyz_Block_Ftl_V1_UnsetConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_UnsetConfigRequest, Xyz_Block_Ftl_V1_UnsetConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configUnset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigUnsetInterceptors() ?? []
    )
  }

  public func makeSecretsListCall(
    _ request: Xyz_Block_Ftl_V1_ListSecretsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_ListSecretsRequest, Xyz_Block_Ftl_V1_ListSecretsResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretsList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretsListInterceptors() ?? []
    )
  }

  public func makeSecretGetCall(
    _ request: Xyz_Block_Ftl_V1_GetSecretRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_GetSecretRequest, Xyz_Block_Ftl_V1_GetSecretResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretGetInterceptors() ?? []
    )
  }

  public func makeSecretSetCall(
    _ request: Xyz_Block_Ftl_V1_SetSecretRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_SetSecretRequest, Xyz_Block_Ftl_V1_SetSecretResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretSetInterceptors() ?? []
    )
  }

  public func makeSecretUnsetCall(
    _ request: Xyz_Block_Ftl_V1_UnsetSecretRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xyz_Block_Ftl_V1_UnsetSecretRequest, Xyz_Block_Ftl_V1_UnsetSecretResponse> {
    return self.makeAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretUnset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretUnsetInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_AdminServiceAsyncClientProtocol {
  public func ping(
    _ request: Xyz_Block_Ftl_V1_PingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_PingResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func configList(
    _ request: Xyz_Block_Ftl_V1_ListConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_ListConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigListInterceptors() ?? []
    )
  }

  public func configGet(
    _ request: Xyz_Block_Ftl_V1_GetConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_GetConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigGetInterceptors() ?? []
    )
  }

  public func configSet(
    _ request: Xyz_Block_Ftl_V1_SetConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_SetConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigSetInterceptors() ?? []
    )
  }

  public func configUnset(
    _ request: Xyz_Block_Ftl_V1_UnsetConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_UnsetConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configUnset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigUnsetInterceptors() ?? []
    )
  }

  public func secretsList(
    _ request: Xyz_Block_Ftl_V1_ListSecretsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_ListSecretsResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretsList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretsListInterceptors() ?? []
    )
  }

  public func secretGet(
    _ request: Xyz_Block_Ftl_V1_GetSecretRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_GetSecretResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretGetInterceptors() ?? []
    )
  }

  public func secretSet(
    _ request: Xyz_Block_Ftl_V1_SetSecretRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_SetSecretResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretSetInterceptors() ?? []
    )
  }

  public func secretUnset(
    _ request: Xyz_Block_Ftl_V1_UnsetSecretRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xyz_Block_Ftl_V1_UnsetSecretResponse {
    return try await self.performAsyncUnaryCall(
      path: Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretUnset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSecretUnsetInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Xyz_Block_Ftl_V1_AdminServiceAsyncClient: Xyz_Block_Ftl_V1_AdminServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Xyz_Block_Ftl_V1_AdminServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>]

  /// - Returns: Interceptors to use when invoking 'configList'.
  func makeConfigListInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_ListConfigRequest, Xyz_Block_Ftl_V1_ListConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'configGet'.
  func makeConfigGetInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_GetConfigRequest, Xyz_Block_Ftl_V1_GetConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'configSet'.
  func makeConfigSetInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_SetConfigRequest, Xyz_Block_Ftl_V1_SetConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'configUnset'.
  func makeConfigUnsetInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_UnsetConfigRequest, Xyz_Block_Ftl_V1_UnsetConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'secretsList'.
  func makeSecretsListInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_ListSecretsRequest, Xyz_Block_Ftl_V1_ListSecretsResponse>]

  /// - Returns: Interceptors to use when invoking 'secretGet'.
  func makeSecretGetInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_GetSecretRequest, Xyz_Block_Ftl_V1_GetSecretResponse>]

  /// - Returns: Interceptors to use when invoking 'secretSet'.
  func makeSecretSetInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_SetSecretRequest, Xyz_Block_Ftl_V1_SetSecretResponse>]

  /// - Returns: Interceptors to use when invoking 'secretUnset'.
  func makeSecretUnsetInterceptors() -> [ClientInterceptor<Xyz_Block_Ftl_V1_UnsetSecretRequest, Xyz_Block_Ftl_V1_UnsetSecretResponse>]
}

public enum Xyz_Block_Ftl_V1_AdminServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AdminService",
    fullName: "xyz.block.ftl.v1.AdminService",
    methods: [
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.ping,
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configList,
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configGet,
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configSet,
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.configUnset,
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretsList,
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretGet,
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretSet,
      Xyz_Block_Ftl_V1_AdminServiceClientMetadata.Methods.secretUnset,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/xyz.block.ftl.v1.AdminService/Ping",
      type: GRPCCallType.unary
    )

    public static let configList = GRPCMethodDescriptor(
      name: "ConfigList",
      path: "/xyz.block.ftl.v1.AdminService/ConfigList",
      type: GRPCCallType.unary
    )

    public static let configGet = GRPCMethodDescriptor(
      name: "ConfigGet",
      path: "/xyz.block.ftl.v1.AdminService/ConfigGet",
      type: GRPCCallType.unary
    )

    public static let configSet = GRPCMethodDescriptor(
      name: "ConfigSet",
      path: "/xyz.block.ftl.v1.AdminService/ConfigSet",
      type: GRPCCallType.unary
    )

    public static let configUnset = GRPCMethodDescriptor(
      name: "ConfigUnset",
      path: "/xyz.block.ftl.v1.AdminService/ConfigUnset",
      type: GRPCCallType.unary
    )

    public static let secretsList = GRPCMethodDescriptor(
      name: "SecretsList",
      path: "/xyz.block.ftl.v1.AdminService/SecretsList",
      type: GRPCCallType.unary
    )

    public static let secretGet = GRPCMethodDescriptor(
      name: "SecretGet",
      path: "/xyz.block.ftl.v1.AdminService/SecretGet",
      type: GRPCCallType.unary
    )

    public static let secretSet = GRPCMethodDescriptor(
      name: "SecretSet",
      path: "/xyz.block.ftl.v1.AdminService/SecretSet",
      type: GRPCCallType.unary
    )

    public static let secretUnset = GRPCMethodDescriptor(
      name: "SecretUnset",
      path: "/xyz.block.ftl.v1.AdminService/SecretUnset",
      type: GRPCCallType.unary
    )
  }
}

/// VerbService is a common interface shared by multiple services for calling Verbs.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Xyz_Block_Ftl_V1_VerbServiceProvider: CallHandlerProvider {
  var interceptors: Xyz_Block_Ftl_V1_VerbServiceServerInterceptorFactoryProtocol? { get }

  /// Ping service for readiness.
  func ping(request: Xyz_Block_Ftl_V1_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_PingResponse>

  /// Get configuration state for the module
  func getModuleContext(request: Xyz_Block_Ftl_V1_ModuleContextRequest, context: StreamingResponseCallContext<Xyz_Block_Ftl_V1_ModuleContextResponse>) -> EventLoopFuture<GRPCStatus>

  /// Acquire (and renew) a lease for a deployment.
  ///
  /// Returns ResourceExhausted if the lease is held.
  func acquireLease(context: StreamingResponseCallContext<Xyz_Block_Ftl_V1_AcquireLeaseResponse>) -> EventLoopFuture<(StreamEvent<Xyz_Block_Ftl_V1_AcquireLeaseRequest>) -> Void>

  /// Send an event to an FSM.
  func sendFSMEvent(request: Xyz_Block_Ftl_V1_SendFSMEventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_SendFSMEventResponse>

  /// Publish an event to a topic.
  func publishEvent(request: Xyz_Block_Ftl_V1_PublishEventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_PublishEventResponse>

  /// Issue a synchronous call to a Verb.
  func call(request: Xyz_Block_Ftl_V1_CallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_CallResponse>
}

extension Xyz_Block_Ftl_V1_VerbServiceProvider {
  public var serviceName: Substring {
    return Xyz_Block_Ftl_V1_VerbServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PingRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "GetModuleContext":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ModuleContextRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ModuleContextResponse>(),
        interceptors: self.interceptors?.makeGetModuleContextInterceptors() ?? [],
        userFunction: self.getModuleContext(request:context:)
      )

    case "AcquireLease":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_AcquireLeaseRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_AcquireLeaseResponse>(),
        interceptors: self.interceptors?.makeAcquireLeaseInterceptors() ?? [],
        observerFactory: self.acquireLease(context:)
      )

    case "SendFSMEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_SendFSMEventRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_SendFSMEventResponse>(),
        interceptors: self.interceptors?.makeSendFSMEventInterceptors() ?? [],
        userFunction: self.sendFSMEvent(request:context:)
      )

    case "PublishEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PublishEventRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PublishEventResponse>(),
        interceptors: self.interceptors?.makePublishEventInterceptors() ?? [],
        userFunction: self.publishEvent(request:context:)
      )

    case "Call":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_CallRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_CallResponse>(),
        interceptors: self.interceptors?.makeCallInterceptors() ?? [],
        userFunction: self.call(request:context:)
      )

    default:
      return nil
    }
  }
}

/// VerbService is a common interface shared by multiple services for calling Verbs.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xyz_Block_Ftl_V1_VerbServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xyz_Block_Ftl_V1_VerbServiceServerInterceptorFactoryProtocol? { get }

  /// Ping service for readiness.
  func ping(
    request: Xyz_Block_Ftl_V1_PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_PingResponse

  /// Get configuration state for the module
  func getModuleContext(
    request: Xyz_Block_Ftl_V1_ModuleContextRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Xyz_Block_Ftl_V1_ModuleContextResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Acquire (and renew) a lease for a deployment.
  ///
  /// Returns ResourceExhausted if the lease is held.
  func acquireLease(
    requestStream: GRPCAsyncRequestStream<Xyz_Block_Ftl_V1_AcquireLeaseRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Xyz_Block_Ftl_V1_AcquireLeaseResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Send an event to an FSM.
  func sendFSMEvent(
    request: Xyz_Block_Ftl_V1_SendFSMEventRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_SendFSMEventResponse

  /// Publish an event to a topic.
  func publishEvent(
    request: Xyz_Block_Ftl_V1_PublishEventRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_PublishEventResponse

  /// Issue a synchronous call to a Verb.
  func call(
    request: Xyz_Block_Ftl_V1_CallRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_CallResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_VerbServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xyz_Block_Ftl_V1_VerbServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Xyz_Block_Ftl_V1_VerbServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Xyz_Block_Ftl_V1_VerbServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PingRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    case "GetModuleContext":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ModuleContextRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ModuleContextResponse>(),
        interceptors: self.interceptors?.makeGetModuleContextInterceptors() ?? [],
        wrapping: { try await self.getModuleContext(request: $0, responseStream: $1, context: $2) }
      )

    case "AcquireLease":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_AcquireLeaseRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_AcquireLeaseResponse>(),
        interceptors: self.interceptors?.makeAcquireLeaseInterceptors() ?? [],
        wrapping: { try await self.acquireLease(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "SendFSMEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_SendFSMEventRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_SendFSMEventResponse>(),
        interceptors: self.interceptors?.makeSendFSMEventInterceptors() ?? [],
        wrapping: { try await self.sendFSMEvent(request: $0, context: $1) }
      )

    case "PublishEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PublishEventRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PublishEventResponse>(),
        interceptors: self.interceptors?.makePublishEventInterceptors() ?? [],
        wrapping: { try await self.publishEvent(request: $0, context: $1) }
      )

    case "Call":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_CallRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_CallResponse>(),
        interceptors: self.interceptors?.makeCallInterceptors() ?? [],
        wrapping: { try await self.call(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Xyz_Block_Ftl_V1_VerbServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>]

  /// - Returns: Interceptors to use when handling 'getModuleContext'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetModuleContextInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_ModuleContextRequest, Xyz_Block_Ftl_V1_ModuleContextResponse>]

  /// - Returns: Interceptors to use when handling 'acquireLease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAcquireLeaseInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_AcquireLeaseRequest, Xyz_Block_Ftl_V1_AcquireLeaseResponse>]

  /// - Returns: Interceptors to use when handling 'sendFSMEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendFSMEventInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_SendFSMEventRequest, Xyz_Block_Ftl_V1_SendFSMEventResponse>]

  /// - Returns: Interceptors to use when handling 'publishEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePublishEventInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_PublishEventRequest, Xyz_Block_Ftl_V1_PublishEventResponse>]

  /// - Returns: Interceptors to use when handling 'call'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCallInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_CallRequest, Xyz_Block_Ftl_V1_CallResponse>]
}

public enum Xyz_Block_Ftl_V1_VerbServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VerbService",
    fullName: "xyz.block.ftl.v1.VerbService",
    methods: [
      Xyz_Block_Ftl_V1_VerbServiceServerMetadata.Methods.ping,
      Xyz_Block_Ftl_V1_VerbServiceServerMetadata.Methods.getModuleContext,
      Xyz_Block_Ftl_V1_VerbServiceServerMetadata.Methods.acquireLease,
      Xyz_Block_Ftl_V1_VerbServiceServerMetadata.Methods.sendFSMEvent,
      Xyz_Block_Ftl_V1_VerbServiceServerMetadata.Methods.publishEvent,
      Xyz_Block_Ftl_V1_VerbServiceServerMetadata.Methods.call,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/xyz.block.ftl.v1.VerbService/Ping",
      type: GRPCCallType.unary
    )

    public static let getModuleContext = GRPCMethodDescriptor(
      name: "GetModuleContext",
      path: "/xyz.block.ftl.v1.VerbService/GetModuleContext",
      type: GRPCCallType.serverStreaming
    )

    public static let acquireLease = GRPCMethodDescriptor(
      name: "AcquireLease",
      path: "/xyz.block.ftl.v1.VerbService/AcquireLease",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let sendFSMEvent = GRPCMethodDescriptor(
      name: "SendFSMEvent",
      path: "/xyz.block.ftl.v1.VerbService/SendFSMEvent",
      type: GRPCCallType.unary
    )

    public static let publishEvent = GRPCMethodDescriptor(
      name: "PublishEvent",
      path: "/xyz.block.ftl.v1.VerbService/PublishEvent",
      type: GRPCCallType.unary
    )

    public static let call = GRPCMethodDescriptor(
      name: "Call",
      path: "/xyz.block.ftl.v1.VerbService/Call",
      type: GRPCCallType.unary
    )
  }
}
/// To build a server, implement a class that conforms to this protocol.
public protocol Xyz_Block_Ftl_V1_ControllerServiceProvider: CallHandlerProvider {
  var interceptors: Xyz_Block_Ftl_V1_ControllerServiceServerInterceptorFactoryProtocol? { get }

  /// Ping service for readiness.
  func ping(request: Xyz_Block_Ftl_V1_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_PingResponse>

  /// List "processes" running on the cluster.
  func processList(request: Xyz_Block_Ftl_V1_ProcessListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_ProcessListResponse>

  func status(request: Xyz_Block_Ftl_V1_StatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_StatusResponse>

  /// Get list of artefacts that differ between the server and client.
  func getArtefactDiffs(request: Xyz_Block_Ftl_V1_GetArtefactDiffsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_GetArtefactDiffsResponse>

  /// Upload an artefact to the server.
  func uploadArtefact(request: Xyz_Block_Ftl_V1_UploadArtefactRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_UploadArtefactResponse>

  /// Create a deployment.
  func createDeployment(request: Xyz_Block_Ftl_V1_CreateDeploymentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_CreateDeploymentResponse>

  /// Get the schema and artefact metadata for a deployment.
  func getDeployment(request: Xyz_Block_Ftl_V1_GetDeploymentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_GetDeploymentResponse>

  /// Stream deployment artefacts from the server.
  ///
  /// Each artefact is streamed one after the other as a sequence of max 1MB
  /// chunks.
  func getDeploymentArtefacts(request: Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest, context: StreamingResponseCallContext<Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse>) -> EventLoopFuture<GRPCStatus>

  /// Register a Runner with the Controller.
  ///
  /// Each runner issue a RegisterRunnerRequest to the ControllerService
  /// every 10 seconds to maintain its heartbeat.
  func registerRunner(context: UnaryResponseCallContext<Xyz_Block_Ftl_V1_RegisterRunnerResponse>) -> EventLoopFuture<(StreamEvent<Xyz_Block_Ftl_V1_RegisterRunnerRequest>) -> Void>

  /// Update an existing deployment.
  func updateDeploy(request: Xyz_Block_Ftl_V1_UpdateDeployRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_UpdateDeployResponse>

  /// Gradually replace an existing deployment with a new one.
  ///
  /// If a deployment already exists for the module of the new deployment,
  /// it will be scaled down and replaced by the new one.
  func replaceDeploy(request: Xyz_Block_Ftl_V1_ReplaceDeployRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_ReplaceDeployResponse>

  /// Stream logs from a deployment
  func streamDeploymentLogs(context: UnaryResponseCallContext<Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse>) -> EventLoopFuture<(StreamEvent<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest>) -> Void>

  /// Get the full schema.
  func getSchema(request: Xyz_Block_Ftl_V1_GetSchemaRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_GetSchemaResponse>

  /// Pull schema changes from the Controller.
  ///
  /// Note that if there are no deployments this will block indefinitely, making it unsuitable for
  /// just retrieving the schema. Use GetSchema for that.
  func pullSchema(request: Xyz_Block_Ftl_V1_PullSchemaRequest, context: StreamingResponseCallContext<Xyz_Block_Ftl_V1_PullSchemaResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Xyz_Block_Ftl_V1_ControllerServiceProvider {
  public var serviceName: Substring {
    return Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PingRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "ProcessList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ProcessListRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ProcessListResponse>(),
        interceptors: self.interceptors?.makeProcessListInterceptors() ?? [],
        userFunction: self.processList(request:context:)
      )

    case "Status":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_StatusResponse>(),
        interceptors: self.interceptors?.makeStatusInterceptors() ?? [],
        userFunction: self.status(request:context:)
      )

    case "GetArtefactDiffs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetArtefactDiffsRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetArtefactDiffsResponse>(),
        interceptors: self.interceptors?.makeGetArtefactDiffsInterceptors() ?? [],
        userFunction: self.getArtefactDiffs(request:context:)
      )

    case "UploadArtefact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_UploadArtefactRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_UploadArtefactResponse>(),
        interceptors: self.interceptors?.makeUploadArtefactInterceptors() ?? [],
        userFunction: self.uploadArtefact(request:context:)
      )

    case "CreateDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_CreateDeploymentRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_CreateDeploymentResponse>(),
        interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? [],
        userFunction: self.createDeployment(request:context:)
      )

    case "GetDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetDeploymentRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetDeploymentResponse>(),
        interceptors: self.interceptors?.makeGetDeploymentInterceptors() ?? [],
        userFunction: self.getDeployment(request:context:)
      )

    case "GetDeploymentArtefacts":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse>(),
        interceptors: self.interceptors?.makeGetDeploymentArtefactsInterceptors() ?? [],
        userFunction: self.getDeploymentArtefacts(request:context:)
      )

    case "RegisterRunner":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_RegisterRunnerRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_RegisterRunnerResponse>(),
        interceptors: self.interceptors?.makeRegisterRunnerInterceptors() ?? [],
        observerFactory: self.registerRunner(context:)
      )

    case "UpdateDeploy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_UpdateDeployRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_UpdateDeployResponse>(),
        interceptors: self.interceptors?.makeUpdateDeployInterceptors() ?? [],
        userFunction: self.updateDeploy(request:context:)
      )

    case "ReplaceDeploy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ReplaceDeployRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ReplaceDeployResponse>(),
        interceptors: self.interceptors?.makeReplaceDeployInterceptors() ?? [],
        userFunction: self.replaceDeploy(request:context:)
      )

    case "StreamDeploymentLogs":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse>(),
        interceptors: self.interceptors?.makeStreamDeploymentLogsInterceptors() ?? [],
        observerFactory: self.streamDeploymentLogs(context:)
      )

    case "GetSchema":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetSchemaRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetSchemaResponse>(),
        interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? [],
        userFunction: self.getSchema(request:context:)
      )

    case "PullSchema":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PullSchemaRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PullSchemaResponse>(),
        interceptors: self.interceptors?.makePullSchemaInterceptors() ?? [],
        userFunction: self.pullSchema(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xyz_Block_Ftl_V1_ControllerServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xyz_Block_Ftl_V1_ControllerServiceServerInterceptorFactoryProtocol? { get }

  /// Ping service for readiness.
  func ping(
    request: Xyz_Block_Ftl_V1_PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_PingResponse

  /// List "processes" running on the cluster.
  func processList(
    request: Xyz_Block_Ftl_V1_ProcessListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_ProcessListResponse

  func status(
    request: Xyz_Block_Ftl_V1_StatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_StatusResponse

  /// Get list of artefacts that differ between the server and client.
  func getArtefactDiffs(
    request: Xyz_Block_Ftl_V1_GetArtefactDiffsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_GetArtefactDiffsResponse

  /// Upload an artefact to the server.
  func uploadArtefact(
    request: Xyz_Block_Ftl_V1_UploadArtefactRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_UploadArtefactResponse

  /// Create a deployment.
  func createDeployment(
    request: Xyz_Block_Ftl_V1_CreateDeploymentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_CreateDeploymentResponse

  /// Get the schema and artefact metadata for a deployment.
  func getDeployment(
    request: Xyz_Block_Ftl_V1_GetDeploymentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_GetDeploymentResponse

  /// Stream deployment artefacts from the server.
  ///
  /// Each artefact is streamed one after the other as a sequence of max 1MB
  /// chunks.
  func getDeploymentArtefacts(
    request: Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Register a Runner with the Controller.
  ///
  /// Each runner issue a RegisterRunnerRequest to the ControllerService
  /// every 10 seconds to maintain its heartbeat.
  func registerRunner(
    requestStream: GRPCAsyncRequestStream<Xyz_Block_Ftl_V1_RegisterRunnerRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_RegisterRunnerResponse

  /// Update an existing deployment.
  func updateDeploy(
    request: Xyz_Block_Ftl_V1_UpdateDeployRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_UpdateDeployResponse

  /// Gradually replace an existing deployment with a new one.
  ///
  /// If a deployment already exists for the module of the new deployment,
  /// it will be scaled down and replaced by the new one.
  func replaceDeploy(
    request: Xyz_Block_Ftl_V1_ReplaceDeployRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_ReplaceDeployResponse

  /// Stream logs from a deployment
  func streamDeploymentLogs(
    requestStream: GRPCAsyncRequestStream<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse

  /// Get the full schema.
  func getSchema(
    request: Xyz_Block_Ftl_V1_GetSchemaRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_GetSchemaResponse

  /// Pull schema changes from the Controller.
  ///
  /// Note that if there are no deployments this will block indefinitely, making it unsuitable for
  /// just retrieving the schema. Use GetSchema for that.
  func pullSchema(
    request: Xyz_Block_Ftl_V1_PullSchemaRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Xyz_Block_Ftl_V1_PullSchemaResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_ControllerServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Xyz_Block_Ftl_V1_ControllerServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PingRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    case "ProcessList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ProcessListRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ProcessListResponse>(),
        interceptors: self.interceptors?.makeProcessListInterceptors() ?? [],
        wrapping: { try await self.processList(request: $0, context: $1) }
      )

    case "Status":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_StatusResponse>(),
        interceptors: self.interceptors?.makeStatusInterceptors() ?? [],
        wrapping: { try await self.status(request: $0, context: $1) }
      )

    case "GetArtefactDiffs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetArtefactDiffsRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetArtefactDiffsResponse>(),
        interceptors: self.interceptors?.makeGetArtefactDiffsInterceptors() ?? [],
        wrapping: { try await self.getArtefactDiffs(request: $0, context: $1) }
      )

    case "UploadArtefact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_UploadArtefactRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_UploadArtefactResponse>(),
        interceptors: self.interceptors?.makeUploadArtefactInterceptors() ?? [],
        wrapping: { try await self.uploadArtefact(request: $0, context: $1) }
      )

    case "CreateDeployment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_CreateDeploymentRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_CreateDeploymentResponse>(),
        interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? [],
        wrapping: { try await self.createDeployment(request: $0, context: $1) }
      )

    case "GetDeployment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetDeploymentRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetDeploymentResponse>(),
        interceptors: self.interceptors?.makeGetDeploymentInterceptors() ?? [],
        wrapping: { try await self.getDeployment(request: $0, context: $1) }
      )

    case "GetDeploymentArtefacts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse>(),
        interceptors: self.interceptors?.makeGetDeploymentArtefactsInterceptors() ?? [],
        wrapping: { try await self.getDeploymentArtefacts(request: $0, responseStream: $1, context: $2) }
      )

    case "RegisterRunner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_RegisterRunnerRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_RegisterRunnerResponse>(),
        interceptors: self.interceptors?.makeRegisterRunnerInterceptors() ?? [],
        wrapping: { try await self.registerRunner(requestStream: $0, context: $1) }
      )

    case "UpdateDeploy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_UpdateDeployRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_UpdateDeployResponse>(),
        interceptors: self.interceptors?.makeUpdateDeployInterceptors() ?? [],
        wrapping: { try await self.updateDeploy(request: $0, context: $1) }
      )

    case "ReplaceDeploy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ReplaceDeployRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ReplaceDeployResponse>(),
        interceptors: self.interceptors?.makeReplaceDeployInterceptors() ?? [],
        wrapping: { try await self.replaceDeploy(request: $0, context: $1) }
      )

    case "StreamDeploymentLogs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse>(),
        interceptors: self.interceptors?.makeStreamDeploymentLogsInterceptors() ?? [],
        wrapping: { try await self.streamDeploymentLogs(requestStream: $0, context: $1) }
      )

    case "GetSchema":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetSchemaRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetSchemaResponse>(),
        interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? [],
        wrapping: { try await self.getSchema(request: $0, context: $1) }
      )

    case "PullSchema":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PullSchemaRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PullSchemaResponse>(),
        interceptors: self.interceptors?.makePullSchemaInterceptors() ?? [],
        wrapping: { try await self.pullSchema(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol Xyz_Block_Ftl_V1_ControllerServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>]

  /// - Returns: Interceptors to use when handling 'processList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProcessListInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_ProcessListRequest, Xyz_Block_Ftl_V1_ProcessListResponse>]

  /// - Returns: Interceptors to use when handling 'status'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStatusInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_StatusRequest, Xyz_Block_Ftl_V1_StatusResponse>]

  /// - Returns: Interceptors to use when handling 'getArtefactDiffs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetArtefactDiffsInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_GetArtefactDiffsRequest, Xyz_Block_Ftl_V1_GetArtefactDiffsResponse>]

  /// - Returns: Interceptors to use when handling 'uploadArtefact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadArtefactInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_UploadArtefactRequest, Xyz_Block_Ftl_V1_UploadArtefactResponse>]

  /// - Returns: Interceptors to use when handling 'createDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDeploymentInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_CreateDeploymentRequest, Xyz_Block_Ftl_V1_CreateDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'getDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDeploymentInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_GetDeploymentRequest, Xyz_Block_Ftl_V1_GetDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'getDeploymentArtefacts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDeploymentArtefactsInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_GetDeploymentArtefactsRequest, Xyz_Block_Ftl_V1_GetDeploymentArtefactsResponse>]

  /// - Returns: Interceptors to use when handling 'registerRunner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterRunnerInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_RegisterRunnerRequest, Xyz_Block_Ftl_V1_RegisterRunnerResponse>]

  /// - Returns: Interceptors to use when handling 'updateDeploy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDeployInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_UpdateDeployRequest, Xyz_Block_Ftl_V1_UpdateDeployResponse>]

  /// - Returns: Interceptors to use when handling 'replaceDeploy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReplaceDeployInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_ReplaceDeployRequest, Xyz_Block_Ftl_V1_ReplaceDeployResponse>]

  /// - Returns: Interceptors to use when handling 'streamDeploymentLogs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamDeploymentLogsInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_StreamDeploymentLogsRequest, Xyz_Block_Ftl_V1_StreamDeploymentLogsResponse>]

  /// - Returns: Interceptors to use when handling 'getSchema'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSchemaInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_GetSchemaRequest, Xyz_Block_Ftl_V1_GetSchemaResponse>]

  /// - Returns: Interceptors to use when handling 'pullSchema'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePullSchemaInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_PullSchemaRequest, Xyz_Block_Ftl_V1_PullSchemaResponse>]
}

public enum Xyz_Block_Ftl_V1_ControllerServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ControllerService",
    fullName: "xyz.block.ftl.v1.ControllerService",
    methods: [
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.ping,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.processList,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.status,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.getArtefactDiffs,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.uploadArtefact,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.createDeployment,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.getDeployment,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.getDeploymentArtefacts,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.registerRunner,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.updateDeploy,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.replaceDeploy,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.streamDeploymentLogs,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.getSchema,
      Xyz_Block_Ftl_V1_ControllerServiceServerMetadata.Methods.pullSchema,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/xyz.block.ftl.v1.ControllerService/Ping",
      type: GRPCCallType.unary
    )

    public static let processList = GRPCMethodDescriptor(
      name: "ProcessList",
      path: "/xyz.block.ftl.v1.ControllerService/ProcessList",
      type: GRPCCallType.unary
    )

    public static let status = GRPCMethodDescriptor(
      name: "Status",
      path: "/xyz.block.ftl.v1.ControllerService/Status",
      type: GRPCCallType.unary
    )

    public static let getArtefactDiffs = GRPCMethodDescriptor(
      name: "GetArtefactDiffs",
      path: "/xyz.block.ftl.v1.ControllerService/GetArtefactDiffs",
      type: GRPCCallType.unary
    )

    public static let uploadArtefact = GRPCMethodDescriptor(
      name: "UploadArtefact",
      path: "/xyz.block.ftl.v1.ControllerService/UploadArtefact",
      type: GRPCCallType.unary
    )

    public static let createDeployment = GRPCMethodDescriptor(
      name: "CreateDeployment",
      path: "/xyz.block.ftl.v1.ControllerService/CreateDeployment",
      type: GRPCCallType.unary
    )

    public static let getDeployment = GRPCMethodDescriptor(
      name: "GetDeployment",
      path: "/xyz.block.ftl.v1.ControllerService/GetDeployment",
      type: GRPCCallType.unary
    )

    public static let getDeploymentArtefacts = GRPCMethodDescriptor(
      name: "GetDeploymentArtefacts",
      path: "/xyz.block.ftl.v1.ControllerService/GetDeploymentArtefacts",
      type: GRPCCallType.serverStreaming
    )

    public static let registerRunner = GRPCMethodDescriptor(
      name: "RegisterRunner",
      path: "/xyz.block.ftl.v1.ControllerService/RegisterRunner",
      type: GRPCCallType.clientStreaming
    )

    public static let updateDeploy = GRPCMethodDescriptor(
      name: "UpdateDeploy",
      path: "/xyz.block.ftl.v1.ControllerService/UpdateDeploy",
      type: GRPCCallType.unary
    )

    public static let replaceDeploy = GRPCMethodDescriptor(
      name: "ReplaceDeploy",
      path: "/xyz.block.ftl.v1.ControllerService/ReplaceDeploy",
      type: GRPCCallType.unary
    )

    public static let streamDeploymentLogs = GRPCMethodDescriptor(
      name: "StreamDeploymentLogs",
      path: "/xyz.block.ftl.v1.ControllerService/StreamDeploymentLogs",
      type: GRPCCallType.clientStreaming
    )

    public static let getSchema = GRPCMethodDescriptor(
      name: "GetSchema",
      path: "/xyz.block.ftl.v1.ControllerService/GetSchema",
      type: GRPCCallType.unary
    )

    public static let pullSchema = GRPCMethodDescriptor(
      name: "PullSchema",
      path: "/xyz.block.ftl.v1.ControllerService/PullSchema",
      type: GRPCCallType.serverStreaming
    )
  }
}
/// RunnerService is the service that executes Deployments.
///
/// The Controller will scale the Runner horizontally as required. The Runner will
/// register itself automatically with the ControllerService, which will then
/// assign modules to it.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Xyz_Block_Ftl_V1_RunnerServiceProvider: CallHandlerProvider {
  var interceptors: Xyz_Block_Ftl_V1_RunnerServiceServerInterceptorFactoryProtocol? { get }

  func ping(request: Xyz_Block_Ftl_V1_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_PingResponse>

  /// Reserve synchronously reserves a Runner for a deployment but does nothing else.
  func reserve(request: Xyz_Block_Ftl_V1_ReserveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_ReserveResponse>

  /// Initiate a deployment on this Runner.
  func deploy(request: Xyz_Block_Ftl_V1_DeployRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_DeployResponse>

  /// Terminate the deployment on this Runner.
  func terminate(request: Xyz_Block_Ftl_V1_TerminateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_RegisterRunnerRequest>
}

extension Xyz_Block_Ftl_V1_RunnerServiceProvider {
  public var serviceName: Substring {
    return Xyz_Block_Ftl_V1_RunnerServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PingRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "Reserve":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ReserveRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ReserveResponse>(),
        interceptors: self.interceptors?.makeReserveInterceptors() ?? [],
        userFunction: self.reserve(request:context:)
      )

    case "Deploy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_DeployRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_DeployResponse>(),
        interceptors: self.interceptors?.makeDeployInterceptors() ?? [],
        userFunction: self.deploy(request:context:)
      )

    case "Terminate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_TerminateRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_RegisterRunnerRequest>(),
        interceptors: self.interceptors?.makeTerminateInterceptors() ?? [],
        userFunction: self.terminate(request:context:)
      )

    default:
      return nil
    }
  }
}

/// RunnerService is the service that executes Deployments.
///
/// The Controller will scale the Runner horizontally as required. The Runner will
/// register itself automatically with the ControllerService, which will then
/// assign modules to it.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xyz_Block_Ftl_V1_RunnerServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xyz_Block_Ftl_V1_RunnerServiceServerInterceptorFactoryProtocol? { get }

  func ping(
    request: Xyz_Block_Ftl_V1_PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_PingResponse

  /// Reserve synchronously reserves a Runner for a deployment but does nothing else.
  func reserve(
    request: Xyz_Block_Ftl_V1_ReserveRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_ReserveResponse

  /// Initiate a deployment on this Runner.
  func deploy(
    request: Xyz_Block_Ftl_V1_DeployRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_DeployResponse

  /// Terminate the deployment on this Runner.
  func terminate(
    request: Xyz_Block_Ftl_V1_TerminateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_RegisterRunnerRequest
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_RunnerServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xyz_Block_Ftl_V1_RunnerServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Xyz_Block_Ftl_V1_RunnerServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Xyz_Block_Ftl_V1_RunnerServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PingRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    case "Reserve":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ReserveRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ReserveResponse>(),
        interceptors: self.interceptors?.makeReserveInterceptors() ?? [],
        wrapping: { try await self.reserve(request: $0, context: $1) }
      )

    case "Deploy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_DeployRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_DeployResponse>(),
        interceptors: self.interceptors?.makeDeployInterceptors() ?? [],
        wrapping: { try await self.deploy(request: $0, context: $1) }
      )

    case "Terminate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_TerminateRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_RegisterRunnerRequest>(),
        interceptors: self.interceptors?.makeTerminateInterceptors() ?? [],
        wrapping: { try await self.terminate(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Xyz_Block_Ftl_V1_RunnerServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>]

  /// - Returns: Interceptors to use when handling 'reserve'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReserveInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_ReserveRequest, Xyz_Block_Ftl_V1_ReserveResponse>]

  /// - Returns: Interceptors to use when handling 'deploy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeployInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_DeployRequest, Xyz_Block_Ftl_V1_DeployResponse>]

  /// - Returns: Interceptors to use when handling 'terminate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTerminateInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_TerminateRequest, Xyz_Block_Ftl_V1_RegisterRunnerRequest>]
}

public enum Xyz_Block_Ftl_V1_RunnerServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RunnerService",
    fullName: "xyz.block.ftl.v1.RunnerService",
    methods: [
      Xyz_Block_Ftl_V1_RunnerServiceServerMetadata.Methods.ping,
      Xyz_Block_Ftl_V1_RunnerServiceServerMetadata.Methods.reserve,
      Xyz_Block_Ftl_V1_RunnerServiceServerMetadata.Methods.deploy,
      Xyz_Block_Ftl_V1_RunnerServiceServerMetadata.Methods.terminate,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/xyz.block.ftl.v1.RunnerService/Ping",
      type: GRPCCallType.unary
    )

    public static let reserve = GRPCMethodDescriptor(
      name: "Reserve",
      path: "/xyz.block.ftl.v1.RunnerService/Reserve",
      type: GRPCCallType.unary
    )

    public static let deploy = GRPCMethodDescriptor(
      name: "Deploy",
      path: "/xyz.block.ftl.v1.RunnerService/Deploy",
      type: GRPCCallType.unary
    )

    public static let terminate = GRPCMethodDescriptor(
      name: "Terminate",
      path: "/xyz.block.ftl.v1.RunnerService/Terminate",
      type: GRPCCallType.unary
    )
  }
}
/// AdminService is the service that provides and updates admin data. For example,
/// it is used to encapsulate configuration and secrets.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Xyz_Block_Ftl_V1_AdminServiceProvider: CallHandlerProvider {
  var interceptors: Xyz_Block_Ftl_V1_AdminServiceServerInterceptorFactoryProtocol? { get }

  func ping(request: Xyz_Block_Ftl_V1_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_PingResponse>

  /// List configuration.
  func configList(request: Xyz_Block_Ftl_V1_ListConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_ListConfigResponse>

  /// Get a config value.
  func configGet(request: Xyz_Block_Ftl_V1_GetConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_GetConfigResponse>

  /// Set a config value.
  func configSet(request: Xyz_Block_Ftl_V1_SetConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_SetConfigResponse>

  /// Unset a config value.
  func configUnset(request: Xyz_Block_Ftl_V1_UnsetConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_UnsetConfigResponse>

  /// List secrets.
  func secretsList(request: Xyz_Block_Ftl_V1_ListSecretsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_ListSecretsResponse>

  /// Get a secret.
  func secretGet(request: Xyz_Block_Ftl_V1_GetSecretRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_GetSecretResponse>

  /// Set a secret.
  func secretSet(request: Xyz_Block_Ftl_V1_SetSecretRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_SetSecretResponse>

  /// Unset a secret.
  func secretUnset(request: Xyz_Block_Ftl_V1_UnsetSecretRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xyz_Block_Ftl_V1_UnsetSecretResponse>
}

extension Xyz_Block_Ftl_V1_AdminServiceProvider {
  public var serviceName: Substring {
    return Xyz_Block_Ftl_V1_AdminServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PingRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "ConfigList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ListConfigRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ListConfigResponse>(),
        interceptors: self.interceptors?.makeConfigListInterceptors() ?? [],
        userFunction: self.configList(request:context:)
      )

    case "ConfigGet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetConfigRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetConfigResponse>(),
        interceptors: self.interceptors?.makeConfigGetInterceptors() ?? [],
        userFunction: self.configGet(request:context:)
      )

    case "ConfigSet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_SetConfigRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_SetConfigResponse>(),
        interceptors: self.interceptors?.makeConfigSetInterceptors() ?? [],
        userFunction: self.configSet(request:context:)
      )

    case "ConfigUnset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_UnsetConfigRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_UnsetConfigResponse>(),
        interceptors: self.interceptors?.makeConfigUnsetInterceptors() ?? [],
        userFunction: self.configUnset(request:context:)
      )

    case "SecretsList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ListSecretsRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ListSecretsResponse>(),
        interceptors: self.interceptors?.makeSecretsListInterceptors() ?? [],
        userFunction: self.secretsList(request:context:)
      )

    case "SecretGet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetSecretRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetSecretResponse>(),
        interceptors: self.interceptors?.makeSecretGetInterceptors() ?? [],
        userFunction: self.secretGet(request:context:)
      )

    case "SecretSet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_SetSecretRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_SetSecretResponse>(),
        interceptors: self.interceptors?.makeSecretSetInterceptors() ?? [],
        userFunction: self.secretSet(request:context:)
      )

    case "SecretUnset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_UnsetSecretRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_UnsetSecretResponse>(),
        interceptors: self.interceptors?.makeSecretUnsetInterceptors() ?? [],
        userFunction: self.secretUnset(request:context:)
      )

    default:
      return nil
    }
  }
}

/// AdminService is the service that provides and updates admin data. For example,
/// it is used to encapsulate configuration and secrets.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xyz_Block_Ftl_V1_AdminServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xyz_Block_Ftl_V1_AdminServiceServerInterceptorFactoryProtocol? { get }

  func ping(
    request: Xyz_Block_Ftl_V1_PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_PingResponse

  /// List configuration.
  func configList(
    request: Xyz_Block_Ftl_V1_ListConfigRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_ListConfigResponse

  /// Get a config value.
  func configGet(
    request: Xyz_Block_Ftl_V1_GetConfigRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_GetConfigResponse

  /// Set a config value.
  func configSet(
    request: Xyz_Block_Ftl_V1_SetConfigRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_SetConfigResponse

  /// Unset a config value.
  func configUnset(
    request: Xyz_Block_Ftl_V1_UnsetConfigRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_UnsetConfigResponse

  /// List secrets.
  func secretsList(
    request: Xyz_Block_Ftl_V1_ListSecretsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_ListSecretsResponse

  /// Get a secret.
  func secretGet(
    request: Xyz_Block_Ftl_V1_GetSecretRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_GetSecretResponse

  /// Set a secret.
  func secretSet(
    request: Xyz_Block_Ftl_V1_SetSecretRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_SetSecretResponse

  /// Unset a secret.
  func secretUnset(
    request: Xyz_Block_Ftl_V1_UnsetSecretRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xyz_Block_Ftl_V1_UnsetSecretResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xyz_Block_Ftl_V1_AdminServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xyz_Block_Ftl_V1_AdminServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Xyz_Block_Ftl_V1_AdminServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Xyz_Block_Ftl_V1_AdminServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_PingRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    case "ConfigList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ListConfigRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ListConfigResponse>(),
        interceptors: self.interceptors?.makeConfigListInterceptors() ?? [],
        wrapping: { try await self.configList(request: $0, context: $1) }
      )

    case "ConfigGet":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetConfigRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetConfigResponse>(),
        interceptors: self.interceptors?.makeConfigGetInterceptors() ?? [],
        wrapping: { try await self.configGet(request: $0, context: $1) }
      )

    case "ConfigSet":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_SetConfigRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_SetConfigResponse>(),
        interceptors: self.interceptors?.makeConfigSetInterceptors() ?? [],
        wrapping: { try await self.configSet(request: $0, context: $1) }
      )

    case "ConfigUnset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_UnsetConfigRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_UnsetConfigResponse>(),
        interceptors: self.interceptors?.makeConfigUnsetInterceptors() ?? [],
        wrapping: { try await self.configUnset(request: $0, context: $1) }
      )

    case "SecretsList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_ListSecretsRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_ListSecretsResponse>(),
        interceptors: self.interceptors?.makeSecretsListInterceptors() ?? [],
        wrapping: { try await self.secretsList(request: $0, context: $1) }
      )

    case "SecretGet":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_GetSecretRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_GetSecretResponse>(),
        interceptors: self.interceptors?.makeSecretGetInterceptors() ?? [],
        wrapping: { try await self.secretGet(request: $0, context: $1) }
      )

    case "SecretSet":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_SetSecretRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_SetSecretResponse>(),
        interceptors: self.interceptors?.makeSecretSetInterceptors() ?? [],
        wrapping: { try await self.secretSet(request: $0, context: $1) }
      )

    case "SecretUnset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xyz_Block_Ftl_V1_UnsetSecretRequest>(),
        responseSerializer: ProtobufSerializer<Xyz_Block_Ftl_V1_UnsetSecretResponse>(),
        interceptors: self.interceptors?.makeSecretUnsetInterceptors() ?? [],
        wrapping: { try await self.secretUnset(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Xyz_Block_Ftl_V1_AdminServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_PingRequest, Xyz_Block_Ftl_V1_PingResponse>]

  /// - Returns: Interceptors to use when handling 'configList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigListInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_ListConfigRequest, Xyz_Block_Ftl_V1_ListConfigResponse>]

  /// - Returns: Interceptors to use when handling 'configGet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigGetInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_GetConfigRequest, Xyz_Block_Ftl_V1_GetConfigResponse>]

  /// - Returns: Interceptors to use when handling 'configSet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigSetInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_SetConfigRequest, Xyz_Block_Ftl_V1_SetConfigResponse>]

  /// - Returns: Interceptors to use when handling 'configUnset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigUnsetInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_UnsetConfigRequest, Xyz_Block_Ftl_V1_UnsetConfigResponse>]

  /// - Returns: Interceptors to use when handling 'secretsList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSecretsListInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_ListSecretsRequest, Xyz_Block_Ftl_V1_ListSecretsResponse>]

  /// - Returns: Interceptors to use when handling 'secretGet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSecretGetInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_GetSecretRequest, Xyz_Block_Ftl_V1_GetSecretResponse>]

  /// - Returns: Interceptors to use when handling 'secretSet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSecretSetInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_SetSecretRequest, Xyz_Block_Ftl_V1_SetSecretResponse>]

  /// - Returns: Interceptors to use when handling 'secretUnset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSecretUnsetInterceptors() -> [ServerInterceptor<Xyz_Block_Ftl_V1_UnsetSecretRequest, Xyz_Block_Ftl_V1_UnsetSecretResponse>]
}

public enum Xyz_Block_Ftl_V1_AdminServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AdminService",
    fullName: "xyz.block.ftl.v1.AdminService",
    methods: [
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.ping,
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.configList,
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.configGet,
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.configSet,
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.configUnset,
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.secretsList,
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.secretGet,
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.secretSet,
      Xyz_Block_Ftl_V1_AdminServiceServerMetadata.Methods.secretUnset,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/xyz.block.ftl.v1.AdminService/Ping",
      type: GRPCCallType.unary
    )

    public static let configList = GRPCMethodDescriptor(
      name: "ConfigList",
      path: "/xyz.block.ftl.v1.AdminService/ConfigList",
      type: GRPCCallType.unary
    )

    public static let configGet = GRPCMethodDescriptor(
      name: "ConfigGet",
      path: "/xyz.block.ftl.v1.AdminService/ConfigGet",
      type: GRPCCallType.unary
    )

    public static let configSet = GRPCMethodDescriptor(
      name: "ConfigSet",
      path: "/xyz.block.ftl.v1.AdminService/ConfigSet",
      type: GRPCCallType.unary
    )

    public static let configUnset = GRPCMethodDescriptor(
      name: "ConfigUnset",
      path: "/xyz.block.ftl.v1.AdminService/ConfigUnset",
      type: GRPCCallType.unary
    )

    public static let secretsList = GRPCMethodDescriptor(
      name: "SecretsList",
      path: "/xyz.block.ftl.v1.AdminService/SecretsList",
      type: GRPCCallType.unary
    )

    public static let secretGet = GRPCMethodDescriptor(
      name: "SecretGet",
      path: "/xyz.block.ftl.v1.AdminService/SecretGet",
      type: GRPCCallType.unary
    )

    public static let secretSet = GRPCMethodDescriptor(
      name: "SecretSet",
      path: "/xyz.block.ftl.v1.AdminService/SecretSet",
      type: GRPCCallType.unary
    )

    public static let secretUnset = GRPCMethodDescriptor(
      name: "SecretUnset",
      path: "/xyz.block.ftl.v1.AdminService/SecretUnset",
      type: GRPCCallType.unary
    )
  }
}
