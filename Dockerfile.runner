FROM ubuntu:22.04 AS builder
RUN apt update
RUN apt install -y curl git

# Copy Hermit bin stubs and install all packages. This is done
# separately so that Docker will cache the tools correctly.
COPY ./bin /src/bin
ENV PATH="/src/bin:$PATH"
ENV HERMIT_STATE_DIR=/hermit
RUN hermit install
RUN hermit uninstall jbr
RUN hermit install openjre-18.0.2.1_1
# openjre and jbr conflict, but we want the JRE in the cache
RUN hermit uninstall openjre
RUN hermit install jbr

WORKDIR /src

# Download Go dependencies separately so Docker will cache them
COPY go.mod go.sum /src/
RUN go mod download -x

# Build runtime
COPY kotlin-runtime /src/kotlin-runtime
COPY protos /src/protos
RUN cd kotlin-runtime/ftl-runtime && gradle --info jar


# Build runner
COPY . /src/
RUN make build/release/ftl-runner
RUN make build/release/ftl

# Finally create the runtime image.
FROM ubuntu:22.04

WORKDIR /root/

ENV PATH="/root/jre/bin:$PATH"
COPY --from=builder /hermit/pkg/openjre-18.0.2.1_1/ ./jre/
COPY --from=builder /src/kotlin-runtime/ftl-runtime/build/libs/ftl-runtime.jar template/ftl/jars/
COPY --from=builder /src/build/release/ftl-runner .
COPY --from=builder /src/build/release/ftl .
RUN mkdir deployments

EXPOSE 8894

ENV FTL_ENDPOINT="http://host.docker.internal:8892"
ENV FTL_RUNNER_BIND="http://0.0.0.0:8899"
ENV FTL_RUNNER_ADVERTISE="http://127.0.0.1:8899"

CMD ["/root/ftl-runner", "--language=kotlin", "--language=go", "--template-dir=template", "--deployment-dir=deployments"]
