// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Config {
    #[prost(message, optional, tag="1")]
    pub config: ::core::option::Option<super::super::schema::v1::Config>,
    #[prost(message, repeated, tag="2")]
    pub references: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Data {
    #[prost(message, optional, tag="1")]
    pub data: ::core::option::Option<super::super::schema::v1::Data>,
    #[prost(string, tag="2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub references: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Database {
    #[prost(message, optional, tag="1")]
    pub database: ::core::option::Option<super::super::schema::v1::Database>,
    #[prost(message, repeated, tag="2")]
    pub references: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enum {
    #[prost(message, optional, tag="1")]
    pub r#enum: ::core::option::Option<super::super::schema::v1::Enum>,
    #[prost(message, repeated, tag="2")]
    pub references: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Topic {
    #[prost(message, optional, tag="1")]
    pub topic: ::core::option::Option<super::super::schema::v1::Topic>,
    #[prost(message, repeated, tag="2")]
    pub references: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypeAlias {
    #[prost(message, optional, tag="1")]
    pub typealias: ::core::option::Option<super::super::schema::v1::TypeAlias>,
    #[prost(message, repeated, tag="2")]
    pub references: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Secret {
    #[prost(message, optional, tag="1")]
    pub secret: ::core::option::Option<super::super::schema::v1::Secret>,
    #[prost(message, repeated, tag="2")]
    pub references: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Verb {
    #[prost(message, optional, tag="1")]
    pub verb: ::core::option::Option<super::super::schema::v1::Verb>,
    #[prost(string, tag="2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub json_request_schema: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="4")]
    pub references: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Module {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub deployment_key: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub language: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="5")]
    pub verbs: ::prost::alloc::vec::Vec<Verb>,
    #[prost(message, repeated, tag="6")]
    pub data: ::prost::alloc::vec::Vec<Data>,
    #[prost(message, repeated, tag="7")]
    pub secrets: ::prost::alloc::vec::Vec<Secret>,
    #[prost(message, repeated, tag="8")]
    pub configs: ::prost::alloc::vec::Vec<Config>,
    #[prost(message, repeated, tag="9")]
    pub databases: ::prost::alloc::vec::Vec<Database>,
    #[prost(message, repeated, tag="10")]
    pub enums: ::prost::alloc::vec::Vec<Enum>,
    #[prost(message, repeated, tag="11")]
    pub topics: ::prost::alloc::vec::Vec<Topic>,
    #[prost(message, repeated, tag="12")]
    pub typealiases: ::prost::alloc::vec::Vec<TypeAlias>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TopologyGroup {
    #[prost(string, repeated, tag="1")]
    pub modules: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Topology {
    #[prost(message, repeated, tag="1")]
    pub levels: ::prost::alloc::vec::Vec<TopologyGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetModulesRequest {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetModulesResponse {
    #[prost(message, repeated, tag="1")]
    pub modules: ::prost::alloc::vec::Vec<Module>,
    #[prost(message, optional, tag="2")]
    pub topology: ::core::option::Option<Topology>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StreamModulesRequest {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamModulesResponse {
    #[prost(message, repeated, tag="1")]
    pub modules: ::prost::alloc::vec::Vec<Module>,
    #[prost(message, optional, tag="2")]
    pub topology: ::core::option::Option<Topology>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConfigRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConfigResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConfigRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes="bytes", tag="3")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConfigResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSecretRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes="bytes", tag="3")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSecretResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
// @@protoc_insertion_point(module)
