// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDeploymentContextRequest {
    #[prost(string, tag="1")]
    pub deployment: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDeploymentContextResponse {
    #[prost(string, tag="1")]
    pub module: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub deployment: ::prost::alloc::string::String,
    #[prost(map="string, bytes", tag="3")]
    pub configs: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::bytes::Bytes>,
    #[prost(map="string, bytes", tag="4")]
    pub secrets: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::bytes::Bytes>,
    #[prost(message, repeated, tag="5")]
    pub databases: ::prost::alloc::vec::Vec<get_deployment_context_response::Dsn>,
    #[prost(message, repeated, tag="6")]
    pub routes: ::prost::alloc::vec::Vec<get_deployment_context_response::Route>,
}
/// Nested message and enum types in `GetDeploymentContextResponse`.
pub mod get_deployment_context_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Dsn {
        #[prost(string, tag="1")]
        pub name: ::prost::alloc::string::String,
        #[prost(enumeration="DbType", tag="2")]
        pub r#type: i32,
        #[prost(string, tag="3")]
        pub dsn: ::prost::alloc::string::String,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Route {
        #[prost(string, tag="1")]
        pub deployment: ::prost::alloc::string::String,
        #[prost(string, tag="2")]
        pub uri: ::prost::alloc::string::String,
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum DbType {
        Unspecified = 0,
        Postgres = 1,
        Mysql = 2,
    }
    impl DbType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "DB_TYPE_UNSPECIFIED",
                Self::Postgres => "DB_TYPE_POSTGRES",
                Self::Mysql => "DB_TYPE_MYSQL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DB_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "DB_TYPE_POSTGRES" => Some(Self::Postgres),
                "DB_TYPE_MYSQL" => Some(Self::Mysql),
                _ => None,
            }
        }
    }
}
// @@protoc_insertion_point(module)
