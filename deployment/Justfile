_help:
  @just -l

registry_full := "k3d-ftl-registry.localhost:5000"
registry_short := "ftl-registry.localhost"
registry_full_nolocal := "k3d-ftl-registry:5000"
registry_local := "localhost:5000"

mirrors := '''
  mirrors:
    "ftl:5000":
      endpoint:
        - "http://''' + registry_full + '''"
'''

start: setup full-deploy

rm: teardown

full-deploy: build-controller build-runner setup-cluster
  #!/bin/bash
  kubectl rollout restart deployment ftl-controller || true # if this exists already restart it to get the latest image
  just apply || sleep 5 # wait for CRDs to be created, the initial apply will usually fail
  just apply

wait-for-kube:
  #!/bin/bash
  while [ -z "$(kubectl get pod ftl-pg-cluster-1-0)" ]; do sleep 1; done
  kubectl wait --for=condition=ready pod/ftl-pg-cluster-1-0 --timeout=5m
  kubectl wait --for=condition=available deployment/ftl-controller --timeout=5m
  sleep 1
  ftl status


setup-registry:
  #!/bin/bash
  if [ -z "$(k3d registry list | grep {{registry_short}})" ]; then
  k3d registry create {{registry_short}} --port 5000
  fi

setup-cluster: setup-registry
  #!/bin/bash
  if [ -z "$(k3d cluster list | grep ftl)" ]; then
  k3d cluster create ftl --api-port 6550 -p "8892:80@loadbalancer"  --agents 2 \
      --registry-use {{registry_full}} \
      --registry-config '{{mirrors}}' && \  # Start installing the DB for performance reasons
      kubectl apply -k base/db-create || sleep 5 && \ # wait for CRDs to be created, the initial apply will usually fail
      kubectl apply -k base/db-create & # background the process, so we can do other things and speed up the test
  fi
  kubectl config set-context --current --namespace=default



install-istio:
  #!/bin/bash
  if [ -z "$(kubectl get namespace | grep istio-system)" ]; then
      kubectl create namespace istio-system
      helm repo add istio https://istio-release.storage.googleapis.com/charts
      helm repo update
      helm install istio-base istio/base -n istio-system --wait
      helm install istiod istio/istiod -n istio-system --wait
  fi
  kubectl label namespace default istio-injection=enabled --overwrite
  kubectl kustomize --load-restrictor=LoadRestrictionsNone istio | kubectl apply -f -



setup: setup-registry setup-cluster

teardown-registry:
  k3d registry delete {{registry_short}}

teardown-cluster:
  k3d cluster delete ftl

teardown: teardown-cluster teardown-registry

apply:
  kubectl kustomize --load-restrictor=LoadRestrictionsNone overlays/dev | kubectl apply -f -

delete:
  kubectl kustomize --load-restrictor=LoadRestrictionsNone overlays/dev | kubectl delete -f -

delete-db:
  kubectl delete pvc postgres-db-ftl-pg-cluster-1-0

events:
  kubectl get events -w

ps:
  kubectl get deployment,pod,statefulset,svc,configmap,pv,pvc,ingress -o wide

logs *args:
  kubectl logs -f {{args}}

exec pod *args:
  kubectl exec -t {{pod}} -- {{args}}

enter pod *args="bash":
  kubectl exec -it {{pod}} -- {{args}}

psql:
  just enter statefulset.apps/ftl-pg-cluster-1 env PGPASSWORD=secret psql -U postgres ftl

ftl-status:
  just exec deployment/ftl-controller ./ftl status

build-executables:
  # we build locally then copy into the docker files
  # it is way faster than building in the docker files
  mkdir -p "docker-build"
  cd ../ && GOARCH=amd64 GOOS=linux CGO_ENABLED=0 just build ftl-controller ftl-runner ftl-initdb ftl
  cp ../build/release/* ./docker-build/

build-controller: build-executables setup-registry setup-cluster
  docker build --platform linux/amd64 -t ftl-controller:latest -f Dockerfile.controller.test .
  docker tag ftl-controller:latest {{registry_local}}/ftl-controller:latest
  docker push {{registry_local}}/ftl-controller:latest

build-runner: build-executables setup-registry setup-cluster
  docker build --platform linux/amd64 -t ftl-runner:latest -f Dockerfile.runner.test .
  docker tag ftl-runner:latest {{registry_local}}/ftl-runner:latest
  docker push {{registry_local}}/ftl-runner:latest

build: build-controller build-runner

deploy path:
	#!/usr/bin/env bash
	set -euxo pipefail
	rm -f ftl.tar.gz
	COPYFILE_DISABLE=1 tar -cf ftl.tar -C .. .
	export POD=$(kubectl get pods -l app=ftl-controller --no-headers | tail -1 | awk '{print $1}')
	kubectl exec -it ${POD} -- apt install -y golang
	kubectl exec -it ${POD} -- rm -rf /tmp/ftl/
	kubectl exec -it ${POD} -- mkdir -p /tmp/ftl/
	kubectl cp ftl.tar ${POD}:/tmp/ftl/ftl.tar
	kubectl exec -it ${POD} -- tar --warning=no-unknown-keyword -tf /tmp/ftl/ftl.tar
	kubectl exec -it ${POD} -- tar -xf /tmp/ftl/ftl.tar -C /tmp/ftl/
	kubectl exec -it ${POD} -- bash -c "cd /tmp/ftl && FTL_ENDPOINT=http://ftl-controller:8892 /root/ftl deploy {{path}}"
	rm -f ftl.tar.gz

ftl *args:
	#!/usr/bin/env bash
	set -euxo pipefail
	export POD=$(kubectl get pods -l app=ftl-controller --no-headers | tail -1 | awk '{print $1}')
	kubectl exec -it ${POD} -- bash -c "FTL_ENDPOINT=http://ftl-controller:8892 /root/ftl {{args}}"

update-schema:
	#!/usr/bin/env bash
	cat <<EOF >base/db-migrate/kustomization.yml
	#generated by 'just update-schema' command, DO NOT EDIT
	apiVersion: kustomize.config.k8s.io/v1beta1
	kind: Kustomization
	resources:
	- db-migrate.yml
	configMapGenerator:
	- name: ftl-db-migrate-config
	  files:
	EOF
	for file in $(ls base/db-migrate/schema/*.sql); do
	  echo "  - ./schema/$(basename $file)" >> base/db-migrate/kustomization.yml
	done

