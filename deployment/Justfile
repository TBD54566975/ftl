# Display all available just commands with descriptions
_help:
  @just -l

registry_full := "k3d-ftl-registry.localhost:5000"
registry_short := "ftl-registry.localhost"
registry_full_nolocal := "k3d-ftl-registry:5000"
registry_local := "localhost:5000"

mirrors := '''
  mirrors:
    "ftl:5000":
      endpoint:
        - "http://''' + registry_full + '''"
'''

# Start the FTL environment by setting up and deploying everything
start: setup full-deploy

# Remove/teardown the FTL environment
rm: teardown

# Deploy all components after building images and setting up Istio
full-deploy: build-all-images setup-istio-cluster
  #!/bin/bash
  kubectl rollout restart deployment ftl-controller || true # if this exists already restart it to get the latest image
  kubectl rollout restart deployment ftl-provisioner || true # if this exists already restart it to get the latest image
  kubectl rollout restart deployment ftl-cron || true # if this exists already restart it to get the latest image
  kubectl rollout restart deployment ftl-http-ingress || true # if this exists already restart it to get the latest image
  kubectl rollout restart deployment ftl-timeline || true # if this exists already restart it to get the latest image
  kubectl rollout restart deployment ftl-console || true # if this exists already restart it to get the latest image
  just apply || sleep 5 # wait for CRDs to be created, the initial apply will usually fail
  just apply

# Wait for core Kubernetes components to be ready
wait-for-kube:
  #!/bin/bash
  while [ -z "$(kubectl get pod ftl-postgresql-0)" ]; do sleep 1; done
  kubectl wait --for=condition=ready pod/ftl-postgresql-0 --timeout=5m
  kubectl wait --for=condition=available deployment/ftl-timeline --timeout=5m
  kubectl wait --for=condition=available deployment/ftl-console --timeout=5m
  kubectl wait --for=condition=available deployment/ftl-controller --timeout=5m
  kubectl wait --for=condition=available deployment/ftl-http-ingress --timeout=5m
  kubectl wait --for=condition=available deployment/registry --timeout=5m
  sleep 1
  ftl status || sleep 5 && ftl status

# Wait for FTL version upgrade to complete
wait-for-version-upgrade oldversion:
  #!/bin/bash
  while [ "$(ftl status | yq '.controllers[0].version')" == {{oldversion}} ]; do sleep 1; done
  ftl status

# Set up local container registry
setup-registry:
  #!/bin/bash
  if [ -z "$(k3d registry list | grep {{registry_short}})" ]; then
  k3d registry create {{registry_short}} --port 5000
  fi

# Set up Kubernetes cluster with registry configuration
setup-cluster: setup-registry
  #!/bin/bash
  bash -c "cd ../ && just chart dep-update"
  if [ -z "$(k3d cluster list | grep ftl)" ]; then
  k3d cluster create ftl --api-port 6550 -p "8892:80@loadbalancer" -p "8891:80@loadbalancer" -p "8893:80@loadbalancer" --agents 2 \
      --registry-use {{registry_full}} \
      --registry-config '{{mirrors}}'\
      --k3s-arg '--kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1%@agent:*' \
      --k3s-arg '--kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%@agent:*'
  fi
  kubectl config set-context --current --namespace=default

# Set up cluster with Istio service mesh
setup-istio-cluster: setup-cluster
  #!/bin/bash
  if [ -z "$(kubectl get namespace | grep istio-system)" ]; then
      kubectl create namespace istio-system
      helm repo add istio https://istio-release.storage.googleapis.com/charts
      helm repo update
      helm install istio-base istio/base -n istio-system --wait --version 1.23.3
      helm install istiod istio/istiod -n istio-system --wait --version 1.23.3
  fi
  kubectl label namespace default istio-injection=enabled --overwrite
  kubectl apply -f istio-access-logs.yaml

# Complete setup of registry and Istio-enabled cluster
setup: setup-registry setup-istio-cluster

# Remove local container registry
teardown-registry:
  k3d registry delete {{registry_short}}

# Remove Kubernetes cluster
teardown-cluster:
  k3d cluster delete ftl

# Complete teardown of environment
teardown: teardown-cluster teardown-registry

# Apply Helm chart for FTL deployment
apply:
  kubectl delete job --ignore-not-found=true ftl-dbmig-latest
  helm upgrade --install ftl ../charts/ftl -f values.yaml

# Deploy specific version of FTL from Helm repository
deploy-version version: setup-istio-cluster
  helm repo add ftl https://tbd54566975.github.io/ftl-charts --force-update
  helm upgrade --install ftl ftl/ftl --version={{version}} -f values-release.yaml || sleep 5 # wait for CRDs to be created, the initial apply will usually fail
  helm upgrade --install ftl ftl/ftl --version={{version}} -f values-release.yaml

# Remove FTL Helm release
delete:
  helm uninstall ftl

# Delete PostgreSQL persistent volume claim
delete-db:
  kubectl delete pvc data-ftl-postgresql-0

# Watch Kubernetes events
events:
  kubectl get events -w

# Show status of all Kubernetes resources
ps:
  kubectl get deployment,pod,statefulset,svc,configmap,pv,pvc,ingress -o wide

# Stream logs from specified Kubernetes resources
logs *args:
  kubectl logs -f {{args}}

# Execute command in specified pod
exec pod *args:
  kubectl exec -t {{pod}} -- {{args}}

# Open interactive shell in specified pod
enter pod *args="bash":
  kubectl exec -it {{pod}} -- {{args}}

# Connect to PostgreSQL database
psql:
  just enter statefulset.apps/ftl-postgresql env PGPASSWORD=ftl psql -U ftl ftl

# Check FTL controller status
ftl-status:
  just exec deployment/ftl-controller ./ftl status

# Build and push all FTL images to local registry
build-all-images: setup-registry setup-istio-cluster
  #!/bin/bash
  for image in $(just -f ../Justfile list-docker-images); do
    just -f ../Justfile build-docker $image
    docker tag ftl0/ftl-$image:latest {{registry_local}}/ftl-$image:latest
    docker push {{registry_local}}/ftl-$image:latest
  done

delete-all-images:
  #!/bin/bash
  for image in $(just -f ../Justfile list-docker-images); do
    docker image rm {{registry_local}}/ftl-$image:latest ftl0/ftl-$image:latest || true
  done

# Build and push single FTL image to local registry
build-image image: setup-registry setup-istio-cluster
  just -f ../Justfile build-docker $image
  docker tag ftl0/ftl-$image:latest {{registry_local}}/ftl-$image:latest
  docker push {{registry_local}}/ftl-$image:latest

# Deploy FTL module from specified path
deploy path:
  #!/usr/bin/env bash
  set -euxo pipefail
  rm -f ftl.tar.gz
  COPYFILE_DISABLE=1 tar -cf ftl.tar -C .. .
  export POD=$(kubectl get pods -l app=ftl-controller --no-headers | tail -1 | awk '{print $1}')
  kubectl exec -it ${POD} -- apt install -y golang
  kubectl exec -it ${POD} -- rm -rf /tmp/ftl/
  kubectl exec -it ${POD} -- mkdir -p /tmp/ftl/
  kubectl cp ftl.tar ${POD}:/tmp/ftl/ftl.tar
  kubectl exec -it ${POD} -- tar --warning=no-unknown-keyword -tf /tmp/ftl/ftl.tar
  kubectl exec -it ${POD} -- tar -xf /tmp/ftl/ftl.tar -C /tmp/ftl/
  kubectl exec -it ${POD} -- bash -c "cd /tmp/ftl && FTL_ENDPOINT=http://ftl-controller:8892 /root/ftl deploy {{path}}"
  rm -f ftl.tar.gz

# Execute FTL CLI commands in the controller pod
ftl *args:
  #!/usr/bin/env bash
  set -euxo pipefail
  export POD=$(kubectl get pods -l app=ftl-controller --no-headers | tail -1 | awk '{print $1}')
  kubectl exec -it ${POD} -- bash -c "FTL_ENDPOINT=http://ftl-controller:8892 /root/ftl {{args}}"

