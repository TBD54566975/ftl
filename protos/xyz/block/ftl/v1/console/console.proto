syntax = "proto3";

package xyz.block.ftl.v1.console;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "xyz/block/ftl/v1/ftl.proto";
import "xyz/block/ftl/v1/schema/schema.proto";

option go_package = "github.com/TBD54566975/ftl/protos/xyz/block/ftl/v1/console;pbconsole";
option java_multiple_files = true;

message Call {
  optional string request_key = 1;
  string deployment_name = 2;
  google.protobuf.Timestamp time_stamp = 3;
  optional schema.VerbRef source_verb_ref = 4;
  schema.VerbRef destination_verb_ref = 5;
  google.protobuf.Duration duration = 6;
  string request = 7;
  string response = 8;
  optional string error = 9;
}

enum EventType {
  EVENT_TYPE_UNKNOWN = 0;
  EVENT_TYPE_DEPLOYMENT = 1;
  EVENT_TYPE_CALL = 2;
  EVENT_TYPE_LOG = 3;
}

enum DeploymentEventType {
  DEPLOYMENT_UNKNOWN = 0;
  DEPLOYMENT_CREATED = 1;
  DEPLOYMENT_UPDATED = 2;
  DEPLOYMENT_REPLACED = 3;
}

message Deployment {
  string name = 1;
  string language = 2;
  string module_name = 3;
  int32 min_replicas = 4;
  DeploymentEventType event_type = 5;
  optional string replaced = 6;
}

message LogEntry {
  string deployment_name = 1;
  optional string request_key = 2;
  google.protobuf.Timestamp time_stamp = 3;
  int32 log_level = 4;
  map<string, string> attributes = 5;
  string message = 6;
  optional string error = 7;
}

message Verb {
  schema.Verb verb = 1;
  string schema = 2;
  string json_request_schema = 3;
}

message Data {
  schema.Data data = 1;
  string schema = 2;
}

message Module {
  string name = 1;
  string deployment_name = 2;
  string language = 3;
  string schema = 4;
  repeated Verb verbs = 5;
  repeated Data data = 6;
}

message GetModulesRequest {}
message GetModulesResponse {
  repeated Module modules = 1;
}

message GetCallsRequest {
  string module = 1;
  string verb = 2;
}

message GetCallsResponse {
  repeated Call calls = 1;
}

message GetRequestCallsRequest {
  string request_key = 1;
}

message GetRequestCallsResponse {
  repeated Call calls = 1;
}

enum LogLevel {
  LOG_LEVEL_UNKNOWN = 0;
  LOG_LEVEL_TRACE = 1;
  LOG_LEVEL_DEBUG = 5;
  LOG_LEVEL_INFO = 9;
  LOG_LEVEL_WARN = 13;
  LOG_LEVEL_ERROR = 17;
}

// Query for timeline events.
message TimelineQuery {
  // Filters events by log level.
  message LogLevelFilter {
    LogLevel log_level = 1;
  }
  // Filters events by deployment name.
  message DeploymentFilter {
    repeated string deployments = 1;
  }
  // Filters events by request key.
  message RequestFilter {
    repeated string requests = 1;
  }
  // Filters events by event type.
  message EventTypeFilter {
    repeated EventType event_types = 1;
  }
  // Filters events by time.
  //
  // Either end of the time range can be omitted to indicate no bound.
  message TimeFilter {
    optional google.protobuf.Timestamp older_than = 1;
    optional google.protobuf.Timestamp newer_than = 2;
  }
  // Filters events by ID.
  //
  // Either end of the ID range can be omitted to indicate no bound.
  message IDFilter {
    optional int64 lower_than = 1;
    optional int64 higher_than = 2;
  }

  message Filter {
    // These map 1:1 with filters in backend/controller/internal/dal/events.go
    oneof filter {
      LogLevelFilter log_level = 1;
      DeploymentFilter deployments = 2;
      RequestFilter requests = 3;
      EventTypeFilter event_types = 4;
      TimeFilter time = 5;
      IDFilter id = 6;
    }
  }

  repeated Filter filters = 1;
  int32 limit = 2;
}

message StreamTimelineRequest {
  optional google.protobuf.Duration update_interval = 1;
  google.protobuf.Timestamp after_time = 2;
  string deployment_name = 3;
}

message StreamTimelineResponse {
  TimelineEvent event = 1;

  // If true there are more logs immediately following this one as part of the initial batch.
  // If false this is the last log in the initial batch, but others may follow later.
  bool more = 2;
}

message TimelineEvent {
  google.protobuf.Timestamp time_stamp = 1;
  // Unique ID for event.
  int64 id = 2;
  oneof entry {
    Call call = 3;
    Deployment deployment = 4;
    LogEntry log = 5;
  }
}

message StreamLogsRequest {
  optional google.protobuf.Duration update_interval = 1;
  google.protobuf.Timestamp after_time = 2;
  string deployment_name = 3;
}

message StreamLogsResponse {
  LogEntry log = 1;

  // If true there are more logs immediately following this one as part of the initial batch.
  // If false this is the last log in the initial batch, but others may follow later.
  bool more = 2;
}

message GetTimelineResponse {
  repeated TimelineEvent events = 1;

  // If true, there are more events past the limit of the query.
  // This is useful for pagination of the the timeline
  bool more = 2;
}

service ConsoleService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc GetModules(GetModulesRequest) returns (GetModulesResponse);
  rpc GetCalls(GetCallsRequest) returns (GetCallsResponse);
  rpc GetRequestCalls(GetRequestCallsRequest) returns (GetRequestCallsResponse);
  rpc StreamTimeline(StreamTimelineRequest) returns (stream StreamTimelineResponse);
  rpc GetTimeline(TimelineQuery) returns (GetTimelineResponse);
  rpc StreamLogs(StreamLogsRequest) returns (stream StreamLogsResponse);
}
