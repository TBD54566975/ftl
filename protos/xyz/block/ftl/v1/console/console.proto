syntax = "proto3";

package xyz.block.ftl.v1.console;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "xyz/block/ftl/v1/ftl.proto";
import "xyz/block/ftl/v1/schema/schema.proto";

option go_package = "github.com/TBD54566975/ftl/protos/xyz/block/ftl/v1/console;pbconsole";
option java_multiple_files = true;

message Call {
  string request_key = 1;
  string deployment_key = 2;
  google.protobuf.Timestamp time_stamp = 3;

  string source_module = 4;
  string source_verb = 5;
  string dest_module = 6;
  string dest_verb = 7;
  google.protobuf.Duration duration = 8;
  string request = 9;
  string response = 10;
  string error = 11;
}

message Deployment {
  string key = 1;
  string language = 2;
  string name = 3;
  int32 min_replicas = 4;
}

message TimelineEntry {
  google.protobuf.Timestamp time_stamp = 1;
  oneof entry {
    Call call = 2;
    Deployment deployment = 3;
  }
}

message Verb {
  schema.Verb verb = 1;
}

message Module {
  string name = 1;
  string deployment_key = 2;
  string language = 3;
  repeated Verb verbs = 4;
  repeated schema.Data data = 5;
}

message LogEntry {
  string deployment_key = 1;
  optional string request_key = 2;
  google.protobuf.Timestamp time_stamp = 3;
  int32 log_level = 4;
  map<string, string> attributes = 5;
  string message = 6;
  optional string error = 7;
}

message GetModulesRequest {}
message GetModulesResponse {
  repeated Module modules = 1;
}

message GetCallsRequest {
  string module = 1;
  string verb = 2;
}

message GetCallsResponse {
  repeated Call calls = 1;
}

message GetRequestCallsRequest {
  string request_key = 1;
}

message GetRequestCallsResponse {
  repeated Call calls = 1;
}

message GetTimelineRequest {
  string module = 1;
}

message GetTimelineResponse {
  repeated TimelineEntry entries = 1;
}

message StreamLogsRequest {
  optional google.protobuf.Duration update_interval = 1;
  google.protobuf.Timestamp after_time = 2;
  string deployment_key = 3;
}

message StreamLogsResponse {
  LogEntry log = 1;

  // If true there are more logs immediately following this one as part of the initial batch.
  // If false this is the last log in the initial batch, but others may follow later.
  bool more = 2;
}

service ConsoleService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc GetModules(GetModulesRequest) returns (GetModulesResponse);
  rpc GetCalls(GetCallsRequest) returns (GetCallsResponse);
  rpc GetRequestCalls(GetRequestCallsRequest) returns (GetRequestCallsResponse);
  rpc GetTimeline(GetTimelineRequest) returns (GetTimelineResponse);
  rpc StreamLogs(StreamLogsRequest) returns (stream StreamLogsResponse);
}
