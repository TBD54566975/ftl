// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v1/ftl.proto

package ftlv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/TBD54566975/ftl/protos/xyz/block/ftl/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// VerbServiceName is the fully-qualified name of the VerbService service.
	VerbServiceName = "xyz.block.ftl.v1.VerbService"
	// DevelServiceName is the fully-qualified name of the DevelService service.
	DevelServiceName = "xyz.block.ftl.v1.DevelService"
	// ControlPlaneServiceName is the fully-qualified name of the ControlPlaneService service.
	ControlPlaneServiceName = "xyz.block.ftl.v1.ControlPlaneService"
	// RunnerServiceName is the fully-qualified name of the RunnerService service.
	RunnerServiceName = "xyz.block.ftl.v1.RunnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VerbServicePingProcedure is the fully-qualified name of the VerbService's Ping RPC.
	VerbServicePingProcedure = "/xyz.block.ftl.v1.VerbService/Ping"
	// VerbServiceCallProcedure is the fully-qualified name of the VerbService's Call RPC.
	VerbServiceCallProcedure = "/xyz.block.ftl.v1.VerbService/Call"
	// VerbServiceListProcedure is the fully-qualified name of the VerbService's List RPC.
	VerbServiceListProcedure = "/xyz.block.ftl.v1.VerbService/List"
	// DevelServicePingProcedure is the fully-qualified name of the DevelService's Ping RPC.
	DevelServicePingProcedure = "/xyz.block.ftl.v1.DevelService/Ping"
	// DevelServicePushSchemaProcedure is the fully-qualified name of the DevelService's PushSchema RPC.
	DevelServicePushSchemaProcedure = "/xyz.block.ftl.v1.DevelService/PushSchema"
	// DevelServicePullSchemaProcedure is the fully-qualified name of the DevelService's PullSchema RPC.
	DevelServicePullSchemaProcedure = "/xyz.block.ftl.v1.DevelService/PullSchema"
	// ControlPlaneServicePingProcedure is the fully-qualified name of the ControlPlaneService's Ping
	// RPC.
	ControlPlaneServicePingProcedure = "/xyz.block.ftl.v1.ControlPlaneService/Ping"
	// ControlPlaneServiceGetArtefactDiffsProcedure is the fully-qualified name of the
	// ControlPlaneService's GetArtefactDiffs RPC.
	ControlPlaneServiceGetArtefactDiffsProcedure = "/xyz.block.ftl.v1.ControlPlaneService/GetArtefactDiffs"
	// ControlPlaneServiceUploadArtefactProcedure is the fully-qualified name of the
	// ControlPlaneService's UploadArtefact RPC.
	ControlPlaneServiceUploadArtefactProcedure = "/xyz.block.ftl.v1.ControlPlaneService/UploadArtefact"
	// ControlPlaneServiceCreateDeploymentProcedure is the fully-qualified name of the
	// ControlPlaneService's CreateDeployment RPC.
	ControlPlaneServiceCreateDeploymentProcedure = "/xyz.block.ftl.v1.ControlPlaneService/CreateDeployment"
	// ControlPlaneServiceGetDeploymentProcedure is the fully-qualified name of the
	// ControlPlaneService's GetDeployment RPC.
	ControlPlaneServiceGetDeploymentProcedure = "/xyz.block.ftl.v1.ControlPlaneService/GetDeployment"
	// ControlPlaneServiceGetDeploymentArtefactsProcedure is the fully-qualified name of the
	// ControlPlaneService's GetDeploymentArtefacts RPC.
	ControlPlaneServiceGetDeploymentArtefactsProcedure = "/xyz.block.ftl.v1.ControlPlaneService/GetDeploymentArtefacts"
	// ControlPlaneServiceRegisterRunnerProcedure is the fully-qualified name of the
	// ControlPlaneService's RegisterRunner RPC.
	ControlPlaneServiceRegisterRunnerProcedure = "/xyz.block.ftl.v1.ControlPlaneService/RegisterRunner"
	// ControlPlaneServiceDeployProcedure is the fully-qualified name of the ControlPlaneService's
	// Deploy RPC.
	ControlPlaneServiceDeployProcedure = "/xyz.block.ftl.v1.ControlPlaneService/Deploy"
	// ControlPlaneServiceStreamDeploymentLogsProcedure is the fully-qualified name of the
	// ControlPlaneService's StreamDeploymentLogs RPC.
	ControlPlaneServiceStreamDeploymentLogsProcedure = "/xyz.block.ftl.v1.ControlPlaneService/StreamDeploymentLogs"
	// RunnerServicePingProcedure is the fully-qualified name of the RunnerService's Ping RPC.
	RunnerServicePingProcedure = "/xyz.block.ftl.v1.RunnerService/Ping"
	// RunnerServiceDeployToRunnerProcedure is the fully-qualified name of the RunnerService's
	// DeployToRunner RPC.
	RunnerServiceDeployToRunnerProcedure = "/xyz.block.ftl.v1.RunnerService/DeployToRunner"
)

// VerbServiceClient is a client for the xyz.block.ftl.v1.VerbService service.
type VerbServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Issue a synchronous call to a Verb.
	Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error)
	// List the available Verbs.
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
}

// NewVerbServiceClient constructs a client for the xyz.block.ftl.v1.VerbService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVerbServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VerbServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &verbServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+VerbServicePingProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		call: connect_go.NewClient[v1.CallRequest, v1.CallResponse](
			httpClient,
			baseURL+VerbServiceCallProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+VerbServiceListProcedure,
			opts...,
		),
	}
}

// verbServiceClient implements VerbServiceClient.
type verbServiceClient struct {
	ping *connect_go.Client[v1.PingRequest, v1.PingResponse]
	call *connect_go.Client[v1.CallRequest, v1.CallResponse]
	list *connect_go.Client[v1.ListRequest, v1.ListResponse]
}

// Ping calls xyz.block.ftl.v1.VerbService.Ping.
func (c *verbServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Call calls xyz.block.ftl.v1.VerbService.Call.
func (c *verbServiceClient) Call(ctx context.Context, req *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error) {
	return c.call.CallUnary(ctx, req)
}

// List calls xyz.block.ftl.v1.VerbService.List.
func (c *verbServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// VerbServiceHandler is an implementation of the xyz.block.ftl.v1.VerbService service.
type VerbServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Issue a synchronous call to a Verb.
	Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error)
	// List the available Verbs.
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
}

// NewVerbServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVerbServiceHandler(svc VerbServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(VerbServicePingProcedure, connect_go.NewUnaryHandler(
		VerbServicePingProcedure,
		svc.Ping,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	))
	mux.Handle(VerbServiceCallProcedure, connect_go.NewUnaryHandler(
		VerbServiceCallProcedure,
		svc.Call,
		opts...,
	))
	mux.Handle(VerbServiceListProcedure, connect_go.NewUnaryHandler(
		VerbServiceListProcedure,
		svc.List,
		opts...,
	))
	return "/xyz.block.ftl.v1.VerbService/", mux
}

// UnimplementedVerbServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVerbServiceHandler struct{}

func (UnimplementedVerbServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.Ping is not implemented"))
}

func (UnimplementedVerbServiceHandler) Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.Call is not implemented"))
}

func (UnimplementedVerbServiceHandler) List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.List is not implemented"))
}

// DevelServiceClient is a client for the xyz.block.ftl.v1.DevelService service.
type DevelServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Push schema changes to the server.
	PushSchema(context.Context) *connect_go.ClientStreamForClient[v1.PushSchemaRequest, v1.PushSchemaResponse]
	// Pull schema changes from the server.
	PullSchema(context.Context, *connect_go.Request[v1.PullSchemaRequest]) (*connect_go.ServerStreamForClient[v1.PullSchemaResponse], error)
}

// NewDevelServiceClient constructs a client for the xyz.block.ftl.v1.DevelService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDevelServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DevelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &develServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+DevelServicePingProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		pushSchema: connect_go.NewClient[v1.PushSchemaRequest, v1.PushSchemaResponse](
			httpClient,
			baseURL+DevelServicePushSchemaProcedure,
			opts...,
		),
		pullSchema: connect_go.NewClient[v1.PullSchemaRequest, v1.PullSchemaResponse](
			httpClient,
			baseURL+DevelServicePullSchemaProcedure,
			opts...,
		),
	}
}

// develServiceClient implements DevelServiceClient.
type develServiceClient struct {
	ping       *connect_go.Client[v1.PingRequest, v1.PingResponse]
	pushSchema *connect_go.Client[v1.PushSchemaRequest, v1.PushSchemaResponse]
	pullSchema *connect_go.Client[v1.PullSchemaRequest, v1.PullSchemaResponse]
}

// Ping calls xyz.block.ftl.v1.DevelService.Ping.
func (c *develServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// PushSchema calls xyz.block.ftl.v1.DevelService.PushSchema.
func (c *develServiceClient) PushSchema(ctx context.Context) *connect_go.ClientStreamForClient[v1.PushSchemaRequest, v1.PushSchemaResponse] {
	return c.pushSchema.CallClientStream(ctx)
}

// PullSchema calls xyz.block.ftl.v1.DevelService.PullSchema.
func (c *develServiceClient) PullSchema(ctx context.Context, req *connect_go.Request[v1.PullSchemaRequest]) (*connect_go.ServerStreamForClient[v1.PullSchemaResponse], error) {
	return c.pullSchema.CallServerStream(ctx, req)
}

// DevelServiceHandler is an implementation of the xyz.block.ftl.v1.DevelService service.
type DevelServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Push schema changes to the server.
	PushSchema(context.Context, *connect_go.ClientStream[v1.PushSchemaRequest]) (*connect_go.Response[v1.PushSchemaResponse], error)
	// Pull schema changes from the server.
	PullSchema(context.Context, *connect_go.Request[v1.PullSchemaRequest], *connect_go.ServerStream[v1.PullSchemaResponse]) error
}

// NewDevelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDevelServiceHandler(svc DevelServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(DevelServicePingProcedure, connect_go.NewUnaryHandler(
		DevelServicePingProcedure,
		svc.Ping,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	))
	mux.Handle(DevelServicePushSchemaProcedure, connect_go.NewClientStreamHandler(
		DevelServicePushSchemaProcedure,
		svc.PushSchema,
		opts...,
	))
	mux.Handle(DevelServicePullSchemaProcedure, connect_go.NewServerStreamHandler(
		DevelServicePullSchemaProcedure,
		svc.PullSchema,
		opts...,
	))
	return "/xyz.block.ftl.v1.DevelService/", mux
}

// UnimplementedDevelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDevelServiceHandler struct{}

func (UnimplementedDevelServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.DevelService.Ping is not implemented"))
}

func (UnimplementedDevelServiceHandler) PushSchema(context.Context, *connect_go.ClientStream[v1.PushSchemaRequest]) (*connect_go.Response[v1.PushSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.DevelService.PushSchema is not implemented"))
}

func (UnimplementedDevelServiceHandler) PullSchema(context.Context, *connect_go.Request[v1.PullSchemaRequest], *connect_go.ServerStream[v1.PullSchemaResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.DevelService.PullSchema is not implemented"))
}

// ControlPlaneServiceClient is a client for the xyz.block.ftl.v1.ControlPlaneService service.
type ControlPlaneServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *connect_go.Request[v1.GetArtefactDiffsRequest]) (*connect_go.Response[v1.GetArtefactDiffsResponse], error)
	// Upload an artefact to the server.
	UploadArtefact(context.Context, *connect_go.Request[v1.UploadArtefactRequest]) (*connect_go.Response[v1.UploadArtefactResponse], error)
	// Create a deployment.
	CreateDeployment(context.Context, *connect_go.Request[v1.CreateDeploymentRequest]) (*connect_go.Response[v1.CreateDeploymentResponse], error)
	// Get the schema and artefact metadata for a deployment.
	GetDeployment(context.Context, *connect_go.Request[v1.GetDeploymentRequest]) (*connect_go.Response[v1.GetDeploymentResponse], error)
	// Stream deployment artefacts from the server.
	//
	// Each artefact is streamed one after the other as a sequence of max 1MB
	// chunks.
	GetDeploymentArtefacts(context.Context, *connect_go.Request[v1.GetDeploymentArtefactsRequest]) (*connect_go.ServerStreamForClient[v1.GetDeploymentArtefactsResponse], error)
	// Register a Runner with the ControlPlane.
	//
	// Each runner MUST stream a RegisterRunnerRequest to the ControlPlaneService
	// every 10 seconds to maintain its heartbeat.
	RegisterRunner(context.Context) *connect_go.ClientStreamForClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse]
	// Starts a deployment.
	Deploy(context.Context, *connect_go.Request[v1.DeployRequest]) (*connect_go.Response[v1.DeployResponse], error)
	// Stream logs from a deployment
	StreamDeploymentLogs(context.Context) *connect_go.ClientStreamForClient[v1.StreamDeploymentLogsRequest, v1.StreamDeploymentLogsResponse]
}

// NewControlPlaneServiceClient constructs a client for the xyz.block.ftl.v1.ControlPlaneService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControlPlaneServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ControlPlaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &controlPlaneServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+ControlPlaneServicePingProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		getArtefactDiffs: connect_go.NewClient[v1.GetArtefactDiffsRequest, v1.GetArtefactDiffsResponse](
			httpClient,
			baseURL+ControlPlaneServiceGetArtefactDiffsProcedure,
			opts...,
		),
		uploadArtefact: connect_go.NewClient[v1.UploadArtefactRequest, v1.UploadArtefactResponse](
			httpClient,
			baseURL+ControlPlaneServiceUploadArtefactProcedure,
			opts...,
		),
		createDeployment: connect_go.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+ControlPlaneServiceCreateDeploymentProcedure,
			opts...,
		),
		getDeployment: connect_go.NewClient[v1.GetDeploymentRequest, v1.GetDeploymentResponse](
			httpClient,
			baseURL+ControlPlaneServiceGetDeploymentProcedure,
			opts...,
		),
		getDeploymentArtefacts: connect_go.NewClient[v1.GetDeploymentArtefactsRequest, v1.GetDeploymentArtefactsResponse](
			httpClient,
			baseURL+ControlPlaneServiceGetDeploymentArtefactsProcedure,
			opts...,
		),
		registerRunner: connect_go.NewClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse](
			httpClient,
			baseURL+ControlPlaneServiceRegisterRunnerProcedure,
			opts...,
		),
		deploy: connect_go.NewClient[v1.DeployRequest, v1.DeployResponse](
			httpClient,
			baseURL+ControlPlaneServiceDeployProcedure,
			opts...,
		),
		streamDeploymentLogs: connect_go.NewClient[v1.StreamDeploymentLogsRequest, v1.StreamDeploymentLogsResponse](
			httpClient,
			baseURL+ControlPlaneServiceStreamDeploymentLogsProcedure,
			opts...,
		),
	}
}

// controlPlaneServiceClient implements ControlPlaneServiceClient.
type controlPlaneServiceClient struct {
	ping                   *connect_go.Client[v1.PingRequest, v1.PingResponse]
	getArtefactDiffs       *connect_go.Client[v1.GetArtefactDiffsRequest, v1.GetArtefactDiffsResponse]
	uploadArtefact         *connect_go.Client[v1.UploadArtefactRequest, v1.UploadArtefactResponse]
	createDeployment       *connect_go.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	getDeployment          *connect_go.Client[v1.GetDeploymentRequest, v1.GetDeploymentResponse]
	getDeploymentArtefacts *connect_go.Client[v1.GetDeploymentArtefactsRequest, v1.GetDeploymentArtefactsResponse]
	registerRunner         *connect_go.Client[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse]
	deploy                 *connect_go.Client[v1.DeployRequest, v1.DeployResponse]
	streamDeploymentLogs   *connect_go.Client[v1.StreamDeploymentLogsRequest, v1.StreamDeploymentLogsResponse]
}

// Ping calls xyz.block.ftl.v1.ControlPlaneService.Ping.
func (c *controlPlaneServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetArtefactDiffs calls xyz.block.ftl.v1.ControlPlaneService.GetArtefactDiffs.
func (c *controlPlaneServiceClient) GetArtefactDiffs(ctx context.Context, req *connect_go.Request[v1.GetArtefactDiffsRequest]) (*connect_go.Response[v1.GetArtefactDiffsResponse], error) {
	return c.getArtefactDiffs.CallUnary(ctx, req)
}

// UploadArtefact calls xyz.block.ftl.v1.ControlPlaneService.UploadArtefact.
func (c *controlPlaneServiceClient) UploadArtefact(ctx context.Context, req *connect_go.Request[v1.UploadArtefactRequest]) (*connect_go.Response[v1.UploadArtefactResponse], error) {
	return c.uploadArtefact.CallUnary(ctx, req)
}

// CreateDeployment calls xyz.block.ftl.v1.ControlPlaneService.CreateDeployment.
func (c *controlPlaneServiceClient) CreateDeployment(ctx context.Context, req *connect_go.Request[v1.CreateDeploymentRequest]) (*connect_go.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// GetDeployment calls xyz.block.ftl.v1.ControlPlaneService.GetDeployment.
func (c *controlPlaneServiceClient) GetDeployment(ctx context.Context, req *connect_go.Request[v1.GetDeploymentRequest]) (*connect_go.Response[v1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// GetDeploymentArtefacts calls xyz.block.ftl.v1.ControlPlaneService.GetDeploymentArtefacts.
func (c *controlPlaneServiceClient) GetDeploymentArtefacts(ctx context.Context, req *connect_go.Request[v1.GetDeploymentArtefactsRequest]) (*connect_go.ServerStreamForClient[v1.GetDeploymentArtefactsResponse], error) {
	return c.getDeploymentArtefacts.CallServerStream(ctx, req)
}

// RegisterRunner calls xyz.block.ftl.v1.ControlPlaneService.RegisterRunner.
func (c *controlPlaneServiceClient) RegisterRunner(ctx context.Context) *connect_go.ClientStreamForClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse] {
	return c.registerRunner.CallClientStream(ctx)
}

// Deploy calls xyz.block.ftl.v1.ControlPlaneService.Deploy.
func (c *controlPlaneServiceClient) Deploy(ctx context.Context, req *connect_go.Request[v1.DeployRequest]) (*connect_go.Response[v1.DeployResponse], error) {
	return c.deploy.CallUnary(ctx, req)
}

// StreamDeploymentLogs calls xyz.block.ftl.v1.ControlPlaneService.StreamDeploymentLogs.
func (c *controlPlaneServiceClient) StreamDeploymentLogs(ctx context.Context) *connect_go.ClientStreamForClient[v1.StreamDeploymentLogsRequest, v1.StreamDeploymentLogsResponse] {
	return c.streamDeploymentLogs.CallClientStream(ctx)
}

// ControlPlaneServiceHandler is an implementation of the xyz.block.ftl.v1.ControlPlaneService
// service.
type ControlPlaneServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *connect_go.Request[v1.GetArtefactDiffsRequest]) (*connect_go.Response[v1.GetArtefactDiffsResponse], error)
	// Upload an artefact to the server.
	UploadArtefact(context.Context, *connect_go.Request[v1.UploadArtefactRequest]) (*connect_go.Response[v1.UploadArtefactResponse], error)
	// Create a deployment.
	CreateDeployment(context.Context, *connect_go.Request[v1.CreateDeploymentRequest]) (*connect_go.Response[v1.CreateDeploymentResponse], error)
	// Get the schema and artefact metadata for a deployment.
	GetDeployment(context.Context, *connect_go.Request[v1.GetDeploymentRequest]) (*connect_go.Response[v1.GetDeploymentResponse], error)
	// Stream deployment artefacts from the server.
	//
	// Each artefact is streamed one after the other as a sequence of max 1MB
	// chunks.
	GetDeploymentArtefacts(context.Context, *connect_go.Request[v1.GetDeploymentArtefactsRequest], *connect_go.ServerStream[v1.GetDeploymentArtefactsResponse]) error
	// Register a Runner with the ControlPlane.
	//
	// Each runner MUST stream a RegisterRunnerRequest to the ControlPlaneService
	// every 10 seconds to maintain its heartbeat.
	RegisterRunner(context.Context, *connect_go.ClientStream[v1.RegisterRunnerRequest]) (*connect_go.Response[v1.RegisterRunnerResponse], error)
	// Starts a deployment.
	Deploy(context.Context, *connect_go.Request[v1.DeployRequest]) (*connect_go.Response[v1.DeployResponse], error)
	// Stream logs from a deployment
	StreamDeploymentLogs(context.Context, *connect_go.ClientStream[v1.StreamDeploymentLogsRequest]) (*connect_go.Response[v1.StreamDeploymentLogsResponse], error)
}

// NewControlPlaneServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControlPlaneServiceHandler(svc ControlPlaneServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ControlPlaneServicePingProcedure, connect_go.NewUnaryHandler(
		ControlPlaneServicePingProcedure,
		svc.Ping,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	))
	mux.Handle(ControlPlaneServiceGetArtefactDiffsProcedure, connect_go.NewUnaryHandler(
		ControlPlaneServiceGetArtefactDiffsProcedure,
		svc.GetArtefactDiffs,
		opts...,
	))
	mux.Handle(ControlPlaneServiceUploadArtefactProcedure, connect_go.NewUnaryHandler(
		ControlPlaneServiceUploadArtefactProcedure,
		svc.UploadArtefact,
		opts...,
	))
	mux.Handle(ControlPlaneServiceCreateDeploymentProcedure, connect_go.NewUnaryHandler(
		ControlPlaneServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		opts...,
	))
	mux.Handle(ControlPlaneServiceGetDeploymentProcedure, connect_go.NewUnaryHandler(
		ControlPlaneServiceGetDeploymentProcedure,
		svc.GetDeployment,
		opts...,
	))
	mux.Handle(ControlPlaneServiceGetDeploymentArtefactsProcedure, connect_go.NewServerStreamHandler(
		ControlPlaneServiceGetDeploymentArtefactsProcedure,
		svc.GetDeploymentArtefacts,
		opts...,
	))
	mux.Handle(ControlPlaneServiceRegisterRunnerProcedure, connect_go.NewClientStreamHandler(
		ControlPlaneServiceRegisterRunnerProcedure,
		svc.RegisterRunner,
		opts...,
	))
	mux.Handle(ControlPlaneServiceDeployProcedure, connect_go.NewUnaryHandler(
		ControlPlaneServiceDeployProcedure,
		svc.Deploy,
		opts...,
	))
	mux.Handle(ControlPlaneServiceStreamDeploymentLogsProcedure, connect_go.NewClientStreamHandler(
		ControlPlaneServiceStreamDeploymentLogsProcedure,
		svc.StreamDeploymentLogs,
		opts...,
	))
	return "/xyz.block.ftl.v1.ControlPlaneService/", mux
}

// UnimplementedControlPlaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControlPlaneServiceHandler struct{}

func (UnimplementedControlPlaneServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.Ping is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) GetArtefactDiffs(context.Context, *connect_go.Request[v1.GetArtefactDiffsRequest]) (*connect_go.Response[v1.GetArtefactDiffsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.GetArtefactDiffs is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) UploadArtefact(context.Context, *connect_go.Request[v1.UploadArtefactRequest]) (*connect_go.Response[v1.UploadArtefactResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.UploadArtefact is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) CreateDeployment(context.Context, *connect_go.Request[v1.CreateDeploymentRequest]) (*connect_go.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.CreateDeployment is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) GetDeployment(context.Context, *connect_go.Request[v1.GetDeploymentRequest]) (*connect_go.Response[v1.GetDeploymentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.GetDeployment is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) GetDeploymentArtefacts(context.Context, *connect_go.Request[v1.GetDeploymentArtefactsRequest], *connect_go.ServerStream[v1.GetDeploymentArtefactsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.GetDeploymentArtefacts is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) RegisterRunner(context.Context, *connect_go.ClientStream[v1.RegisterRunnerRequest]) (*connect_go.Response[v1.RegisterRunnerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.RegisterRunner is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) Deploy(context.Context, *connect_go.Request[v1.DeployRequest]) (*connect_go.Response[v1.DeployResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.Deploy is not implemented"))
}

func (UnimplementedControlPlaneServiceHandler) StreamDeploymentLogs(context.Context, *connect_go.ClientStream[v1.StreamDeploymentLogsRequest]) (*connect_go.Response[v1.StreamDeploymentLogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControlPlaneService.StreamDeploymentLogs is not implemented"))
}

// RunnerServiceClient is a client for the xyz.block.ftl.v1.RunnerService service.
type RunnerServiceClient interface {
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Initiate a deployment on this Runner.
	DeployToRunner(context.Context, *connect_go.Request[v1.DeployToRunnerRequest]) (*connect_go.Response[v1.DeployToRunnerResponse], error)
}

// NewRunnerServiceClient constructs a client for the xyz.block.ftl.v1.RunnerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RunnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runnerServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+RunnerServicePingProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		deployToRunner: connect_go.NewClient[v1.DeployToRunnerRequest, v1.DeployToRunnerResponse](
			httpClient,
			baseURL+RunnerServiceDeployToRunnerProcedure,
			opts...,
		),
	}
}

// runnerServiceClient implements RunnerServiceClient.
type runnerServiceClient struct {
	ping           *connect_go.Client[v1.PingRequest, v1.PingResponse]
	deployToRunner *connect_go.Client[v1.DeployToRunnerRequest, v1.DeployToRunnerResponse]
}

// Ping calls xyz.block.ftl.v1.RunnerService.Ping.
func (c *runnerServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// DeployToRunner calls xyz.block.ftl.v1.RunnerService.DeployToRunner.
func (c *runnerServiceClient) DeployToRunner(ctx context.Context, req *connect_go.Request[v1.DeployToRunnerRequest]) (*connect_go.Response[v1.DeployToRunnerResponse], error) {
	return c.deployToRunner.CallUnary(ctx, req)
}

// RunnerServiceHandler is an implementation of the xyz.block.ftl.v1.RunnerService service.
type RunnerServiceHandler interface {
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Initiate a deployment on this Runner.
	DeployToRunner(context.Context, *connect_go.Request[v1.DeployToRunnerRequest]) (*connect_go.Response[v1.DeployToRunnerResponse], error)
}

// NewRunnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerServiceHandler(svc RunnerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(RunnerServicePingProcedure, connect_go.NewUnaryHandler(
		RunnerServicePingProcedure,
		svc.Ping,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	))
	mux.Handle(RunnerServiceDeployToRunnerProcedure, connect_go.NewUnaryHandler(
		RunnerServiceDeployToRunnerProcedure,
		svc.DeployToRunner,
		opts...,
	))
	return "/xyz.block.ftl.v1.RunnerService/", mux
}

// UnimplementedRunnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerServiceHandler struct{}

func (UnimplementedRunnerServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.RunnerService.Ping is not implemented"))
}

func (UnimplementedRunnerServiceHandler) DeployToRunner(context.Context, *connect_go.Request[v1.DeployToRunnerRequest]) (*connect_go.Response[v1.DeployToRunnerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.RunnerService.DeployToRunner is not implemented"))
}
