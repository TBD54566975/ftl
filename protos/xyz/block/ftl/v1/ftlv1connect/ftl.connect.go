// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v1/ftl.proto

package ftlv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/TBD54566975/ftl/protos/xyz/block/ftl/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VerbServiceName is the fully-qualified name of the VerbService service.
	VerbServiceName = "xyz.block.ftl.v1.VerbService"
	// DevelServiceName is the fully-qualified name of the DevelService service.
	DevelServiceName = "xyz.block.ftl.v1.DevelService"
	// BackplaneServiceName is the fully-qualified name of the BackplaneService service.
	BackplaneServiceName = "xyz.block.ftl.v1.BackplaneService"
)

// VerbServiceClient is a client for the xyz.block.ftl.v1.VerbService service.
type VerbServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Issue a synchronous call to a Verb.
	Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error)
	// List the available Verbs.
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
}

// NewVerbServiceClient constructs a client for the xyz.block.ftl.v1.VerbService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVerbServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VerbServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &verbServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.VerbService/Ping",
			opts...,
		),
		call: connect_go.NewClient[v1.CallRequest, v1.CallResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.VerbService/Call",
			opts...,
		),
		list: connect_go.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.VerbService/List",
			opts...,
		),
	}
}

// verbServiceClient implements VerbServiceClient.
type verbServiceClient struct {
	ping *connect_go.Client[v1.PingRequest, v1.PingResponse]
	call *connect_go.Client[v1.CallRequest, v1.CallResponse]
	list *connect_go.Client[v1.ListRequest, v1.ListResponse]
}

// Ping calls xyz.block.ftl.v1.VerbService.Ping.
func (c *verbServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Call calls xyz.block.ftl.v1.VerbService.Call.
func (c *verbServiceClient) Call(ctx context.Context, req *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error) {
	return c.call.CallUnary(ctx, req)
}

// List calls xyz.block.ftl.v1.VerbService.List.
func (c *verbServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// VerbServiceHandler is an implementation of the xyz.block.ftl.v1.VerbService service.
type VerbServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Issue a synchronous call to a Verb.
	Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error)
	// List the available Verbs.
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
}

// NewVerbServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVerbServiceHandler(svc VerbServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/xyz.block.ftl.v1.VerbService/Ping", connect_go.NewUnaryHandler(
		"/xyz.block.ftl.v1.VerbService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/xyz.block.ftl.v1.VerbService/Call", connect_go.NewUnaryHandler(
		"/xyz.block.ftl.v1.VerbService/Call",
		svc.Call,
		opts...,
	))
	mux.Handle("/xyz.block.ftl.v1.VerbService/List", connect_go.NewUnaryHandler(
		"/xyz.block.ftl.v1.VerbService/List",
		svc.List,
		opts...,
	))
	return "/xyz.block.ftl.v1.VerbService/", mux
}

// UnimplementedVerbServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVerbServiceHandler struct{}

func (UnimplementedVerbServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.Ping is not implemented"))
}

func (UnimplementedVerbServiceHandler) Call(context.Context, *connect_go.Request[v1.CallRequest]) (*connect_go.Response[v1.CallResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.Call is not implemented"))
}

func (UnimplementedVerbServiceHandler) List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.List is not implemented"))
}

// DevelServiceClient is a client for the xyz.block.ftl.v1.DevelService service.
type DevelServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Push schema changes to the server.
	PushSchema(context.Context) *connect_go.ClientStreamForClient[v1.PushSchemaRequest, v1.PushSchemaResponse]
	// Pull schema changes from the server.
	PullSchema(context.Context, *connect_go.Request[v1.PullSchemaRequest]) (*connect_go.ServerStreamForClient[v1.PullSchemaResponse], error)
}

// NewDevelServiceClient constructs a client for the xyz.block.ftl.v1.DevelService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDevelServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DevelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &develServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.DevelService/Ping",
			opts...,
		),
		pushSchema: connect_go.NewClient[v1.PushSchemaRequest, v1.PushSchemaResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.DevelService/PushSchema",
			opts...,
		),
		pullSchema: connect_go.NewClient[v1.PullSchemaRequest, v1.PullSchemaResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.DevelService/PullSchema",
			opts...,
		),
	}
}

// develServiceClient implements DevelServiceClient.
type develServiceClient struct {
	ping       *connect_go.Client[v1.PingRequest, v1.PingResponse]
	pushSchema *connect_go.Client[v1.PushSchemaRequest, v1.PushSchemaResponse]
	pullSchema *connect_go.Client[v1.PullSchemaRequest, v1.PullSchemaResponse]
}

// Ping calls xyz.block.ftl.v1.DevelService.Ping.
func (c *develServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// PushSchema calls xyz.block.ftl.v1.DevelService.PushSchema.
func (c *develServiceClient) PushSchema(ctx context.Context) *connect_go.ClientStreamForClient[v1.PushSchemaRequest, v1.PushSchemaResponse] {
	return c.pushSchema.CallClientStream(ctx)
}

// PullSchema calls xyz.block.ftl.v1.DevelService.PullSchema.
func (c *develServiceClient) PullSchema(ctx context.Context, req *connect_go.Request[v1.PullSchemaRequest]) (*connect_go.ServerStreamForClient[v1.PullSchemaResponse], error) {
	return c.pullSchema.CallServerStream(ctx, req)
}

// DevelServiceHandler is an implementation of the xyz.block.ftl.v1.DevelService service.
type DevelServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Push schema changes to the server.
	PushSchema(context.Context, *connect_go.ClientStream[v1.PushSchemaRequest]) (*connect_go.Response[v1.PushSchemaResponse], error)
	// Pull schema changes from the server.
	PullSchema(context.Context, *connect_go.Request[v1.PullSchemaRequest], *connect_go.ServerStream[v1.PullSchemaResponse]) error
}

// NewDevelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDevelServiceHandler(svc DevelServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/xyz.block.ftl.v1.DevelService/Ping", connect_go.NewUnaryHandler(
		"/xyz.block.ftl.v1.DevelService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/xyz.block.ftl.v1.DevelService/PushSchema", connect_go.NewClientStreamHandler(
		"/xyz.block.ftl.v1.DevelService/PushSchema",
		svc.PushSchema,
		opts...,
	))
	mux.Handle("/xyz.block.ftl.v1.DevelService/PullSchema", connect_go.NewServerStreamHandler(
		"/xyz.block.ftl.v1.DevelService/PullSchema",
		svc.PullSchema,
		opts...,
	))
	return "/xyz.block.ftl.v1.DevelService/", mux
}

// UnimplementedDevelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDevelServiceHandler struct{}

func (UnimplementedDevelServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.DevelService.Ping is not implemented"))
}

func (UnimplementedDevelServiceHandler) PushSchema(context.Context, *connect_go.ClientStream[v1.PushSchemaRequest]) (*connect_go.Response[v1.PushSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.DevelService.PushSchema is not implemented"))
}

func (UnimplementedDevelServiceHandler) PullSchema(context.Context, *connect_go.Request[v1.PullSchemaRequest], *connect_go.ServerStream[v1.PullSchemaResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.DevelService.PullSchema is not implemented"))
}

// BackplaneServiceClient is a client for the xyz.block.ftl.v1.BackplaneService service.
type BackplaneServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *connect_go.Request[v1.GetArtefactDiffsRequest]) (*connect_go.Response[v1.GetArtefactDiffsResponse], error)
	// Upload artefacts to the server.
	UploadArtefact(context.Context, *connect_go.Request[v1.UploadArtefactRequest]) (*connect_go.Response[v1.UploadArtefactResponse], error)
	// Create a deployment.
	CreateDeployment(context.Context, *connect_go.Request[v1.CreateDeploymentRequest]) (*connect_go.Response[v1.CreateDeploymentResponse], error)
	// Stream artefacts from the server.
	//
	// Each artefact is streamed one after the other as a sequence of max 1MB
	// chunks.
	GetDeploymentArtefacts(context.Context, *connect_go.Request[v1.GetDeploymentArtefactsRequest]) (*connect_go.ServerStreamForClient[v1.GetDeploymentArtefactsResponse], error)
}

// NewBackplaneServiceClient constructs a client for the xyz.block.ftl.v1.BackplaneService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackplaneServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BackplaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &backplaneServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.BackplaneService/Ping",
			opts...,
		),
		getArtefactDiffs: connect_go.NewClient[v1.GetArtefactDiffsRequest, v1.GetArtefactDiffsResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.BackplaneService/GetArtefactDiffs",
			opts...,
		),
		uploadArtefact: connect_go.NewClient[v1.UploadArtefactRequest, v1.UploadArtefactResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.BackplaneService/UploadArtefact",
			opts...,
		),
		createDeployment: connect_go.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.BackplaneService/CreateDeployment",
			opts...,
		),
		getDeploymentArtefacts: connect_go.NewClient[v1.GetDeploymentArtefactsRequest, v1.GetDeploymentArtefactsResponse](
			httpClient,
			baseURL+"/xyz.block.ftl.v1.BackplaneService/GetDeploymentArtefacts",
			opts...,
		),
	}
}

// backplaneServiceClient implements BackplaneServiceClient.
type backplaneServiceClient struct {
	ping                   *connect_go.Client[v1.PingRequest, v1.PingResponse]
	getArtefactDiffs       *connect_go.Client[v1.GetArtefactDiffsRequest, v1.GetArtefactDiffsResponse]
	uploadArtefact         *connect_go.Client[v1.UploadArtefactRequest, v1.UploadArtefactResponse]
	createDeployment       *connect_go.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	getDeploymentArtefacts *connect_go.Client[v1.GetDeploymentArtefactsRequest, v1.GetDeploymentArtefactsResponse]
}

// Ping calls xyz.block.ftl.v1.BackplaneService.Ping.
func (c *backplaneServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetArtefactDiffs calls xyz.block.ftl.v1.BackplaneService.GetArtefactDiffs.
func (c *backplaneServiceClient) GetArtefactDiffs(ctx context.Context, req *connect_go.Request[v1.GetArtefactDiffsRequest]) (*connect_go.Response[v1.GetArtefactDiffsResponse], error) {
	return c.getArtefactDiffs.CallUnary(ctx, req)
}

// UploadArtefact calls xyz.block.ftl.v1.BackplaneService.UploadArtefact.
func (c *backplaneServiceClient) UploadArtefact(ctx context.Context, req *connect_go.Request[v1.UploadArtefactRequest]) (*connect_go.Response[v1.UploadArtefactResponse], error) {
	return c.uploadArtefact.CallUnary(ctx, req)
}

// CreateDeployment calls xyz.block.ftl.v1.BackplaneService.CreateDeployment.
func (c *backplaneServiceClient) CreateDeployment(ctx context.Context, req *connect_go.Request[v1.CreateDeploymentRequest]) (*connect_go.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// GetDeploymentArtefacts calls xyz.block.ftl.v1.BackplaneService.GetDeploymentArtefacts.
func (c *backplaneServiceClient) GetDeploymentArtefacts(ctx context.Context, req *connect_go.Request[v1.GetDeploymentArtefactsRequest]) (*connect_go.ServerStreamForClient[v1.GetDeploymentArtefactsResponse], error) {
	return c.getDeploymentArtefacts.CallServerStream(ctx, req)
}

// BackplaneServiceHandler is an implementation of the xyz.block.ftl.v1.BackplaneService service.
type BackplaneServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *connect_go.Request[v1.GetArtefactDiffsRequest]) (*connect_go.Response[v1.GetArtefactDiffsResponse], error)
	// Upload artefacts to the server.
	UploadArtefact(context.Context, *connect_go.Request[v1.UploadArtefactRequest]) (*connect_go.Response[v1.UploadArtefactResponse], error)
	// Create a deployment.
	CreateDeployment(context.Context, *connect_go.Request[v1.CreateDeploymentRequest]) (*connect_go.Response[v1.CreateDeploymentResponse], error)
	// Stream artefacts from the server.
	//
	// Each artefact is streamed one after the other as a sequence of max 1MB
	// chunks.
	GetDeploymentArtefacts(context.Context, *connect_go.Request[v1.GetDeploymentArtefactsRequest], *connect_go.ServerStream[v1.GetDeploymentArtefactsResponse]) error
}

// NewBackplaneServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackplaneServiceHandler(svc BackplaneServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/xyz.block.ftl.v1.BackplaneService/Ping", connect_go.NewUnaryHandler(
		"/xyz.block.ftl.v1.BackplaneService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/xyz.block.ftl.v1.BackplaneService/GetArtefactDiffs", connect_go.NewUnaryHandler(
		"/xyz.block.ftl.v1.BackplaneService/GetArtefactDiffs",
		svc.GetArtefactDiffs,
		opts...,
	))
	mux.Handle("/xyz.block.ftl.v1.BackplaneService/UploadArtefact", connect_go.NewUnaryHandler(
		"/xyz.block.ftl.v1.BackplaneService/UploadArtefact",
		svc.UploadArtefact,
		opts...,
	))
	mux.Handle("/xyz.block.ftl.v1.BackplaneService/CreateDeployment", connect_go.NewUnaryHandler(
		"/xyz.block.ftl.v1.BackplaneService/CreateDeployment",
		svc.CreateDeployment,
		opts...,
	))
	mux.Handle("/xyz.block.ftl.v1.BackplaneService/GetDeploymentArtefacts", connect_go.NewServerStreamHandler(
		"/xyz.block.ftl.v1.BackplaneService/GetDeploymentArtefacts",
		svc.GetDeploymentArtefacts,
		opts...,
	))
	return "/xyz.block.ftl.v1.BackplaneService/", mux
}

// UnimplementedBackplaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackplaneServiceHandler struct{}

func (UnimplementedBackplaneServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.BackplaneService.Ping is not implemented"))
}

func (UnimplementedBackplaneServiceHandler) GetArtefactDiffs(context.Context, *connect_go.Request[v1.GetArtefactDiffsRequest]) (*connect_go.Response[v1.GetArtefactDiffsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.BackplaneService.GetArtefactDiffs is not implemented"))
}

func (UnimplementedBackplaneServiceHandler) UploadArtefact(context.Context, *connect_go.Request[v1.UploadArtefactRequest]) (*connect_go.Response[v1.UploadArtefactResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.BackplaneService.UploadArtefact is not implemented"))
}

func (UnimplementedBackplaneServiceHandler) CreateDeployment(context.Context, *connect_go.Request[v1.CreateDeploymentRequest]) (*connect_go.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.BackplaneService.CreateDeployment is not implemented"))
}

func (UnimplementedBackplaneServiceHandler) GetDeploymentArtefacts(context.Context, *connect_go.Request[v1.GetDeploymentArtefactsRequest], *connect_go.ServerStream[v1.GetDeploymentArtefactsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xyz.block.ftl.v1.BackplaneService.GetDeploymentArtefacts is not implemented"))
}
