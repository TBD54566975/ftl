on:
  pull_request:
  merge_group:
name: CI
concurrency:
  group: ${{ github.ref }}-ci
  cancel-in-progress: true
jobs:
  test:
    name: Test Go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Docker Compose
        run: docker compose up -d --wait
      - name: Build Language Plugins
        run: just build-language-plugins
      - name: Test
        run: |
          go-test-annotate
          # go-test-annotate ${{ (github.event_name == 'pull_request' && github.event.action != 'enqueued' && !contains( github.event.pull_request.labels.*.name, 'run-all')) && '-short' || '' }}
  test-readme:
    name: Test README
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Docker Compose
        run: docker compose up -d --wait
      - name: Build Language Plugins
        run: just build-language-plugins
      - name: Test README
        run: just test-readme
  test-scripts:
    name: Test Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Test Scripts
        run: just test-scripts
  sql:
    name: SQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Docker Compose
        run: docker compose up -d --wait
      - name: Initialise database
        run: just init-db
      - name: Vet SQL
        run: sqlc vet
  ensure-frozen-migrations:
    name: Ensure Frozen Migrations
    # if: ${{ github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'skip-ensure-frozen-migrations') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Freeze Migrations
        run: just ensure-frozen-migrations
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: golangci-lint
        run: |
          golangci-lint --version
          golangci-lint run --new-from-rev="$(git merge-base origin/main HEAD)" --out-format github-actions ./...
      - name: lint-commit-or-rollback
        run: lint-commit-or-rollback ./backend/... 2>&1 | to-annotation
      - name: go-check-sumtype
        shell: bash
        run: go-check-sumtype ./... 2>&1 | to-annotation
      - name: actionlint
        shell: bash
        run: actionlint --oneline | to-annotation
      # Too annoying to disable individual warnings
      # - name: staticcheck
      #   run: staticcheck ./...
      - name: lint-scripts
        run: just lint-scripts
  proto-breaking:
    name: Proto Breaking Change Check
    if: ${{ github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'skip-proto-breaking') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Proto Breaking Change Check
        shell: bash
        run: |
          set -o pipefail
          buf breaking --against 'https://github.com/TBD54566975/ftl.git#branch=main' | to-annotation
  console:
    name: Console
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Console pnpm install
        run: just pnpm-install
      - name: Console Lint
        run: just lint-frontend
      - name: Console Build
        run: just build-frontend
      - name: Console Test
        run: just test-frontend
  extension:
    name: VSCode Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: VSCode extension pnpm install
        run: just pnpm-install
      - name: VSCode extension lint
        working-directory: frontend/vscode
        run: pnpm run lint
      - name: VSCode extension pnpm build and package
        run: just package-extension
  plugin:
    name: Intellij Plugin
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
        with:
          cache: true
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Install Java
        run: java -version
      - name: Build Intellij Plugin
        run: just build-intellij-plugin
  build-all:
    name: Rebuild All
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Docker Compose
        run: docker compose up -d --wait
      - name: Init DB
        run: just init-db
      - name: Rebuild All
        run: just build-all
      - name: Check No SCM Changes
        run: |
          if [[ -n $(git status -s) ]]
          then
            echo "Running the build resulted in changes to git controlled files:"
            git status -s
            git --no-pager diff
            exit 1
          fi
  docs:
    name: Build Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: cashapp/activate-hermit@v1.1.3
      - run: cd docs && zola build
  arch-lint:
    name: Lint Architecture
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cashapp/activate-hermit@v1.1.3
      - run: go-arch-lint check || true
  docker-build-controller:
    name: Build Controller Docker Image
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cashapp/activate-hermit@v1.1.3
      - uses: ./.github/actions/build-cache
      - run: just build-docker controller
  docker-build-provisioner:
    name: Build Provisioner Docker Image
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cashapp/activate-hermit@v1.1.3
      - uses: ./.github/actions/build-cache
      - run: just build-docker provisioner
  docker-build-runner:
    name: Build Runner Docker Image
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cashapp/activate-hermit@v1.1.3
      - uses: ./.github/actions/build-cache
      - run: just build-docker runner
  docker-build-box:
    name: Build Box Docker Image
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cashapp/activate-hermit@v1.1.3
      - uses: ./.github/actions/build-cache
      - run: just build-docker box
  console-e2e:
    name: Console e2e
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Console pnpm install
        run: just pnpm-install
      - name: Build Language Plugins
        run: just build-language-plugins
      - name: Console e2e
        run: just e2e-frontend
  integration-shard:
    name: Shard Integration Tests
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.extract-tests.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Extract test cases
        id: extract-tests
        run: |
          set -euo pipefail
          # shellcheck disable=SC2046
          echo "matrix={\"test\":$(jq -c -n '$ARGS.positional' --args $(git grep -l '^//go:build integration' | xargs grep '^func Test' | awk '{print $2}' | cut -d'(' -f1))}" >> "$GITHUB_OUTPUT"
  integration-run:
    name: Integration Test
    # if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    needs: integration-shard
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.integration-shard.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
        with:
          cache: true
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Docker Compose
        run: docker compose --profile integration up -d --wait
      - name: Create DB
        run: just init-db
      - name: Download Go Modules
        run: go mod download
      - name: Build Language Plugins
        run: just build-language-plugins
      - name: Run ${{ matrix.test }}
        run: |
          set -euo pipefail
          # shellcheck disable=SC2046
          go test -v -race -tags integration -run '^${{ matrix.test }}$' $(git grep -l '^//go:build integration' | xargs grep -l '^func ${{ matrix.test }}' | xargs -I {} dirname ./{})
  infrastructure-shard:
    name: Shard Infrastructure Tests
    if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.extract-tests.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
      - name: Extract test cases
        id: extract-tests
        run: |
          set -euo pipefail
          # shellcheck disable=SC2046
          echo "matrix={\"test\":$(jq -c -n '$ARGS.positional' --args $(git grep -l '^//go:build infrastructure' | xargs grep '^func Test' | awk '{print $2}' | cut -d'(' -f1))}" >> "$GITHUB_OUTPUT"
  infrastructure-run:
    name: Infrastructure Test
    if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    needs: infrastructure-shard
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.infrastructure-shard.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1.1.3
        with:
          cache: true
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Docker Compose
        run: docker compose --profile integration up -d --wait
      - name: Create DB
        run: just init-db
      - name: Download Go Modules
        run: go mod download
      - name: Build Language Plugins
        run: just build-language-plugins
      - name: Run ${{ matrix.test }}
        run: |
          set -euo pipefail
          # shellcheck disable=SC2046
          go test -v -race -tags infrastructure -run '^${{ matrix.test }}$' $(git grep -l '^//go:build infrastructure' | xargs grep -l '^func ${{ matrix.test }}' | xargs -I {} dirname ./{})
      - name: Archive Report
        uses: actions/upload-artifact@v4
        if: always() # Always upload the report even on failure
        with:
          name: kube-report-${{ matrix.test }}
          path: /tmp/ftl-kube-report/
      - name: Teardown Cluster
        working-directory: deployment
        if: always() # Always cleanup the cluster even on failure
        run: just teardown-cluster
      - name: Delete Images
        if: always() # We don't want to cache these images, delete them before the cache action
        run: docker image rm localhost:5000/ftl-runner:latest ftl-runner:latest ftl-controller:latest localhost:5000/ftl-controller:latest
  integration-success:
    name: Integration Success
    needs: [integration-run]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check integration tests result
        run: |
          if [[ "${{ needs.integration-run.result }}" == "failure" ]]; then
            echo "Integration tests failed"
            exit 1
          else
            echo "Integration tests passed"
          fi
  smoke-test-upgrade:
    name: Smoke Test Upgrade Path
    if: github.event_name != 'pull_request' || github.event.action == 'enqueued' || contains( github.event.pull_request.labels.*.name, 'run-all')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository with full history
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          fetch-tags: true
      - name: Get latest release tag
        # TODO switch to: latest_release=$(git tag --sort=-v:refname | grep -v v1 | head -n 1)
        run: |
          latest_release=$(git rev-parse HEAD^)
          echo "Latest release: $latest_release"
          echo "LATEST_RELEASE=$latest_release" >> "$GITHUB_ENV"
      - name: Check out exemplar from previous release
        uses: actions/checkout@v4
        with:
          clean: false
          repository: TBD54566975/ftl.git
          path: tmpsmoketest
          ref: ${{ env.LATEST_RELEASE }}
          fetch-depth: 1
          fetch-tags: true
          sparse-checkout: smoketest
          sparse-checkout-cone-mode: false
      - name: Init Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true
      - name: Build Cache
        uses: ./.github/actions/build-cache
      - name: Docker Compose
        run: docker compose up -d --wait
      - name: Create DB
        run: just init-db
      - name: Download Go Modules
        run: go mod download
      - name: Smoke Test Upgrade Path
        run: |
            set -euo pipefail
            echo "Replacing current exemplar with latest released exemplar"
            rm -r ./smoketest && mv ./tmpsmoketest/smoketest ./smoketest
            echo "List all files in ."
            ls -la ./
            echo "List all files in tmpsmoketest"
            ls -la ./tmpsmoketest/
            echo "List smoke test files"
            git grep -l '^//go:build smoketest' | xargs -I {} dirname {} || true
            echo "Run smoke test"
            go test -v -tags smoketest -run '^Test' ./smoketest
        # run: |
        #     test_files=$(git grep -l '^//go:build smoketest' | xargs -I {} dirname {} || true)
        #     echo "Smoke test files: $test_files"

        #     if [ -z "$test_files" ]; then
        #       echo "No smoke test files found."
        #       exit 0  # Exit gracefully if no smoke test files are found
        #     fi

        #     for file in $test_files; do
        #       echo "Running smoke tests in $file"
        #       go test -v -tags smoketest -run '^Test' "$file"
        #     done
        # run: |
        #   set -euo pipefail
        #   # shellcheck disable=SC2046
        #   test_files=$(git grep -l '^//go:build smoketest' | xargs -I {} dirname ./{})
        #   echo "smoke test test_files: $test_files"
        #   for file in $test_files; do
        #     go test -v -tags smoketest -run '^Test' "$file"
        #   done
      - name: Archive Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kube-report-smoke-test-upgrade
          path: /tmp/ftl-kube-report/
