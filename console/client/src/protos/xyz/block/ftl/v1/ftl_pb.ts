// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/ftl.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Module, VerbRef } from "./schema/schema_pb.js";

/**
 * @generated from enum xyz.block.ftl.v1.DeploymentChangeType
 */
export enum DeploymentChangeType {
  /**
   * @generated from enum value: DEPLOYMENT_ADDED = 0;
   */
  DEPLOYMENT_ADDED = 0,

  /**
   * @generated from enum value: DEPLOYMENT_REMOVED = 1;
   */
  DEPLOYMENT_REMOVED = 1,

  /**
   * @generated from enum value: DEPLOYMENT_CHANGED = 2;
   */
  DEPLOYMENT_CHANGED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentChangeType)
proto3.util.setEnumType(DeploymentChangeType, "xyz.block.ftl.v1.DeploymentChangeType", [
  { no: 0, name: "DEPLOYMENT_ADDED" },
  { no: 1, name: "DEPLOYMENT_REMOVED" },
  { no: 2, name: "DEPLOYMENT_CHANGED" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.ControllerState
 */
export enum ControllerState {
  /**
   * @generated from enum value: CONTROLLER_LIVE = 0;
   */
  CONTROLLER_LIVE = 0,

  /**
   * @generated from enum value: CONTROLLER_DEAD = 1;
   */
  CONTROLLER_DEAD = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ControllerState)
proto3.util.setEnumType(ControllerState, "xyz.block.ftl.v1.ControllerState", [
  { no: 0, name: "CONTROLLER_LIVE" },
  { no: 1, name: "CONTROLLER_DEAD" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.RunnerState
 */
export enum RunnerState {
  /**
   * The Runner is waiting for a deployment.
   *
   * @generated from enum value: RUNNER_IDLE = 0;
   */
  RUNNER_IDLE = 0,

  /**
   * The Runner and Control Plane have agreed that the Runner is reserved.
   *
   * @generated from enum value: RUNNER_RESERVED = 1;
   */
  RUNNER_RESERVED = 1,

  /**
   * The Runner is assigned to a deployment.
   *
   * @generated from enum value: RUNNER_ASSIGNED = 2;
   */
  RUNNER_ASSIGNED = 2,

  /**
   * The Runner is dead.
   *
   * @generated from enum value: RUNNER_DEAD = 3;
   */
  RUNNER_DEAD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RunnerState)
proto3.util.setEnumType(RunnerState, "xyz.block.ftl.v1.RunnerState", [
  { no: 0, name: "RUNNER_IDLE" },
  { no: 1, name: "RUNNER_RESERVED" },
  { no: 2, name: "RUNNER_ASSIGNED" },
  { no: 3, name: "RUNNER_DEAD" },
]);

/**
 * @generated from message xyz.block.ftl.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * If present, the service is not ready to accept requests and this is the
   * reason.
   *
   * @generated from field: optional string not_ready = 1;
   */
  notReady?: string;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "not_ready", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.Metadata.Pair values = 1;
   */
  values: Metadata_Pair[] = [];

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: Metadata_Pair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.Metadata.Pair
 */
export class Metadata_Pair extends Message<Metadata_Pair> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Metadata_Pair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.Metadata.Pair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata_Pair {
    return new Metadata_Pair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata_Pair {
    return new Metadata_Pair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata_Pair {
    return new Metadata_Pair().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata_Pair | PlainMessage<Metadata_Pair> | undefined, b: Metadata_Pair | PlainMessage<Metadata_Pair> | undefined): boolean {
    return proto3.util.equals(Metadata_Pair, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CallRequest
 */
export class CallRequest extends Message<CallRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.VerbRef verb = 2;
   */
  verb?: VerbRef;

  /**
   * @generated from field: bytes body = 3;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<CallRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CallRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "verb", kind: "message", T: VerbRef },
    { no: 3, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallRequest {
    return new CallRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallRequest {
    return new CallRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallRequest {
    return new CallRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CallRequest | PlainMessage<CallRequest> | undefined, b: CallRequest | PlainMessage<CallRequest> | undefined): boolean {
    return proto3.util.equals(CallRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CallResponse
 */
export class CallResponse extends Message<CallResponse> {
  /**
   * @generated from oneof xyz.block.ftl.v1.CallResponse.response
   */
  response: {
    /**
     * @generated from field: bytes body = 1;
     */
    value: Uint8Array;
    case: "body";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.CallResponse.Error error = 2;
     */
    value: CallResponse_Error;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CallResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CallResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "response" },
    { no: 2, name: "error", kind: "message", T: CallResponse_Error, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallResponse {
    return new CallResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallResponse {
    return new CallResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallResponse {
    return new CallResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CallResponse | PlainMessage<CallResponse> | undefined, b: CallResponse | PlainMessage<CallResponse> | undefined): boolean {
    return proto3.util.equals(CallResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CallResponse.Error
 */
export class CallResponse_Error extends Message<CallResponse_Error> {
  /**
   * TODO: Richer error type.
   *
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<CallResponse_Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CallResponse.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallResponse_Error {
    return new CallResponse_Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallResponse_Error {
    return new CallResponse_Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallResponse_Error {
    return new CallResponse_Error().fromJsonString(jsonString, options);
  }

  static equals(a: CallResponse_Error | PlainMessage<CallResponse_Error> | undefined, b: CallResponse_Error | PlainMessage<CallResponse_Error> | undefined): boolean {
    return proto3.util.equals(CallResponse_Error, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaRequest
 */
export class PullSchemaRequest extends Message<PullSchemaRequest> {
  constructor(data?: PartialMessage<PullSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaRequest | PlainMessage<PullSchemaRequest> | undefined, b: PullSchemaRequest | PlainMessage<PullSchemaRequest> | undefined): boolean {
    return proto3.util.equals(PullSchemaRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse
 */
export class PullSchemaResponse extends Message<PullSchemaResponse> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: string module_name = 2;
   */
  moduleName = "";

  /**
   * For deletes this will not be present.
   *
   * @generated from field: optional xyz.block.ftl.v1.schema.Module schema = 4;
   */
  schema?: Module;

  /**
   * If true there are more schema changes immediately following this one as part of the initial batch.
   * If false this is the last schema change in the initial batch, but others may follow later.
   *
   * @generated from field: bool more = 3;
   */
  more = false;

  /**
   * @generated from field: xyz.block.ftl.v1.DeploymentChangeType change_type = 5;
   */
  changeType = DeploymentChangeType.DEPLOYMENT_ADDED;

  constructor(data?: PartialMessage<PullSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schema", kind: "message", T: Module, opt: true },
    { no: 3, name: "more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "change_type", kind: "enum", T: proto3.getEnumType(DeploymentChangeType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse | PlainMessage<PullSchemaResponse> | undefined, b: PullSchemaResponse | PlainMessage<PullSchemaResponse> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetArtefactDiffsRequest
 */
export class GetArtefactDiffsRequest extends Message<GetArtefactDiffsRequest> {
  /**
   * @generated from field: repeated string client_digests = 1;
   */
  clientDigests: string[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetArtefactDiffsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined, b: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetArtefactDiffsResponse
 */
export class GetArtefactDiffsResponse extends Message<GetArtefactDiffsResponse> {
  /**
   * @generated from field: repeated string missing_digests = 1;
   */
  missingDigests: string[] = [];

  /**
   * Artefacts that the client already has, and their path+executable status.
   *
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact client_artefacts = 2;
   */
  clientArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetArtefactDiffsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "missing_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "client_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined, b: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UploadArtefactRequest
 */
export class UploadArtefactRequest extends Message<UploadArtefactRequest> {
  /**
   * @generated from field: bytes content = 1;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UploadArtefactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined, b: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined): boolean {
    return proto3.util.equals(UploadArtefactRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UploadArtefactResponse
 */
export class UploadArtefactResponse extends Message<UploadArtefactResponse> {
  /**
   * @generated from field: bytes digest = 2;
   */
  digest = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UploadArtefactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined, b: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined): boolean {
    return proto3.util.equals(UploadArtefactResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DeploymentArtefact
 */
export class DeploymentArtefact extends Message<DeploymentArtefact> {
  /**
   * @generated from field: string digest = 1;
   */
  digest = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: bool executable = 3;
   */
  executable = false;

  constructor(data?: PartialMessage<DeploymentArtefact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DeploymentArtefact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "executable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined, b: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined): boolean {
    return proto3.util.equals(DeploymentArtefact, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateDeploymentRequest
 */
export class CreateDeploymentRequest extends Message<CreateDeploymentRequest> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 1;
   */
  schema?: Module;

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact artefacts = 2;
   */
  artefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<CreateDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module },
    { no: 2, name: "artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined, b: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(CreateDeploymentRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateDeploymentResponse
 */
export class CreateDeploymentResponse extends Message<CreateDeploymentResponse> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * Currently active deployment for this module, if any.
   *
   * @generated from field: optional string active_deployment_key = 2;
   */
  activeDeploymentKey?: string;

  constructor(data?: PartialMessage<CreateDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active_deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined, b: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(CreateDeploymentResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentArtefactsRequest
 */
export class GetDeploymentArtefactsRequest extends Message<GetDeploymentArtefactsRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact have_artefacts = 2;
   */
  haveArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetDeploymentArtefactsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentArtefactsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "have_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentArtefactsRequest | PlainMessage<GetDeploymentArtefactsRequest> | undefined, b: GetDeploymentArtefactsRequest | PlainMessage<GetDeploymentArtefactsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentArtefactsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentArtefactsResponse
 */
export class GetDeploymentArtefactsResponse extends Message<GetDeploymentArtefactsResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.DeploymentArtefact artefact = 1;
   */
  artefact?: DeploymentArtefact;

  /**
   * @generated from field: bytes chunk = 2;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<GetDeploymentArtefactsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentArtefactsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artefact", kind: "message", T: DeploymentArtefact },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentArtefactsResponse | PlainMessage<GetDeploymentArtefactsResponse> | undefined, b: GetDeploymentArtefactsResponse | PlainMessage<GetDeploymentArtefactsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentArtefactsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentRequest
 */
export class GetDeploymentRequest extends Message<GetDeploymentRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<GetDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined, b: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentResponse
 */
export class GetDeploymentResponse extends Message<GetDeploymentResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 1;
   */
  schema?: Module;

  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeploymentArtefact artefacts = 2;
   */
  artefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module },
    { no: 2, name: "artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined, b: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.RunnerHeartbeat
 */
export class RunnerHeartbeat extends Message<RunnerHeartbeat> {
  /**
   * UUID representing the runner instance.
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * Language the runner supports.
   *
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  /**
   * @generated from field: optional string deployment = 4;
   */
  deployment?: string;

  /**
   * @generated from field: xyz.block.ftl.v1.RunnerState state = 5;
   */
  state = RunnerState.RUNNER_IDLE;

  /**
   * If present, the reason the Runner is transitioning from ASSIGNED to IDLE.
   *
   * @generated from field: optional string error = 6;
   */
  error?: string;

  constructor(data?: PartialMessage<RunnerHeartbeat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.RunnerHeartbeat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "state", kind: "enum", T: proto3.getEnumType(RunnerState) },
    { no: 6, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunnerHeartbeat {
    return new RunnerHeartbeat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunnerHeartbeat {
    return new RunnerHeartbeat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunnerHeartbeat {
    return new RunnerHeartbeat().fromJsonString(jsonString, options);
  }

  static equals(a: RunnerHeartbeat | PlainMessage<RunnerHeartbeat> | undefined, b: RunnerHeartbeat | PlainMessage<RunnerHeartbeat> | undefined): boolean {
    return proto3.util.equals(RunnerHeartbeat, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.RegisterRunnerResponse
 */
export class RegisterRunnerResponse extends Message<RegisterRunnerResponse> {
  constructor(data?: PartialMessage<RegisterRunnerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.RegisterRunnerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRunnerResponse {
    return new RegisterRunnerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRunnerResponse | PlainMessage<RegisterRunnerResponse> | undefined, b: RegisterRunnerResponse | PlainMessage<RegisterRunnerResponse> | undefined): boolean {
    return proto3.util.equals(RegisterRunnerResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeployRequest
 */
export class UpdateDeployRequest extends Message<UpdateDeployRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  constructor(data?: PartialMessage<UpdateDeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeployRequest {
    return new UpdateDeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeployRequest | PlainMessage<UpdateDeployRequest> | undefined, b: UpdateDeployRequest | PlainMessage<UpdateDeployRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDeployRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeployResponse
 */
export class UpdateDeployResponse extends Message<UpdateDeployResponse> {
  constructor(data?: PartialMessage<UpdateDeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeployResponse {
    return new UpdateDeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeployResponse | PlainMessage<UpdateDeployResponse> | undefined, b: UpdateDeployResponse | PlainMessage<UpdateDeployResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDeployResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReplaceDeployRequest
 */
export class ReplaceDeployRequest extends Message<ReplaceDeployRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas = 0;

  constructor(data?: PartialMessage<ReplaceDeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReplaceDeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceDeployRequest {
    return new ReplaceDeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceDeployRequest | PlainMessage<ReplaceDeployRequest> | undefined, b: ReplaceDeployRequest | PlainMessage<ReplaceDeployRequest> | undefined): boolean {
    return proto3.util.equals(ReplaceDeployRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReplaceDeployResponse
 */
export class ReplaceDeployResponse extends Message<ReplaceDeployResponse> {
  constructor(data?: PartialMessage<ReplaceDeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReplaceDeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceDeployResponse {
    return new ReplaceDeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceDeployResponse | PlainMessage<ReplaceDeployResponse> | undefined, b: ReplaceDeployResponse | PlainMessage<ReplaceDeployResponse> | undefined): boolean {
    return proto3.util.equals(ReplaceDeployResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StreamDeploymentLogsRequest
 */
export class StreamDeploymentLogsRequest extends Message<StreamDeploymentLogsRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: int64 time_stamp = 2;
   */
  timeStamp = protoInt64.zero;

  /**
   * @generated from field: int32 log_level = 3;
   */
  logLevel = 0;

  /**
   * @generated from field: string scope = 4;
   */
  scope = "";

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: optional string error = 6;
   */
  error?: string;

  constructor(data?: PartialMessage<StreamDeploymentLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StreamDeploymentLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time_stamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "log_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamDeploymentLogsRequest {
    return new StreamDeploymentLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamDeploymentLogsRequest | PlainMessage<StreamDeploymentLogsRequest> | undefined, b: StreamDeploymentLogsRequest | PlainMessage<StreamDeploymentLogsRequest> | undefined): boolean {
    return proto3.util.equals(StreamDeploymentLogsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StreamDeploymentLogsResponse
 */
export class StreamDeploymentLogsResponse extends Message<StreamDeploymentLogsResponse> {
  constructor(data?: PartialMessage<StreamDeploymentLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StreamDeploymentLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamDeploymentLogsResponse {
    return new StreamDeploymentLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamDeploymentLogsResponse | PlainMessage<StreamDeploymentLogsResponse> | undefined, b: StreamDeploymentLogsResponse | PlainMessage<StreamDeploymentLogsResponse> | undefined): boolean {
    return proto3.util.equals(StreamDeploymentLogsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusRequest
 */
export class StatusRequest extends Message<StatusRequest> {
  /**
   * @generated from field: bool all_deployments = 1;
   */
  allDeployments = false;

  /**
   * @generated from field: bool all_runners = 2;
   */
  allRunners = false;

  /**
   * @generated from field: bool all_controllers = 3;
   */
  allControllers = false;

  /**
   * @generated from field: bool all_ingress_routes = 4;
   */
  allIngressRoutes = false;

  constructor(data?: PartialMessage<StatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "all_deployments", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "all_runners", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "all_controllers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "all_ingress_routes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusRequest {
    return new StatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatusRequest | PlainMessage<StatusRequest> | undefined, b: StatusRequest | PlainMessage<StatusRequest> | undefined): boolean {
    return proto3.util.equals(StatusRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse
 */
export class StatusResponse extends Message<StatusResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Controller controllers = 1;
   */
  controllers: StatusResponse_Controller[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Runner runners = 2;
   */
  runners: StatusResponse_Runner[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.Deployment deployments = 3;
   */
  deployments: StatusResponse_Deployment[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.StatusResponse.IngressRoute ingress_routes = 4;
   */
  ingressRoutes: StatusResponse_IngressRoute[] = [];

  constructor(data?: PartialMessage<StatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controllers", kind: "message", T: StatusResponse_Controller, repeated: true },
    { no: 2, name: "runners", kind: "message", T: StatusResponse_Runner, repeated: true },
    { no: 3, name: "deployments", kind: "message", T: StatusResponse_Deployment, repeated: true },
    { no: 4, name: "ingress_routes", kind: "message", T: StatusResponse_IngressRoute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse {
    return new StatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse | PlainMessage<StatusResponse> | undefined, b: StatusResponse | PlainMessage<StatusResponse> | undefined): boolean {
    return proto3.util.equals(StatusResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Controller
 */
export class StatusResponse_Controller extends Message<StatusResponse_Controller> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string endpoint = 2;
   */
  endpoint = "";

  /**
   * @generated from field: xyz.block.ftl.v1.ControllerState state = 4;
   */
  state = ControllerState.CONTROLLER_LIVE;

  constructor(data?: PartialMessage<StatusResponse_Controller>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Controller";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(ControllerState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Controller {
    return new StatusResponse_Controller().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Controller | PlainMessage<StatusResponse_Controller> | undefined, b: StatusResponse_Controller | PlainMessage<StatusResponse_Controller> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Controller, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Runner
 */
export class StatusResponse_Runner extends Message<StatusResponse_Runner> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  /**
   * @generated from field: xyz.block.ftl.v1.RunnerState state = 4;
   */
  state = RunnerState.RUNNER_IDLE;

  /**
   * @generated from field: optional string deployment = 5;
   */
  deployment?: string;

  constructor(data?: PartialMessage<StatusResponse_Runner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Runner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(RunnerState) },
    { no: 5, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Runner {
    return new StatusResponse_Runner().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Runner | PlainMessage<StatusResponse_Runner> | undefined, b: StatusResponse_Runner | PlainMessage<StatusResponse_Runner> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Runner, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.Deployment
 */
export class StatusResponse_Deployment extends Message<StatusResponse_Deployment> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: int32 min_replicas = 4;
   */
  minReplicas = 0;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.Module schema = 5;
   */
  schema?: Module;

  constructor(data?: PartialMessage<StatusResponse_Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "schema", kind: "message", T: Module },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_Deployment {
    return new StatusResponse_Deployment().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_Deployment | PlainMessage<StatusResponse_Deployment> | undefined, b: StatusResponse_Deployment | PlainMessage<StatusResponse_Deployment> | undefined): boolean {
    return proto3.util.equals(StatusResponse_Deployment, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.StatusResponse.IngressRoute
 */
export class StatusResponse_IngressRoute extends Message<StatusResponse_IngressRoute> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: string module = 2;
   */
  module = "";

  /**
   * @generated from field: string verb = 3;
   */
  verb = "";

  /**
   * @generated from field: string method = 4;
   */
  method = "";

  /**
   * @generated from field: string path = 5;
   */
  path = "";

  constructor(data?: PartialMessage<StatusResponse_IngressRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.StatusResponse.IngressRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verb", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse_IngressRoute {
    return new StatusResponse_IngressRoute().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse_IngressRoute | PlainMessage<StatusResponse_IngressRoute> | undefined, b: StatusResponse_IngressRoute | PlainMessage<StatusResponse_IngressRoute> | undefined): boolean {
    return proto3.util.equals(StatusResponse_IngressRoute, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DeployRequest
 */
export class DeployRequest extends Message<DeployRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<DeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployRequest {
    return new DeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployRequest | PlainMessage<DeployRequest> | undefined, b: DeployRequest | PlainMessage<DeployRequest> | undefined): boolean {
    return proto3.util.equals(DeployRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DeployResponse
 */
export class DeployResponse extends Message<DeployResponse> {
  constructor(data?: PartialMessage<DeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployResponse {
    return new DeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployResponse | PlainMessage<DeployResponse> | undefined, b: DeployResponse | PlainMessage<DeployResponse> | undefined): boolean {
    return proto3.util.equals(DeployResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.TerminateRequest
 */
export class TerminateRequest extends Message<TerminateRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<TerminateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.TerminateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminateRequest {
    return new TerminateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminateRequest {
    return new TerminateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminateRequest {
    return new TerminateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TerminateRequest | PlainMessage<TerminateRequest> | undefined, b: TerminateRequest | PlainMessage<TerminateRequest> | undefined): boolean {
    return proto3.util.equals(TerminateRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReserveRequest
 */
export class ReserveRequest extends Message<ReserveRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<ReserveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReserveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReserveRequest {
    return new ReserveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReserveRequest {
    return new ReserveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReserveRequest {
    return new ReserveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReserveRequest | PlainMessage<ReserveRequest> | undefined, b: ReserveRequest | PlainMessage<ReserveRequest> | undefined): boolean {
    return proto3.util.equals(ReserveRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.ReserveResponse
 */
export class ReserveResponse extends Message<ReserveResponse> {
  constructor(data?: PartialMessage<ReserveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ReserveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReserveResponse {
    return new ReserveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReserveResponse {
    return new ReserveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReserveResponse {
    return new ReserveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReserveResponse | PlainMessage<ReserveResponse> | undefined, b: ReserveResponse | PlainMessage<ReserveResponse> | undefined): boolean {
    return proto3.util.equals(ReserveResponse, a, b);
  }
}

