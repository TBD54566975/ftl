// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/console/console.proto (package xyz.block.ftl.v1.console, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Data as Data$1, Verb as Verb$1, VerbRef } from "../schema/schema_pb.js";

/**
 * @generated from enum xyz.block.ftl.v1.console.EventType
 */
export enum EventType {
  /**
   * @generated from enum value: EVENT_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: EVENT_TYPE_DEPLOYMENT = 1;
   */
  DEPLOYMENT = 1,

  /**
   * @generated from enum value: EVENT_TYPE_CALL = 2;
   */
  CALL = 2,

  /**
   * @generated from enum value: EVENT_TYPE_LOG = 3;
   */
  LOG = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(EventType)
proto3.util.setEnumType(EventType, "xyz.block.ftl.v1.console.EventType", [
  { no: 0, name: "EVENT_TYPE_UNKNOWN" },
  { no: 1, name: "EVENT_TYPE_DEPLOYMENT" },
  { no: 2, name: "EVENT_TYPE_CALL" },
  { no: 3, name: "EVENT_TYPE_LOG" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.console.DeploymentEventType
 */
export enum DeploymentEventType {
  /**
   * @generated from enum value: DEPLOYMENT_UNKNOWN = 0;
   */
  DEPLOYMENT_UNKNOWN = 0,

  /**
   * @generated from enum value: DEPLOYMENT_CREATED = 1;
   */
  DEPLOYMENT_CREATED = 1,

  /**
   * @generated from enum value: DEPLOYMENT_UPDATED = 2;
   */
  DEPLOYMENT_UPDATED = 2,

  /**
   * @generated from enum value: DEPLOYMENT_REPLACED = 3;
   */
  DEPLOYMENT_REPLACED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentEventType)
proto3.util.setEnumType(DeploymentEventType, "xyz.block.ftl.v1.console.DeploymentEventType", [
  { no: 0, name: "DEPLOYMENT_UNKNOWN" },
  { no: 1, name: "DEPLOYMENT_CREATED" },
  { no: 2, name: "DEPLOYMENT_UPDATED" },
  { no: 3, name: "DEPLOYMENT_REPLACED" },
]);

/**
 * @generated from enum xyz.block.ftl.v1.console.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: LOG_LEVEL_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: LOG_LEVEL_TRACE = 1;
   */
  TRACE = 1,

  /**
   * @generated from enum value: LOG_LEVEL_DEBUG = 5;
   */
  DEBUG = 5,

  /**
   * @generated from enum value: LOG_LEVEL_INFO = 9;
   */
  INFO = 9,

  /**
   * @generated from enum value: LOG_LEVEL_WARN = 13;
   */
  WARN = 13,

  /**
   * @generated from enum value: LOG_LEVEL_ERROR = 17;
   */
  ERROR = 17,
}
// Retrieve enum metadata with: proto3.getEnumType(LogLevel)
proto3.util.setEnumType(LogLevel, "xyz.block.ftl.v1.console.LogLevel", [
  { no: 0, name: "LOG_LEVEL_UNKNOWN" },
  { no: 1, name: "LOG_LEVEL_TRACE" },
  { no: 5, name: "LOG_LEVEL_DEBUG" },
  { no: 9, name: "LOG_LEVEL_INFO" },
  { no: 13, name: "LOG_LEVEL_WARN" },
  { no: 17, name: "LOG_LEVEL_ERROR" },
]);

/**
 * @generated from message xyz.block.ftl.v1.console.Call
 */
export class Call extends Message<Call> {
  /**
   * @generated from field: optional string request_key = 1;
   */
  requestKey?: string;

  /**
   * @generated from field: string deployment_name = 2;
   */
  deploymentName = "";

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: optional xyz.block.ftl.v1.schema.VerbRef source_verb_ref = 4;
   */
  sourceVerbRef?: VerbRef;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.VerbRef destination_verb_ref = 5;
   */
  destinationVerbRef?: VerbRef;

  /**
   * @generated from field: google.protobuf.Duration duration = 6;
   */
  duration?: Duration;

  /**
   * @generated from field: string request = 7;
   */
  request = "";

  /**
   * @generated from field: string response = 8;
   */
  response = "";

  /**
   * @generated from field: optional string error = 9;
   */
  error?: string;

  constructor(data?: PartialMessage<Call>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Call";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "source_verb_ref", kind: "message", T: VerbRef, opt: true },
    { no: 5, name: "destination_verb_ref", kind: "message", T: VerbRef },
    { no: 6, name: "duration", kind: "message", T: Duration },
    { no: 7, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Call {
    return new Call().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Call {
    return new Call().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Call {
    return new Call().fromJsonString(jsonString, options);
  }

  static equals(a: Call | PlainMessage<Call> | undefined, b: Call | PlainMessage<Call> | undefined): boolean {
    return proto3.util.equals(Call, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Deployment
 */
export class Deployment extends Message<Deployment> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: string module_name = 3;
   */
  moduleName = "";

  /**
   * @generated from field: int32 min_replicas = 4;
   */
  minReplicas = 0;

  /**
   * @generated from field: xyz.block.ftl.v1.console.DeploymentEventType event_type = 5;
   */
  eventType = DeploymentEventType.DEPLOYMENT_UNKNOWN;

  /**
   * @generated from field: optional string replaced = 6;
   */
  replaced?: string;

  constructor(data?: PartialMessage<Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "event_type", kind: "enum", T: proto3.getEnumType(DeploymentEventType) },
    { no: 6, name: "replaced", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deployment {
    return new Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJsonString(jsonString, options);
  }

  static equals(a: Deployment | PlainMessage<Deployment> | undefined, b: Deployment | PlainMessage<Deployment> | undefined): boolean {
    return proto3.util.equals(Deployment, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.LogEntry
 */
export class LogEntry extends Message<LogEntry> {
  /**
   * @generated from field: string deployment_name = 1;
   */
  deploymentName = "";

  /**
   * @generated from field: optional string request_key = 2;
   */
  requestKey?: string;

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: int32 log_level = 4;
   */
  logLevel = 0;

  /**
   * @generated from field: map<string, string> attributes = 5;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * @generated from field: optional string error = 7;
   */
  error?: string;

  constructor(data?: PartialMessage<LogEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.LogEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "log_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogEntry {
    return new LogEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogEntry {
    return new LogEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogEntry {
    return new LogEntry().fromJsonString(jsonString, options);
  }

  static equals(a: LogEntry | PlainMessage<LogEntry> | undefined, b: LogEntry | PlainMessage<LogEntry> | undefined): boolean {
    return proto3.util.equals(LogEntry, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Verb
 */
export class Verb extends Message<Verb> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Verb verb = 1;
   */
  verb?: Verb$1;

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  /**
   * @generated from field: string json_request_schema = 3;
   */
  jsonRequestSchema = "";

  constructor(data?: PartialMessage<Verb>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Verb";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verb", kind: "message", T: Verb$1 },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "json_request_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Verb {
    return new Verb().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJsonString(jsonString, options);
  }

  static equals(a: Verb | PlainMessage<Verb> | undefined, b: Verb | PlainMessage<Verb> | undefined): boolean {
    return proto3.util.equals(Verb, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Data
 */
export class Data extends Message<Data> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Data data = 1;
   */
  data?: Data$1;

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  constructor(data?: PartialMessage<Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Data$1 },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {
    return new Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJsonString(jsonString, options);
  }

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {
    return proto3.util.equals(Data, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Module
 */
export class Module extends Message<Module> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string deployment_name = 2;
   */
  deploymentName = "";

  /**
   * @generated from field: string language = 3;
   */
  language = "";

  /**
   * @generated from field: string schema = 4;
   */
  schema = "";

  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Verb verbs = 5;
   */
  verbs: Verb[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Data data = 6;
   */
  data: Data[] = [];

  constructor(data?: PartialMessage<Module>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Module";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "verbs", kind: "message", T: Verb, repeated: true },
    { no: 6, name: "data", kind: "message", T: Data, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Module {
    return new Module().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJsonString(jsonString, options);
  }

  static equals(a: Module | PlainMessage<Module> | undefined, b: Module | PlainMessage<Module> | undefined): boolean {
    return proto3.util.equals(Module, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetModulesRequest
 */
export class GetModulesRequest extends Message<GetModulesRequest> {
  constructor(data?: PartialMessage<GetModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined, b: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined): boolean {
    return proto3.util.equals(GetModulesRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetModulesResponse
 */
export class GetModulesResponse extends Message<GetModulesResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Module modules = 1;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<GetModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined, b: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined): boolean {
    return proto3.util.equals(GetModulesResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetCallsRequest
 */
export class GetCallsRequest extends Message<GetCallsRequest> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: string verb = 2;
   */
  verb = "";

  constructor(data?: PartialMessage<GetCallsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetCallsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verb", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallsRequest {
    return new GetCallsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallsRequest {
    return new GetCallsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallsRequest {
    return new GetCallsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallsRequest | PlainMessage<GetCallsRequest> | undefined, b: GetCallsRequest | PlainMessage<GetCallsRequest> | undefined): boolean {
    return proto3.util.equals(GetCallsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetCallsResponse
 */
export class GetCallsResponse extends Message<GetCallsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Call calls = 1;
   */
  calls: Call[] = [];

  constructor(data?: PartialMessage<GetCallsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetCallsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "calls", kind: "message", T: Call, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallsResponse {
    return new GetCallsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallsResponse {
    return new GetCallsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallsResponse {
    return new GetCallsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallsResponse | PlainMessage<GetCallsResponse> | undefined, b: GetCallsResponse | PlainMessage<GetCallsResponse> | undefined): boolean {
    return proto3.util.equals(GetCallsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetRequestCallsRequest
 */
export class GetRequestCallsRequest extends Message<GetRequestCallsRequest> {
  /**
   * @generated from field: string request_key = 1;
   */
  requestKey = "";

  constructor(data?: PartialMessage<GetRequestCallsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetRequestCallsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequestCallsRequest {
    return new GetRequestCallsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequestCallsRequest {
    return new GetRequestCallsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequestCallsRequest {
    return new GetRequestCallsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequestCallsRequest | PlainMessage<GetRequestCallsRequest> | undefined, b: GetRequestCallsRequest | PlainMessage<GetRequestCallsRequest> | undefined): boolean {
    return proto3.util.equals(GetRequestCallsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetRequestCallsResponse
 */
export class GetRequestCallsResponse extends Message<GetRequestCallsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Call calls = 1;
   */
  calls: Call[] = [];

  constructor(data?: PartialMessage<GetRequestCallsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetRequestCallsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "calls", kind: "message", T: Call, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequestCallsResponse {
    return new GetRequestCallsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequestCallsResponse {
    return new GetRequestCallsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequestCallsResponse {
    return new GetRequestCallsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequestCallsResponse | PlainMessage<GetRequestCallsResponse> | undefined, b: GetRequestCallsResponse | PlainMessage<GetRequestCallsResponse> | undefined): boolean {
    return proto3.util.equals(GetRequestCallsResponse, a, b);
  }
}

/**
 * Query for timeline events.
 *
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery
 */
export class TimelineQuery extends Message<TimelineQuery> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.TimelineQuery.Filter filters = 1;
   */
  filters: TimelineQuery_Filter[] = [];

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: xyz.block.ftl.v1.console.TimelineQuery.Order order = 3;
   */
  order = TimelineQuery_Order.ASC;

  constructor(data?: PartialMessage<TimelineQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filters", kind: "message", T: TimelineQuery_Filter, repeated: true },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "order", kind: "enum", T: proto3.getEnumType(TimelineQuery_Order) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery {
    return new TimelineQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery {
    return new TimelineQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery {
    return new TimelineQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery | PlainMessage<TimelineQuery> | undefined, b: TimelineQuery | PlainMessage<TimelineQuery> | undefined): boolean {
    return proto3.util.equals(TimelineQuery, a, b);
  }
}

/**
 * @generated from enum xyz.block.ftl.v1.console.TimelineQuery.Order
 */
export enum TimelineQuery_Order {
  /**
   * @generated from enum value: ASC = 0;
   */
  ASC = 0,

  /**
   * @generated from enum value: DESC = 1;
   */
  DESC = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TimelineQuery_Order)
proto3.util.setEnumType(TimelineQuery_Order, "xyz.block.ftl.v1.console.TimelineQuery.Order", [
  { no: 0, name: "ASC" },
  { no: 1, name: "DESC" },
]);

/**
 * Limit the number of events returned.
 *
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery.LimitFilter
 */
export class TimelineQuery_LimitFilter extends Message<TimelineQuery_LimitFilter> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  constructor(data?: PartialMessage<TimelineQuery_LimitFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery.LimitFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery_LimitFilter {
    return new TimelineQuery_LimitFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery_LimitFilter {
    return new TimelineQuery_LimitFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery_LimitFilter {
    return new TimelineQuery_LimitFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery_LimitFilter | PlainMessage<TimelineQuery_LimitFilter> | undefined, b: TimelineQuery_LimitFilter | PlainMessage<TimelineQuery_LimitFilter> | undefined): boolean {
    return proto3.util.equals(TimelineQuery_LimitFilter, a, b);
  }
}

/**
 * Filters events by log level.
 *
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery.LogLevelFilter
 */
export class TimelineQuery_LogLevelFilter extends Message<TimelineQuery_LogLevelFilter> {
  /**
   * @generated from field: xyz.block.ftl.v1.console.LogLevel log_level = 1;
   */
  logLevel = LogLevel.UNKNOWN;

  constructor(data?: PartialMessage<TimelineQuery_LogLevelFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery.LogLevelFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log_level", kind: "enum", T: proto3.getEnumType(LogLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery_LogLevelFilter {
    return new TimelineQuery_LogLevelFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery_LogLevelFilter {
    return new TimelineQuery_LogLevelFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery_LogLevelFilter {
    return new TimelineQuery_LogLevelFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery_LogLevelFilter | PlainMessage<TimelineQuery_LogLevelFilter> | undefined, b: TimelineQuery_LogLevelFilter | PlainMessage<TimelineQuery_LogLevelFilter> | undefined): boolean {
    return proto3.util.equals(TimelineQuery_LogLevelFilter, a, b);
  }
}

/**
 * Filters events by deployment name.
 *
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery.DeploymentFilter
 */
export class TimelineQuery_DeploymentFilter extends Message<TimelineQuery_DeploymentFilter> {
  /**
   * @generated from field: repeated string deployments = 1;
   */
  deployments: string[] = [];

  constructor(data?: PartialMessage<TimelineQuery_DeploymentFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery.DeploymentFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery_DeploymentFilter {
    return new TimelineQuery_DeploymentFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery_DeploymentFilter {
    return new TimelineQuery_DeploymentFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery_DeploymentFilter {
    return new TimelineQuery_DeploymentFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery_DeploymentFilter | PlainMessage<TimelineQuery_DeploymentFilter> | undefined, b: TimelineQuery_DeploymentFilter | PlainMessage<TimelineQuery_DeploymentFilter> | undefined): boolean {
    return proto3.util.equals(TimelineQuery_DeploymentFilter, a, b);
  }
}

/**
 * Filters events by request key.
 *
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery.RequestFilter
 */
export class TimelineQuery_RequestFilter extends Message<TimelineQuery_RequestFilter> {
  /**
   * @generated from field: repeated string requests = 1;
   */
  requests: string[] = [];

  constructor(data?: PartialMessage<TimelineQuery_RequestFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery.RequestFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery_RequestFilter {
    return new TimelineQuery_RequestFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery_RequestFilter {
    return new TimelineQuery_RequestFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery_RequestFilter {
    return new TimelineQuery_RequestFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery_RequestFilter | PlainMessage<TimelineQuery_RequestFilter> | undefined, b: TimelineQuery_RequestFilter | PlainMessage<TimelineQuery_RequestFilter> | undefined): boolean {
    return proto3.util.equals(TimelineQuery_RequestFilter, a, b);
  }
}

/**
 * Filters events by event type.
 *
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery.EventTypeFilter
 */
export class TimelineQuery_EventTypeFilter extends Message<TimelineQuery_EventTypeFilter> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.EventType event_types = 1;
   */
  eventTypes: EventType[] = [];

  constructor(data?: PartialMessage<TimelineQuery_EventTypeFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery.EventTypeFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_types", kind: "enum", T: proto3.getEnumType(EventType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery_EventTypeFilter {
    return new TimelineQuery_EventTypeFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery_EventTypeFilter {
    return new TimelineQuery_EventTypeFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery_EventTypeFilter {
    return new TimelineQuery_EventTypeFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery_EventTypeFilter | PlainMessage<TimelineQuery_EventTypeFilter> | undefined, b: TimelineQuery_EventTypeFilter | PlainMessage<TimelineQuery_EventTypeFilter> | undefined): boolean {
    return proto3.util.equals(TimelineQuery_EventTypeFilter, a, b);
  }
}

/**
 * Filters events by time.
 *
 * Either end of the time range can be omitted to indicate no bound.
 *
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery.TimeFilter
 */
export class TimelineQuery_TimeFilter extends Message<TimelineQuery_TimeFilter> {
  /**
   * @generated from field: optional google.protobuf.Timestamp older_than = 1;
   */
  olderThan?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp newer_than = 2;
   */
  newerThan?: Timestamp;

  constructor(data?: PartialMessage<TimelineQuery_TimeFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery.TimeFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "older_than", kind: "message", T: Timestamp, opt: true },
    { no: 2, name: "newer_than", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery_TimeFilter {
    return new TimelineQuery_TimeFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery_TimeFilter {
    return new TimelineQuery_TimeFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery_TimeFilter {
    return new TimelineQuery_TimeFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery_TimeFilter | PlainMessage<TimelineQuery_TimeFilter> | undefined, b: TimelineQuery_TimeFilter | PlainMessage<TimelineQuery_TimeFilter> | undefined): boolean {
    return proto3.util.equals(TimelineQuery_TimeFilter, a, b);
  }
}

/**
 * Filters events by ID.
 *
 * Either end of the ID range can be omitted to indicate no bound.
 *
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery.IDFilter
 */
export class TimelineQuery_IDFilter extends Message<TimelineQuery_IDFilter> {
  /**
   * @generated from field: optional int64 lower_than = 1;
   */
  lowerThan?: bigint;

  /**
   * @generated from field: optional int64 higher_than = 2;
   */
  higherThan?: bigint;

  constructor(data?: PartialMessage<TimelineQuery_IDFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery.IDFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lower_than", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: "higher_than", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery_IDFilter {
    return new TimelineQuery_IDFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery_IDFilter {
    return new TimelineQuery_IDFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery_IDFilter {
    return new TimelineQuery_IDFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery_IDFilter | PlainMessage<TimelineQuery_IDFilter> | undefined, b: TimelineQuery_IDFilter | PlainMessage<TimelineQuery_IDFilter> | undefined): boolean {
    return proto3.util.equals(TimelineQuery_IDFilter, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.TimelineQuery.Filter
 */
export class TimelineQuery_Filter extends Message<TimelineQuery_Filter> {
  /**
   * These map 1:1 with filters in backend/controller/internal/dal/events.go
   *
   * @generated from oneof xyz.block.ftl.v1.console.TimelineQuery.Filter.filter
   */
  filter: {
    /**
     * @generated from field: xyz.block.ftl.v1.console.TimelineQuery.LimitFilter limit = 1;
     */
    value: TimelineQuery_LimitFilter;
    case: "limit";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.TimelineQuery.LogLevelFilter log_level = 2;
     */
    value: TimelineQuery_LogLevelFilter;
    case: "logLevel";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.TimelineQuery.DeploymentFilter deployments = 3;
     */
    value: TimelineQuery_DeploymentFilter;
    case: "deployments";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.TimelineQuery.RequestFilter requests = 4;
     */
    value: TimelineQuery_RequestFilter;
    case: "requests";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.TimelineQuery.EventTypeFilter event_types = 5;
     */
    value: TimelineQuery_EventTypeFilter;
    case: "eventTypes";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.TimelineQuery.TimeFilter time = 6;
     */
    value: TimelineQuery_TimeFilter;
    case: "time";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.TimelineQuery.IDFilter id = 7;
     */
    value: TimelineQuery_IDFilter;
    case: "id";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TimelineQuery_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineQuery.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "message", T: TimelineQuery_LimitFilter, oneof: "filter" },
    { no: 2, name: "log_level", kind: "message", T: TimelineQuery_LogLevelFilter, oneof: "filter" },
    { no: 3, name: "deployments", kind: "message", T: TimelineQuery_DeploymentFilter, oneof: "filter" },
    { no: 4, name: "requests", kind: "message", T: TimelineQuery_RequestFilter, oneof: "filter" },
    { no: 5, name: "event_types", kind: "message", T: TimelineQuery_EventTypeFilter, oneof: "filter" },
    { no: 6, name: "time", kind: "message", T: TimelineQuery_TimeFilter, oneof: "filter" },
    { no: 7, name: "id", kind: "message", T: TimelineQuery_IDFilter, oneof: "filter" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineQuery_Filter {
    return new TimelineQuery_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineQuery_Filter {
    return new TimelineQuery_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineQuery_Filter {
    return new TimelineQuery_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineQuery_Filter | PlainMessage<TimelineQuery_Filter> | undefined, b: TimelineQuery_Filter | PlainMessage<TimelineQuery_Filter> | undefined): boolean {
    return proto3.util.equals(TimelineQuery_Filter, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.StreamTimelineRequest
 */
export class StreamTimelineRequest extends Message<StreamTimelineRequest> {
  /**
   * @generated from field: optional google.protobuf.Duration update_interval = 1;
   */
  updateInterval?: Duration;

  /**
   * @generated from field: google.protobuf.Timestamp after_time = 2;
   */
  afterTime?: Timestamp;

  /**
   * @generated from field: string deployment_name = 3;
   */
  deploymentName = "";

  constructor(data?: PartialMessage<StreamTimelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.StreamTimelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_interval", kind: "message", T: Duration, opt: true },
    { no: 2, name: "after_time", kind: "message", T: Timestamp },
    { no: 3, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamTimelineRequest {
    return new StreamTimelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamTimelineRequest {
    return new StreamTimelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamTimelineRequest {
    return new StreamTimelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamTimelineRequest | PlainMessage<StreamTimelineRequest> | undefined, b: StreamTimelineRequest | PlainMessage<StreamTimelineRequest> | undefined): boolean {
    return proto3.util.equals(StreamTimelineRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.StreamTimelineResponse
 */
export class StreamTimelineResponse extends Message<StreamTimelineResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.console.TimelineEvent event = 1;
   */
  event?: TimelineEvent;

  /**
   * If true there are more logs immediately following this one as part of the initial batch.
   * If false this is the last log in the initial batch, but others may follow later.
   *
   * @generated from field: bool more = 2;
   */
  more = false;

  constructor(data?: PartialMessage<StreamTimelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.StreamTimelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: TimelineEvent },
    { no: 2, name: "more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamTimelineResponse {
    return new StreamTimelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamTimelineResponse {
    return new StreamTimelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamTimelineResponse {
    return new StreamTimelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamTimelineResponse | PlainMessage<StreamTimelineResponse> | undefined, b: StreamTimelineResponse | PlainMessage<StreamTimelineResponse> | undefined): boolean {
    return proto3.util.equals(StreamTimelineResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.TimelineEvent
 */
export class TimelineEvent extends Message<TimelineEvent> {
  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 1;
   */
  timeStamp?: Timestamp;

  /**
   * Unique ID for event.
   *
   * @generated from field: int64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from oneof xyz.block.ftl.v1.console.TimelineEvent.entry
   */
  entry: {
    /**
     * @generated from field: xyz.block.ftl.v1.console.Call call = 3;
     */
    value: Call;
    case: "call";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.Deployment deployment = 4;
     */
    value: Deployment;
    case: "deployment";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.LogEntry log = 5;
     */
    value: LogEntry;
    case: "log";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TimelineEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.TimelineEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "call", kind: "message", T: Call, oneof: "entry" },
    { no: 4, name: "deployment", kind: "message", T: Deployment, oneof: "entry" },
    { no: 5, name: "log", kind: "message", T: LogEntry, oneof: "entry" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineEvent {
    return new TimelineEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineEvent {
    return new TimelineEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineEvent {
    return new TimelineEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineEvent | PlainMessage<TimelineEvent> | undefined, b: TimelineEvent | PlainMessage<TimelineEvent> | undefined): boolean {
    return proto3.util.equals(TimelineEvent, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetTimelineResponse
 */
export class GetTimelineResponse extends Message<GetTimelineResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.TimelineEvent events = 1;
   */
  events: TimelineEvent[] = [];

  /**
   * For pagination, this cursor is where we should start our next query
   *
   * @generated from field: optional int64 cursor = 2;
   */
  cursor?: bigint;

  constructor(data?: PartialMessage<GetTimelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetTimelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: TimelineEvent, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimelineResponse | PlainMessage<GetTimelineResponse> | undefined, b: GetTimelineResponse | PlainMessage<GetTimelineResponse> | undefined): boolean {
    return proto3.util.equals(GetTimelineResponse, a, b);
  }
}

