// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/console/console.proto (package xyz.block.ftl.v1.console, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Data as Data$1, Verb as Verb$1, VerbRef } from "../schema/schema_pb.js";

/**
 * @generated from enum xyz.block.ftl.v1.console.DeploymentEventType
 */
export enum DeploymentEventType {
  /**
   * @generated from enum value: DEPLOYMENT_CREATED = 0;
   */
  DEPLOYMENT_CREATED = 0,

  /**
   * @generated from enum value: DEPLOYMENT_UPDATED = 1;
   */
  DEPLOYMENT_UPDATED = 1,

  /**
   * @generated from enum value: DEPLOYMENT_REPLACED = 2;
   */
  DEPLOYMENT_REPLACED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentEventType)
proto3.util.setEnumType(DeploymentEventType, "xyz.block.ftl.v1.console.DeploymentEventType", [
  { no: 0, name: "DEPLOYMENT_CREATED" },
  { no: 1, name: "DEPLOYMENT_UPDATED" },
  { no: 2, name: "DEPLOYMENT_REPLACED" },
]);

/**
 * @generated from message xyz.block.ftl.v1.console.Call
 */
export class Call extends Message<Call> {
  /**
   * @generated from field: optional string request_key = 1;
   */
  requestKey?: string;

  /**
   * @generated from field: string deployment_name = 2;
   */
  deploymentName = "";

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: optional xyz.block.ftl.v1.schema.VerbRef source_verb_ref = 4;
   */
  sourceVerbRef?: VerbRef;

  /**
   * @generated from field: xyz.block.ftl.v1.schema.VerbRef destination_verb_ref = 5;
   */
  destinationVerbRef?: VerbRef;

  /**
   * @generated from field: google.protobuf.Duration duration = 6;
   */
  duration?: Duration;

  /**
   * @generated from field: string request = 7;
   */
  request = "";

  /**
   * @generated from field: string response = 8;
   */
  response = "";

  /**
   * @generated from field: optional string error = 9;
   */
  error?: string;

  constructor(data?: PartialMessage<Call>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Call";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "source_verb_ref", kind: "message", T: VerbRef, opt: true },
    { no: 5, name: "destination_verb_ref", kind: "message", T: VerbRef },
    { no: 6, name: "duration", kind: "message", T: Duration },
    { no: 7, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Call {
    return new Call().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Call {
    return new Call().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Call {
    return new Call().fromJsonString(jsonString, options);
  }

  static equals(a: Call | PlainMessage<Call> | undefined, b: Call | PlainMessage<Call> | undefined): boolean {
    return proto3.util.equals(Call, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Deployment
 */
export class Deployment extends Message<Deployment> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: string module_name = 3;
   */
  moduleName = "";

  /**
   * @generated from field: int32 min_replicas = 4;
   */
  minReplicas = 0;

  /**
   * @generated from field: xyz.block.ftl.v1.console.DeploymentEventType event_type = 5;
   */
  eventType = DeploymentEventType.DEPLOYMENT_CREATED;

  /**
   * @generated from field: optional string replaced = 6;
   */
  replaced?: string;

  constructor(data?: PartialMessage<Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "event_type", kind: "enum", T: proto3.getEnumType(DeploymentEventType) },
    { no: 6, name: "replaced", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deployment {
    return new Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJsonString(jsonString, options);
  }

  static equals(a: Deployment | PlainMessage<Deployment> | undefined, b: Deployment | PlainMessage<Deployment> | undefined): boolean {
    return proto3.util.equals(Deployment, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.LogEntry
 */
export class LogEntry extends Message<LogEntry> {
  /**
   * @generated from field: string deployment_name = 1;
   */
  deploymentName = "";

  /**
   * @generated from field: optional string request_key = 2;
   */
  requestKey?: string;

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: int32 log_level = 4;
   */
  logLevel = 0;

  /**
   * @generated from field: map<string, string> attributes = 5;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * @generated from field: optional string error = 7;
   */
  error?: string;

  constructor(data?: PartialMessage<LogEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.LogEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "log_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogEntry {
    return new LogEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogEntry {
    return new LogEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogEntry {
    return new LogEntry().fromJsonString(jsonString, options);
  }

  static equals(a: LogEntry | PlainMessage<LogEntry> | undefined, b: LogEntry | PlainMessage<LogEntry> | undefined): boolean {
    return proto3.util.equals(LogEntry, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Verb
 */
export class Verb extends Message<Verb> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Verb verb = 1;
   */
  verb?: Verb$1;

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  constructor(data?: PartialMessage<Verb>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Verb";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verb", kind: "message", T: Verb$1 },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Verb {
    return new Verb().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJsonString(jsonString, options);
  }

  static equals(a: Verb | PlainMessage<Verb> | undefined, b: Verb | PlainMessage<Verb> | undefined): boolean {
    return proto3.util.equals(Verb, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Data
 */
export class Data extends Message<Data> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Data data = 1;
   */
  data?: Data$1;

  /**
   * @generated from field: string schema = 2;
   */
  schema = "";

  constructor(data?: PartialMessage<Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Data$1 },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {
    return new Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJsonString(jsonString, options);
  }

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {
    return proto3.util.equals(Data, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Module
 */
export class Module extends Message<Module> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string deployment_name = 2;
   */
  deploymentName = "";

  /**
   * @generated from field: string language = 3;
   */
  language = "";

  /**
   * @generated from field: string schema = 4;
   */
  schema = "";

  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Verb verbs = 5;
   */
  verbs: Verb[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Data data = 6;
   */
  data: Data[] = [];

  constructor(data?: PartialMessage<Module>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Module";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "verbs", kind: "message", T: Verb, repeated: true },
    { no: 6, name: "data", kind: "message", T: Data, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Module {
    return new Module().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJsonString(jsonString, options);
  }

  static equals(a: Module | PlainMessage<Module> | undefined, b: Module | PlainMessage<Module> | undefined): boolean {
    return proto3.util.equals(Module, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetModulesRequest
 */
export class GetModulesRequest extends Message<GetModulesRequest> {
  constructor(data?: PartialMessage<GetModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined, b: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined): boolean {
    return proto3.util.equals(GetModulesRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetModulesResponse
 */
export class GetModulesResponse extends Message<GetModulesResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Module modules = 1;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<GetModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined, b: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined): boolean {
    return proto3.util.equals(GetModulesResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetCallsRequest
 */
export class GetCallsRequest extends Message<GetCallsRequest> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: string verb = 2;
   */
  verb = "";

  constructor(data?: PartialMessage<GetCallsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetCallsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verb", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallsRequest {
    return new GetCallsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallsRequest {
    return new GetCallsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallsRequest {
    return new GetCallsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallsRequest | PlainMessage<GetCallsRequest> | undefined, b: GetCallsRequest | PlainMessage<GetCallsRequest> | undefined): boolean {
    return proto3.util.equals(GetCallsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetCallsResponse
 */
export class GetCallsResponse extends Message<GetCallsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Call calls = 1;
   */
  calls: Call[] = [];

  constructor(data?: PartialMessage<GetCallsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetCallsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "calls", kind: "message", T: Call, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallsResponse {
    return new GetCallsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallsResponse {
    return new GetCallsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallsResponse {
    return new GetCallsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallsResponse | PlainMessage<GetCallsResponse> | undefined, b: GetCallsResponse | PlainMessage<GetCallsResponse> | undefined): boolean {
    return proto3.util.equals(GetCallsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetRequestCallsRequest
 */
export class GetRequestCallsRequest extends Message<GetRequestCallsRequest> {
  /**
   * @generated from field: string request_key = 1;
   */
  requestKey = "";

  constructor(data?: PartialMessage<GetRequestCallsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetRequestCallsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequestCallsRequest {
    return new GetRequestCallsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequestCallsRequest {
    return new GetRequestCallsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequestCallsRequest {
    return new GetRequestCallsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequestCallsRequest | PlainMessage<GetRequestCallsRequest> | undefined, b: GetRequestCallsRequest | PlainMessage<GetRequestCallsRequest> | undefined): boolean {
    return proto3.util.equals(GetRequestCallsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetRequestCallsResponse
 */
export class GetRequestCallsResponse extends Message<GetRequestCallsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Call calls = 1;
   */
  calls: Call[] = [];

  constructor(data?: PartialMessage<GetRequestCallsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetRequestCallsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "calls", kind: "message", T: Call, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequestCallsResponse {
    return new GetRequestCallsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequestCallsResponse {
    return new GetRequestCallsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequestCallsResponse {
    return new GetRequestCallsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequestCallsResponse | PlainMessage<GetRequestCallsResponse> | undefined, b: GetRequestCallsResponse | PlainMessage<GetRequestCallsResponse> | undefined): boolean {
    return proto3.util.equals(GetRequestCallsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.StreamTimelineRequest
 */
export class StreamTimelineRequest extends Message<StreamTimelineRequest> {
  /**
   * @generated from field: optional google.protobuf.Duration update_interval = 1;
   */
  updateInterval?: Duration;

  /**
   * @generated from field: google.protobuf.Timestamp after_time = 2;
   */
  afterTime?: Timestamp;

  /**
   * @generated from field: string deployment_name = 3;
   */
  deploymentName = "";

  constructor(data?: PartialMessage<StreamTimelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.StreamTimelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_interval", kind: "message", T: Duration, opt: true },
    { no: 2, name: "after_time", kind: "message", T: Timestamp },
    { no: 3, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamTimelineRequest {
    return new StreamTimelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamTimelineRequest {
    return new StreamTimelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamTimelineRequest {
    return new StreamTimelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamTimelineRequest | PlainMessage<StreamTimelineRequest> | undefined, b: StreamTimelineRequest | PlainMessage<StreamTimelineRequest> | undefined): boolean {
    return proto3.util.equals(StreamTimelineRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.StreamTimelineResponse
 */
export class StreamTimelineResponse extends Message<StreamTimelineResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 1;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from oneof xyz.block.ftl.v1.console.StreamTimelineResponse.entry
   */
  entry: {
    /**
     * @generated from field: xyz.block.ftl.v1.console.Call call = 2;
     */
    value: Call;
    case: "call";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.Deployment deployment = 3;
     */
    value: Deployment;
    case: "deployment";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.console.LogEntry log = 4;
     */
    value: LogEntry;
    case: "log";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * If true there are more logs immediately following this one as part of the initial batch.
   * If false this is the last log in the initial batch, but others may follow later.
   *
   * @generated from field: bool more = 5;
   */
  more = false;

  constructor(data?: PartialMessage<StreamTimelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.StreamTimelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 2, name: "call", kind: "message", T: Call, oneof: "entry" },
    { no: 3, name: "deployment", kind: "message", T: Deployment, oneof: "entry" },
    { no: 4, name: "log", kind: "message", T: LogEntry, oneof: "entry" },
    { no: 5, name: "more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamTimelineResponse {
    return new StreamTimelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamTimelineResponse {
    return new StreamTimelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamTimelineResponse {
    return new StreamTimelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamTimelineResponse | PlainMessage<StreamTimelineResponse> | undefined, b: StreamTimelineResponse | PlainMessage<StreamTimelineResponse> | undefined): boolean {
    return proto3.util.equals(StreamTimelineResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.StreamLogsRequest
 */
export class StreamLogsRequest extends Message<StreamLogsRequest> {
  /**
   * @generated from field: optional google.protobuf.Duration update_interval = 1;
   */
  updateInterval?: Duration;

  /**
   * @generated from field: google.protobuf.Timestamp after_time = 2;
   */
  afterTime?: Timestamp;

  /**
   * @generated from field: string deployment_name = 3;
   */
  deploymentName = "";

  constructor(data?: PartialMessage<StreamLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.StreamLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_interval", kind: "message", T: Duration, opt: true },
    { no: 2, name: "after_time", kind: "message", T: Timestamp },
    { no: 3, name: "deployment_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamLogsRequest {
    return new StreamLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamLogsRequest {
    return new StreamLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamLogsRequest {
    return new StreamLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamLogsRequest | PlainMessage<StreamLogsRequest> | undefined, b: StreamLogsRequest | PlainMessage<StreamLogsRequest> | undefined): boolean {
    return proto3.util.equals(StreamLogsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.StreamLogsResponse
 */
export class StreamLogsResponse extends Message<StreamLogsResponse> {
  /**
   * @generated from field: xyz.block.ftl.v1.console.LogEntry log = 1;
   */
  log?: LogEntry;

  /**
   * If true there are more logs immediately following this one as part of the initial batch.
   * If false this is the last log in the initial batch, but others may follow later.
   *
   * @generated from field: bool more = 2;
   */
  more = false;

  constructor(data?: PartialMessage<StreamLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.StreamLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: LogEntry },
    { no: 2, name: "more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamLogsResponse {
    return new StreamLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamLogsResponse {
    return new StreamLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamLogsResponse {
    return new StreamLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamLogsResponse | PlainMessage<StreamLogsResponse> | undefined, b: StreamLogsResponse | PlainMessage<StreamLogsResponse> | undefined): boolean {
    return proto3.util.equals(StreamLogsResponse, a, b);
  }
}

