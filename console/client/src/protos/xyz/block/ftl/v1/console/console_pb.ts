// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/console/console.proto (package xyz.block.ftl.v1.console, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Data, Verb as Verb$1 } from "../schema/schema_pb.js";

/**
 * @generated from message xyz.block.ftl.v1.console.Call
 */
export class Call extends Message<Call> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 runner_id = 2;
   */
  runnerId = protoInt64.zero;

  /**
   * @generated from field: int64 ingress_id = 3;
   */
  ingressId = protoInt64.zero;

  /**
   * @generated from field: int64 controller_id = 4;
   */
  controllerId = protoInt64.zero;

  /**
   * @generated from field: int64 time_stamp = 5;
   */
  timeStamp = protoInt64.zero;

  /**
   * @generated from field: string source_module = 6;
   */
  sourceModule = "";

  /**
   * @generated from field: string source_verb = 7;
   */
  sourceVerb = "";

  /**
   * @generated from field: string dest_module = 8;
   */
  destModule = "";

  /**
   * @generated from field: string dest_verb = 9;
   */
  destVerb = "";

  /**
   * @generated from field: int32 duration_ms = 10;
   */
  durationMs = 0;

  /**
   * @generated from field: bytes request = 11;
   */
  request = new Uint8Array(0);

  /**
   * @generated from field: bytes response = 12;
   */
  response = new Uint8Array(0);

  /**
   * @generated from field: bytes error = 13;
   */
  error = new Uint8Array(0);

  constructor(data?: PartialMessage<Call>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Call";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "runner_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ingress_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "controller_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "time_stamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "source_module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "source_verb", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "dest_module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "dest_verb", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "duration_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "request", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 12, name: "response", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "error", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Call {
    return new Call().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Call {
    return new Call().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Call {
    return new Call().fromJsonString(jsonString, options);
  }

  static equals(a: Call | PlainMessage<Call> | undefined, b: Call | PlainMessage<Call> | undefined): boolean {
    return proto3.util.equals(Call, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Verb
 */
export class Verb extends Message<Verb> {
  /**
   * @generated from field: xyz.block.ftl.v1.schema.Verb verb = 1;
   */
  verb?: Verb$1;

  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Call calls = 2;
   */
  calls: Call[] = [];

  constructor(data?: PartialMessage<Verb>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Verb";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verb", kind: "message", T: Verb$1 },
    { no: 2, name: "calls", kind: "message", T: Call, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Verb {
    return new Verb().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Verb {
    return new Verb().fromJsonString(jsonString, options);
  }

  static equals(a: Verb | PlainMessage<Verb> | undefined, b: Verb | PlainMessage<Verb> | undefined): boolean {
    return proto3.util.equals(Verb, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.Module
 */
export class Module extends Message<Module> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Verb verbs = 3;
   */
  verbs: Verb[] = [];

  /**
   * @generated from field: repeated xyz.block.ftl.v1.schema.Data data = 4;
   */
  data: Data[] = [];

  constructor(data?: PartialMessage<Module>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.Module";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verbs", kind: "message", T: Verb, repeated: true },
    { no: 4, name: "data", kind: "message", T: Data, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Module {
    return new Module().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJsonString(jsonString, options);
  }

  static equals(a: Module | PlainMessage<Module> | undefined, b: Module | PlainMessage<Module> | undefined): boolean {
    return proto3.util.equals(Module, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetModulesRequest
 */
export class GetModulesRequest extends Message<GetModulesRequest> {
  constructor(data?: PartialMessage<GetModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined, b: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined): boolean {
    return proto3.util.equals(GetModulesRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.console.GetModulesResponse
 */
export class GetModulesResponse extends Message<GetModulesResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.console.Module modules = 1;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<GetModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.console.GetModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined, b: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined): boolean {
    return proto3.util.equals(GetModulesResponse, a, b);
  }
}

