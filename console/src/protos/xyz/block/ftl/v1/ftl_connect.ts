// @generated by protoc-gen-connect-es v0.8.6 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/ftl.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CallRequest, CallResponse, CreateDeploymentRequest, CreateDeploymentResponse, GetArtefactDiffsRequest, GetArtefactDiffsResponse, ListRequest, ListResponse, PingRequest, PingResponse, PullSchemaRequest, PullSchemaResponse, PushSchemaRequest, PushSchemaResponse, SendRequest, SendResponse, UploadArtefactRequest, UploadArtefactResponse } from "./ftl_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * VerbService is a common interface shared by multiple services for calling Verbs.
 *
 * @generated from service xyz.block.ftl.v1.VerbService
 */
export const VerbService = {
  typeName: "xyz.block.ftl.v1.VerbService",
  methods: {
    /**
     * Ping service for readiness.
     *
     * @generated from rpc xyz.block.ftl.v1.VerbService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Issue a synchronous call to a Verb.
     *
     * @generated from rpc xyz.block.ftl.v1.VerbService.Call
     */
    call: {
      name: "Call",
      I: CallRequest,
      O: CallResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Issue an asynchronous call to a Verb.
     *
     * @generated from rpc xyz.block.ftl.v1.VerbService.Send
     */
    send: {
      name: "Send",
      I: SendRequest,
      O: SendResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List the available Verbs.
     *
     * @generated from rpc xyz.block.ftl.v1.VerbService.List
     */
    list: {
      name: "List",
      I: ListRequest,
      O: ListResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * DevelService is the service that provides language-specific development and
 * deployment functionality.
 *
 * The DevelService is responsible for hot reloading when code changes, and
 * passing Verb calls through.
 *
 * @generated from service xyz.block.ftl.v1.DevelService
 */
export const DevelService = {
  typeName: "xyz.block.ftl.v1.DevelService",
  methods: {
    /**
     * Ping service for readiness.
     *
     * @generated from rpc xyz.block.ftl.v1.DevelService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Push schema changes to the server.
     *
     * @generated from rpc xyz.block.ftl.v1.DevelService.PushSchema
     */
    pushSchema: {
      name: "PushSchema",
      I: PushSchemaRequest,
      O: PushSchemaResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Pull schema changes from the server.
     *
     * @generated from rpc xyz.block.ftl.v1.DevelService.PullSchema
     */
    pullSchema: {
      name: "PullSchema",
      I: PullSchemaRequest,
      O: PullSchemaResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

/**
 * @generated from service xyz.block.ftl.v1.BackplaneService
 */
export const BackplaneService = {
  typeName: "xyz.block.ftl.v1.BackplaneService",
  methods: {
    /**
     * Ping service for readiness.
     *
     * @generated from rpc xyz.block.ftl.v1.BackplaneService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get list of artefacts that differ between the server and client.
     *
     * @generated from rpc xyz.block.ftl.v1.BackplaneService.GetArtefactDiffs
     */
    getArtefactDiffs: {
      name: "GetArtefactDiffs",
      I: GetArtefactDiffsRequest,
      O: GetArtefactDiffsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Upload artefacts to the server.
     *
     * @generated from rpc xyz.block.ftl.v1.BackplaneService.UploadArtefact
     */
    uploadArtefact: {
      name: "UploadArtefact",
      I: UploadArtefactRequest,
      O: UploadArtefactResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a deployment.
     *
     * @generated from rpc xyz.block.ftl.v1.BackplaneService.CreateDeployment
     */
    createDeployment: {
      name: "CreateDeployment",
      I: CreateDeploymentRequest,
      O: CreateDeploymentResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

