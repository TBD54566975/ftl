VERSION = %(git describe --tags --always --dirty | sed -e 's/^v//')%
DEST = build
RELEASE = %{DEST}/release

GO_SOURCES = **/*.go

SCHEMA_IN = backend/schema/**/*.go cmd/ftl-schema/**/*.go
SCHEMA_OUT = backend/protos/xyz/block/ftl/v1/schema/schema.proto

NODE_PROTOC_PLUGINS = frontend/node_modules/.bin/protoc-gen-connect-es \
  frontend/node_modules/.bin/protoc-gen-es

PROTO_IN = **/*.proto **/buf.* bin/protoc* bin/buf %{NODE_PROTOC_PLUGINS}
# There's no real way to mechanically generate the list of outputs, so we just
# explicitly list them here.
PROTO_OUT = backend/protos/xyz/block/ftl/v1/ftlv1connect/ftl.connect.go \
    backend/protos/xyz/block/ftl/v1/schema/schema.pb.go \
    backend/protos/xyz/block/ftl/v1/console/console.pb.go \
    backend/protos/xyz/block/ftl/v1/schema/runtime.pb.go \
    backend/protos/xyz/block/ftl/v1/ftl.pb.go \
    frontend/src/protos/xyz/block/ftl/v1/ftl_connect.ts \
    frontend/src/protos/xyz/block/ftl/v1/schema/schema_pb.ts \
    frontend/src/protos/xyz/block/ftl/v1/schema/runtime_pb.ts \
    frontend/src/protos/xyz/block/ftl/v1/ftl_pb.ts \
    frontend/src/protos/xyz/block/ftl/v1/console/console_pb.ts

COMMON_LOG_IN = internal/log/api.go
COMMON_LOG_OUT = internal/log/log_level_string.go

KT_RUNTIME_IN = kotlin-runtime/ftl-runtime/**/*.{kt,kts} pom.xml kotlin-runtime/ftl-runtime/**/pom.xml
KT_RUNTIME_OUT = kotlin-runtime/ftl-runtime/target/ftl-runtime-1.0-SNAPSHOT.jar
KT_RUNTIME_RUNNER_TEMPLATE_OUT = build/template/ftl/jars/ftl-runtime.jar

CLIENT_IN = frontend/src/**/*
CLIENT_OUT = frontend/dist/index.html
NPM_IN = frontend/package{,-lock}.json
NPM_OUT = frontend/node_modules %{NODE_PROTOC_PLUGINS}

SQLC_IN = sqlc.yaml \
  backend/controller/sql/schema/*.sql \
  backend/controller/sql/queries.sql
SQLC_OUT = backend/controller/sql/db.go \
  %(grep -q copyfrom backend/controller/sql/queries.sql && echo backend/controller/sql/copyfrom.go || true)% \
  backend/controller/sql/models.go \
  backend/controller/sql/queries.sql.go

RUNNER_TEMPLATE_ZIP = backend/controller/scaling/localscaling/template.zip

#virtual release:
#  inputs: %{RELEASE}/ftl %{RELEASE}/ftl-controller %{RELEASE}/ftl-runner

%{SQLC_OUT}: %{SQLC_IN}
  build:
    sqlc generate --experimental
    # sqlc 1.18.0 generates a file with a missing import
    gosimports -w backend/controller/sql/querier.go

%{RELEASE}:
  build: install -m 0700 -d %{OUT}

# Build all binaries
# implicit %{RELEASE}/%{1}: cmd/*
#   inputs: %{RELEASE} %{GO_SOURCES} %{CLIENT_OUT}
#   build: go build -o %{OUT} -tags release -ldflags "-X github.com/TBD54566975/ftl.Version=%{VERSION} -X github.com/TBD54566975/ftl.Timestamp=$(date +%s)" ./cmd/%{1}

%{RELEASE}/ftl-controller: %{RELEASE} %{GO_SOURCES} %{CLIENT_OUT} cmd/ftl-controller/**/*.go
  build: go build -o %{OUT} -tags release -ldflags "-X github.com/TBD54566975/ftl.Version=%{VERSION} -X github.com/TBD54566975/ftl.Timestamp=$(date +%s)" ./cmd/ftl-controller

%{RELEASE}/ftl-runner: %{RELEASE} %{GO_SOURCES} cmd/ftl-runner/**/*.go
  build: go build -o %{OUT} -tags release -ldflags "-X github.com/TBD54566975/ftl.Version=%{VERSION} -X github.com/TBD54566975/ftl.Timestamp=$(date +%s)" ./cmd/ftl-runner

%{RELEASE}/ftl: %{RELEASE} %{GO_SOURCES} cmd/ftl/**/*.go %{CLIENT_OUT} **/*.zip
  build: go build -o %{OUT} -tags release -ldflags "-X github.com/TBD54566975/ftl.Version=%{VERSION} -X github.com/TBD54566975/ftl.Timestamp=$(date +%s)" ./cmd/ftl

%{RELEASE}/ftl-initdb: %{RELEASE} %{GO_SOURCES} cmd/ftl-initdb/**/*.go
  build: go build -o %{OUT} -tags release -ldflags "-X github.com/TBD54566975/ftl.Version=%{VERSION} -X github.com/TBD54566975/ftl.Timestamp=$(date +%s)" ./cmd/ftl-initdb

# Release builds include zipped scaffolding becaused raw go:embed doesn't
# preserve permissions or symlinks. Irritating.
go-runtime/scaffolding.zip: go-runtime/scaffolding/**/*
  cd go-runtime/scaffolding
  build: zip -q --symlinks -r ../scaffolding.zip .

go-runtime/compile/build-template.zip: go-runtime/compile/build-template/**/*
  cd go-runtime/compile/build-template
  build: zip -q --symlinks -r ../build-template.zip .

go-runtime/compile/external-module-template.zip: go-runtime/compile/external-module-template/**/*
  cd go-runtime/compile/external-module-template
  build: zip -q --symlinks -r ../external-module-template.zip .

kotlin-runtime/scaffolding.zip: kotlin-runtime/scaffolding/**/*
  cd kotlin-runtime/scaffolding
  build: zip -q --symlinks -r ../scaffolding.zip .

kotlin-runtime/external-module-template.zip: kotlin-runtime/external-module-template/**/*
  cd kotlin-runtime/external-module-template
  build: zip -q --symlinks -r ../external-module-template.zip .

%{SCHEMA_OUT}: %{SCHEMA_IN}
  build:
    ftl-schema > %{OUT}
    buf format -w %{OUT}

%{PROTO_OUT}: %{PROTO_IN}
  build:
    buf format -w
    buf lint
    (cd backend/protos && buf generate)
  # There's a build cycle dependency here, so we can't clean: ftl-schema depends on generated .pb.go files
  -clean

%{KT_RUNTIME_OUT}: %{KT_RUNTIME_IN} %{PROTO_IN}
  build:
    mvn -B -N install
    mvn -B -pl :ftl-runtime install
  +clean: mvn -B -pl :ftl-runtime clean

%(dirname %{KT_RUNTIME_RUNNER_TEMPLATE_OUT})%:
  build: install -m 0700 -d %{OUT}

%{KT_RUNTIME_RUNNER_TEMPLATE_OUT}: %{KT_RUNTIME_OUT} %(dirname %{KT_RUNTIME_RUNNER_TEMPLATE_OUT})%
  build: install -m 0600 %{KT_RUNTIME_OUT} %{OUT}

%{RUNNER_TEMPLATE_ZIP}: %{KT_RUNTIME_RUNNER_TEMPLATE_OUT}
  build: cd build/template && zip -q --symlinks -r ../../%{OUT} .

%{COMMON_LOG_OUT}: %{COMMON_LOG_IN}
  build: go generate %{IN}

%{NPM_OUT}: %{NPM_IN}
  cd frontend
  build: npm install
  -clean # Don't clean node_modules

%{CLIENT_OUT}: %{CLIENT_IN} %{NPM_OUT}
  cd frontend
  build: npm run build
  clean: rm -rf dist .parcel-cache