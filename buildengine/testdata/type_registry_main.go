// Code generated by FTL. DO NOT EDIT.
package main

import (
	"context"
	"reflect"

	"github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1/ftlv1connect"
	"github.com/TBD54566975/ftl/common/plugin"
	"github.com/TBD54566975/ftl/go-runtime/ftl/typeregistry"
	"github.com/TBD54566975/ftl/go-runtime/server"

	"ftl/another"
	"ftl/other"
)

func main() {
	verbConstructor := server.NewUserVerbServer("other",
		server.HandleCall(other.Echo),
	)
	ctx := context.Background()

	tr := typeregistry.NewTypeRegistry()
	tr.RegisterSumType(reflect.TypeFor[another.SecondTypeEnum](), map[string]reflect.Type{
		"One": reflect.TypeFor[another.One](),
		"Two": reflect.TypeFor[another.Two](),
	})
	tr.RegisterSumType(reflect.TypeFor[another.TypeEnum](), map[string]reflect.Type{
		"A": reflect.TypeFor[another.A](),
		"B": reflect.TypeFor[another.B](),
	})
	tr.RegisterSumType(reflect.TypeFor[other.SecondTypeEnum](), map[string]reflect.Type{
		"A": reflect.TypeFor[other.A](),
		"B": reflect.TypeFor[other.B](),
	})
	tr.RegisterSumType(reflect.TypeFor[other.TypeEnum](), map[string]reflect.Type{
		"Bool": reflect.TypeFor[other.Bool](),
		"Bytes": reflect.TypeFor[other.Bytes](),
		"Float": reflect.TypeFor[other.Float](),
		"Int": reflect.TypeFor[other.Int](),
		"Time": reflect.TypeFor[other.Time](),
		"List": reflect.TypeFor[other.List](),
		"Map": reflect.TypeFor[other.Map](),
		"String": reflect.TypeFor[other.String](),
		"Struct": reflect.TypeFor[other.Struct](),
		"Option": reflect.TypeFor[other.Option](),
		"Unit": reflect.TypeFor[other.Unit](),
	})
	ctx = typeregistry.ContextWithTypeRegistry(ctx, tr)

	plugin.Start(ctx, "other", verbConstructor, ftlv1connect.VerbServiceName, ftlv1connect.NewVerbServiceHandler)
}
