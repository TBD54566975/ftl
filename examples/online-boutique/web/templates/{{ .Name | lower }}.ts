// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
// eslint-disable @typescript-eslint/no-unused-vars
//
// Automatically generated by
//     ____________ 
//    / __/_  __/ / 
//   / _/  / / / /__
//  /_/   /_/ /____/            
//
//

{{- range .Imports }}
import * as {{. | lower }} from "./{{. | lower}}"
{{- end}}

{{- range .Data }}
export interface {{ .Name | camel }}{{ .TypeParameters | tsTypeParameters }} {
{{- range .Fields }}
  {{ .Name }}: {{ .Type | tsType }};
{{- end }}
}
{{ end}}

export class {{ .Name | camel }}Client {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }
{{- range .Verbs }}
{{- $verb := . -}}
{{- range .Metadata }}
{{ if eq "MetadataIngress" (. | typename) }}
  public async {{ $verb.Name | lowerCamel }}(request: {{ $verb.Request | bodyType }}): Promise<{{ $verb.Response | bodyType }}> {
    const path = `{{ $verb | url }}`;
    {{ if eq .Method "GET" -}}
    const response = await fetch(`${this.baseUrl}${path}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    {{ else if eq .Method "POST" -}}
    const response = await fetch(`${this.baseUrl}${path}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    });
    {{- end -}}
    
    if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }

    return response.json();
  }
{{- end }}
{{- end }}
{{- end }}
}
