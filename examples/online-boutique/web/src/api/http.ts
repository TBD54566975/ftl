// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
// eslint-disable @typescript-eslint/no-unused-vars
//
// Automatically generated by
//     ____________ 
//    / __/_  __/ / 
//   / _/  / / / /__
//  /_/   /_/ /____/            
//
//
import * as builtin from "./builtin"
export interface DeleteRequest {
  userId: string;
}

export interface DeleteResponse {
}

export interface ErrorResponse {
  error: string;
}

export interface GetRequest {
  userId: string;
  postId: string;
}

export interface GetResponse {
  message: string;
  nested: Nested;
}

export interface Nested {
  goodStuff: string;
}

export interface PostRequest {
  userId: number;
  postId: number;
}

export interface PostResponse {
  success: bool;
}

export interface PutRequest {
  userId: string;
  postId: string;
}

export interface PutResponse {
}


export class HttpClient {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  public async delete(request: DeleteRequest): Promise<DeleteResponse> {
    const path = `/http/users/userId`;
    if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }

    return response.json();
  }

  public async get(request: GetRequest): Promise<GetResponse> {
    const path = `/http/users/userId/posts?@json=${encodeURIComponent(JSON.stringify(request))}`;
    const response = await fetch(`${this.baseUrl}${path}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }

    return response.json();
  }

  public async post(request: PostRequest): Promise<PostResponse> {
    const path = `/http/users`;
    const response = await fetch(`${this.baseUrl}${path}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    });if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }

    return response.json();
  }

  public async put(request: PutRequest): Promise<PutResponse> {
    const path = `/http/users/userId`;
    if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }

    return response.json();
  }
}
