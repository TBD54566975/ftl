#!/bin/bash
set -euo pipefail

# This script checks if the SQL migration have been modified compared to the common ancestor with the main branch.
# It ignores comments when comparing the files.

remove_comments() {
    sed 's/[[:space:]]*--.*$//g' "$1"
}

compare_sql_files() {
    local file1="$1"
    local file2="$2"
    diff -q <(remove_comments "$file1" | sed '/^\s*$/d' | sort) \
            <(remove_comments "$file2" | sed '/^\s*$/d' | sort) > /dev/null
}

show_diff() {
    local file1="$1"
    local file2="$2"
    diff -u <(remove_comments "$file1") <(remove_comments "$file2")
}

fail() {
    echo "❌ Existing migrations changed. Please make sure only comments are changed in existing migration files."
    exit 1
}

main() {
    local sql_dir="backend/controller/sql/schema"
    local changed_files

    merge_base_sha=$(git merge-base HEAD origin/main)
    changed_files=$(git diff --name-only "$merge_base_sha" -- "$sql_dir")

    # Show the diff of the SQL files compared to HEAD to the user
    git diff --color=always "$merge_base_sha" -- "$sql_dir"/*.sql | cat

    # Track new files added or changed
    if [ -z "$changed_files" ]; then
        echo "✅ No files changed in schema directory"
        exit 0
    fi

    while IFS= read -r file; do
        if [ ! -f "$file" ]; then
            echo "❌ $file existed in merge-base of HEAD and main ($merge_base_sha), but has been deleted in head"
            exit 1
        fi

        # Does the file exist in HEAD?
        if ! git show "$merge_base_sha:$file" &> /dev/null; then
            echo "✅ New: $file"
            continue
        fi

        if compare_sql_files "$file" <(git show "$merge_base_sha:$file"); then
            : # Do nothing if files are the same
        else
            echo "❌ Migration files changes detected"
            show_diff "$file" <(git show "$merge_base_sha:$file")
            fail
        fi
    done <<< "$changed_files"

    echo "✅ No schema changes detected for existing migration files"
}

main
