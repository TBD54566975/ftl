#!/bin/bash
set -euo pipefail

# This script checks if the SQL migration have been modified compared to the common ancestor with the main branch.
# It ignores comments when comparing the files.

remove_comments() {
    sed 's/[[:space:]]*--.*$//g' "$1"
}

compare_sql_files() {
    local file1="$1"
    local file2="$2"
    diff -q <(remove_comments "$file1" | sed '/^\s*$/d' | sort) \
            <(remove_comments "$file2" | sed '/^\s*$/d' | sort) > /dev/null
}

show_diff() {
    local file1="$1"
    local file2="$2"
    diff -u <(remove_comments "$file1") <(remove_comments "$file2")
}

fail() {
    echo "❌ Existing migrations changed. Please make sure only comments are changed in existing migration files."
    exit 1
}

main() {
    local sql_dir="backend/controller/sql/schema"
    local changed_files
    local merge_base

    # Find the merge base commit
    merge_base=$(git merge-base HEAD origin/main)

    # Show the diff of the SQL files compared to the merge base
    git diff --color=always "$merge_base" -- "$sql_dir"/*.sql | cat

    # Get list of changed SQL files compared to the merge base
    changed_files=$(git diff --name-only "$merge_base" -- "$sql_dir"/*.sql)
    if [ -z "$changed_files" ]; then
        echo "✅ No schema changes detected"
        exit 0
    fi

    # Track new files added
    local new_files
    while IFS= read -r file; do
        if [ ! -f "$file" ]; then
            echo "$file no longer exists!"
            exit 1
        fi

        # Does the file exist in the merge base?
        if ! git show "$merge_base:$file" &> /dev/null; then
            echo "✅ New: $file"
            new_files="$new_files $file"
            continue
        fi

        if compare_sql_files "$file" <(git show "$merge_base:$file"); then
            : # Do nothing if files are the same
        else
            echo "❌ Migration files changes detected"
            show_diff "$file" <(git show "$merge_base:$file")
            fail
        fi
    done <<< "$changed_files"

    # We should also check if there were any deleted files, ignoring new files
    while IFS= read -r file; do
        # A new file won't exist in the merge base, so ignore them.
        if [[ $new_files == *"$file"* ]]; then
            continue
        fi

        if ! git show "$merge_base:$file" &> /dev/null; then
            echo "🔥 Deleted: $file"
            fail
        fi
    done < <(git diff --name-only "$merge_base" -- "$sql_dir"/*.sql)

    echo "✅ No schema changes detected for existing migration files"
}

main
