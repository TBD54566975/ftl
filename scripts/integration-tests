#!/bin/bash
set -euo pipefail
export PATH="$PWD/build/release:$PATH"

info() {
  echo -e "\033[1;32m$*\033[0m"
}

error() {
  echo -e "\033[1;31m$*\033[0m"
  exit 1
}

build_release() {
  info "Building release"
  bit build/release/ftl-controller \
    build/release/ftl-runner \
    build/release/ftl \
    kotlin-runtime/ftl-runtime/target/ftl-runtime-1.0-SNAPSHOT.jar \
    kotlin-runtime/ftl-generator/target/ftl-generator-1.0-SNAPSHOT-jar-with-dependencies.jar \
    build/template/ftl/jars/ftl-runtime.jar
}

wipe_database() {
  info "Initialising database"
  ftl-initdb --recreate
}

wait_for() {
  info "Waiting for $1"
  for _ in {1..240}; do
    if eval "$2"; then
      info "Success!"
      return 0
    fi
    sleep 1
  done
  error "Timed out waiting for $1"
}

stop_cluster() {
  kill %1
  wait
}

start_cluster() {
  info "Starting cluster"
  goreman -logtime=false -f Procfile.integration start &
  wait_for "cluster to become ready" "ftl status"
  trap stop_cluster EXIT INT TERM
}

deploy_echo_kotlin() (
  info "Deploying echo-kotlin"
  cd examples/echo-kotlin
  mvn compile
  ftl deploy target
)

deploy_fresh_kotlin() (
  info "Deploying newly initialised Kotlin module"
  rm -rf build/echo2
  ftl init kotlin -n echo2 build/echo2
  cd build/echo2
  mvn compile
  ftl deploy target
)

deploy_time_go() (
  info "Deploying time"
  cd examples
  # Pull a supported platforms from the cluster.
  platform="$(ftl status | jq -r '.runners[].labels | "\(.os)-\(.arch)"' | sort | uniq | head -1)"
  ftl-go --os "${platform%-*}" --arch "${platform#*-}" deploy time
)

wait_for_deploys() {
  wait_for "deployments to come up" 'ftl status | jq -r ".routes[].module" | sort | paste -sd " " - | grep -q "echo echo2 time"'
}

build_release
wipe_database
start_cluster

# Cluster is up, start interacting with it.
deploy_time_go
deploy_echo_kotlin
deploy_fresh_kotlin

wait_for_deploys

info "Calling echo"
message="$(ftl call echo.echo '{"name": "Alice"}' | jq -r .message)"
[[ "$message" =~ "Hello, Alice! The time is " ]] || error "Unexpected response from echo: $message"

message="$(ftl call echo2.echo '{"name": "Alice"}' | jq -r .message)"
[[ "$message" =~ "Hello, Alice!" ]] || error "Unexpected response from echo2: $message"
info "Success!"
