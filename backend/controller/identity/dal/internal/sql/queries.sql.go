// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sql

import (
	"context"

	"github.com/alecthomas/types/optional"
)

const createOnlyIdentityKey = `-- name: CreateOnlyIdentityKey :exec
INSERT INTO identity_keys (id, key)
VALUES (1, $1)
`

func (q *Queries) CreateOnlyIdentityKey(ctx context.Context, key []byte) error {
	_, err := q.db.ExecContext(ctx, createOnlyIdentityKey, key)
	return err
}

const getOnlyIdentityKey = `-- name: GetOnlyIdentityKey :one
SELECT key, verify_signature
FROM identity_keys
WHERE id = 1
`

type GetOnlyIdentityKeyRow struct {
	Key             []byte
	VerifySignature optional.Option[string]
}

func (q *Queries) GetOnlyIdentityKey(ctx context.Context) (GetOnlyIdentityKeyRow, error) {
	row := q.db.QueryRowContext(ctx, getOnlyIdentityKey)
	var i GetOnlyIdentityKeyRow
	err := row.Scan(&i.Key, &i.VerifySignature)
	return i, err
}

const updateIdentityVerification = `-- name: UpdateIdentityVerification :exec
UPDATE identity_keys
SET verify_signature = $1
WHERE id = 1
`

func (q *Queries) UpdateIdentityVerification(ctx context.Context, verifySignature optional.Option[string]) error {
	_, err := q.db.ExecContext(ctx, updateIdentityVerification, verifySignature)
	return err
}
