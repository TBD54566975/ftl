// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sql

import (
	"context"

	"github.com/TBD54566975/ftl/backend/controller/encryption/api"
)

const createOnlyIdentityKey = `-- name: CreateOnlyIdentityKey :exec
INSERT INTO identity_keys (private, public, verify_signature)
VALUES ($1, $2, $3)
`

func (q *Queries) CreateOnlyIdentityKey(ctx context.Context, private api.EncryptedIdentityColumn, public []byte, verifySignature []byte) error {
	_, err := q.db.ExecContext(ctx, createOnlyIdentityKey, private, public, verifySignature)
	return err
}

const getIdentityKeys = `-- name: GetIdentityKeys :many
SELECT private, public, verify_signature
FROM identity_keys
LIMIT 2
`

type GetIdentityKeysRow struct {
	Private         api.EncryptedIdentityColumn
	Public          []byte
	VerifySignature []byte
}

func (q *Queries) GetIdentityKeys(ctx context.Context) ([]GetIdentityKeysRow, error) {
	rows, err := q.db.QueryContext(ctx, getIdentityKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIdentityKeysRow
	for rows.Next() {
		var i GetIdentityKeysRow
		if err := rows.Scan(&i.Private, &i.Public, &i.VerifySignature); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
