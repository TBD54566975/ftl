// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package sql

import (
	"context"
	"time"

	"github.com/TBD54566975/ftl/backend/controller/leases"
	"github.com/google/uuid"
)

const expireLeases = `-- name: ExpireLeases :one
WITH expired AS (
    DELETE FROM leases
    WHERE expires_at < NOW() AT TIME ZONE 'utc'
    RETURNING 1
)
SELECT COUNT(*)
FROM expired
`

func (q *Queries) ExpireLeases(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, expireLeases)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLeaseInfo = `-- name: GetLeaseInfo :one
SELECT expires_at, metadata FROM leases WHERE key = $1::lease_key
`

type GetLeaseInfoRow struct {
	ExpiresAt time.Time
	Metadata  []byte
}

func (q *Queries) GetLeaseInfo(ctx context.Context, key leases.Key) (GetLeaseInfoRow, error) {
	row := q.db.QueryRow(ctx, getLeaseInfo, key)
	var i GetLeaseInfoRow
	err := row.Scan(&i.ExpiresAt, &i.Metadata)
	return i, err
}

const newLease = `-- name: NewLease :one
INSERT INTO leases (
  idempotency_key,
  key,
  expires_at,
  metadata
)
VALUES (
  gen_random_uuid(),
  $1::lease_key,
  (NOW() AT TIME ZONE 'utc') + $2::interval,
  $3::JSONB
)
RETURNING idempotency_key
`

func (q *Queries) NewLease(ctx context.Context, key leases.Key, ttl time.Duration, metadata []byte) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, newLease, key, ttl, metadata)
	var idempotency_key uuid.UUID
	err := row.Scan(&idempotency_key)
	return idempotency_key, err
}

const releaseLease = `-- name: ReleaseLease :one
DELETE FROM leases
WHERE idempotency_key = $1 AND key = $2::lease_key
RETURNING true
`

func (q *Queries) ReleaseLease(ctx context.Context, idempotencyKey uuid.UUID, key leases.Key) (bool, error) {
	row := q.db.QueryRow(ctx, releaseLease, idempotencyKey, key)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const renewLease = `-- name: RenewLease :one
UPDATE leases
SET expires_at = (NOW() AT TIME ZONE 'utc') + $1::interval
WHERE idempotency_key = $2 AND key = $3::lease_key
RETURNING true
`

func (q *Queries) RenewLease(ctx context.Context, ttl time.Duration, idempotencyKey uuid.UUID, key leases.Key) (bool, error) {
	row := q.db.QueryRow(ctx, renewLease, ttl, idempotencyKey, key)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
