// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sql

import (
	"context"

	"github.com/TBD54566975/ftl/backend/controller/encryption/api"
)

const createOnlyEncryptionKey = `-- name: CreateOnlyEncryptionKey :exec
INSERT INTO encryption_keys (id, key)
VALUES (1, $1)
`

func (q *Queries) CreateOnlyEncryptionKey(ctx context.Context, key []byte) error {
	_, err := q.db.ExecContext(ctx, createOnlyEncryptionKey, key)
	return err
}

const getOnlyEncryptionKey = `-- name: GetOnlyEncryptionKey :one
SELECT key, verify_timeline, verify_async
FROM encryption_keys
WHERE id = 1
`

type GetOnlyEncryptionKeyRow struct {
	Key            []byte
	VerifyTimeline api.OptionalEncryptedTimelineColumn
	VerifyAsync    api.OptionalEncryptedAsyncColumn
}

func (q *Queries) GetOnlyEncryptionKey(ctx context.Context) (GetOnlyEncryptionKeyRow, error) {
	row := q.db.QueryRowContext(ctx, getOnlyEncryptionKey)
	var i GetOnlyEncryptionKeyRow
	err := row.Scan(&i.Key, &i.VerifyTimeline, &i.VerifyAsync)
	return i, err
}

const updateEncryptionVerification = `-- name: UpdateEncryptionVerification :exec
UPDATE encryption_keys
SET verify_timeline = $1,
    verify_async = $2
WHERE id = 1
`

func (q *Queries) UpdateEncryptionVerification(ctx context.Context, verifyTimeline api.OptionalEncryptedTimelineColumn, verifyAsync api.OptionalEncryptedAsyncColumn) error {
	_, err := q.db.ExecContext(ctx, updateEncryptionVerification, verifyTimeline, verifyAsync)
	return err
}
