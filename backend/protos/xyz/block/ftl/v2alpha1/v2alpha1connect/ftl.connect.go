// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v2alpha1/ftl.proto

package v2alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1"
	v2alpha1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v2alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SchemaServiceName is the fully-qualified name of the SchemaService service.
	SchemaServiceName = "xyz.block.ftl.v2alpha1.SchemaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchemaServicePingProcedure is the fully-qualified name of the SchemaService's Ping RPC.
	SchemaServicePingProcedure = "/xyz.block.ftl.v2alpha1.SchemaService/Ping"
	// SchemaServiceGetSchemaProcedure is the fully-qualified name of the SchemaService's GetSchema RPC.
	SchemaServiceGetSchemaProcedure = "/xyz.block.ftl.v2alpha1.SchemaService/GetSchema"
	// SchemaServicePullSchemaProcedure is the fully-qualified name of the SchemaService's PullSchema
	// RPC.
	SchemaServicePullSchemaProcedure = "/xyz.block.ftl.v2alpha1.SchemaService/PullSchema"
	// SchemaServiceUpsertModuleProcedure is the fully-qualified name of the SchemaService's
	// UpsertModule RPC.
	SchemaServiceUpsertModuleProcedure = "/xyz.block.ftl.v2alpha1.SchemaService/UpsertModule"
	// SchemaServiceDeleteModuleProcedure is the fully-qualified name of the SchemaService's
	// DeleteModule RPC.
	SchemaServiceDeleteModuleProcedure = "/xyz.block.ftl.v2alpha1.SchemaService/DeleteModule"
)

// SchemaServiceClient is a client for the xyz.block.ftl.v2alpha1.SchemaService service.
type SchemaServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// GetSchema returns the current full schema for the cluster.
	GetSchema(context.Context, *connect.Request[v2alpha1.GetSchemaRequest]) (*connect.Response[v2alpha1.GetSchemaResponse], error)
	// PullSchema returns a stream of module schema changes for the cluster.
	PullSchema(context.Context, *connect.Request[v2alpha1.PullSchemaRequest]) (*connect.ServerStreamForClient[v2alpha1.PullSchemaResponse], error)
	// UpsertModule creates or replaces a module in the schema.
	UpsertModule(context.Context, *connect.Request[v2alpha1.UpsertModuleRequest]) (*connect.Response[v2alpha1.UpsertModuleResponse], error)
	// DeleteModule deletes a module from the schema.
	DeleteModule(context.Context, *connect.Request[v2alpha1.DeleteModuleRequest]) (*connect.Response[v2alpha1.DeleteModuleResponse], error)
}

// NewSchemaServiceClient constructs a client for the xyz.block.ftl.v2alpha1.SchemaService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchemaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SchemaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &schemaServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+SchemaServicePingProcedure,
			opts...,
		),
		getSchema: connect.NewClient[v2alpha1.GetSchemaRequest, v2alpha1.GetSchemaResponse](
			httpClient,
			baseURL+SchemaServiceGetSchemaProcedure,
			opts...,
		),
		pullSchema: connect.NewClient[v2alpha1.PullSchemaRequest, v2alpha1.PullSchemaResponse](
			httpClient,
			baseURL+SchemaServicePullSchemaProcedure,
			opts...,
		),
		upsertModule: connect.NewClient[v2alpha1.UpsertModuleRequest, v2alpha1.UpsertModuleResponse](
			httpClient,
			baseURL+SchemaServiceUpsertModuleProcedure,
			opts...,
		),
		deleteModule: connect.NewClient[v2alpha1.DeleteModuleRequest, v2alpha1.DeleteModuleResponse](
			httpClient,
			baseURL+SchemaServiceDeleteModuleProcedure,
			opts...,
		),
	}
}

// schemaServiceClient implements SchemaServiceClient.
type schemaServiceClient struct {
	ping         *connect.Client[v1.PingRequest, v1.PingResponse]
	getSchema    *connect.Client[v2alpha1.GetSchemaRequest, v2alpha1.GetSchemaResponse]
	pullSchema   *connect.Client[v2alpha1.PullSchemaRequest, v2alpha1.PullSchemaResponse]
	upsertModule *connect.Client[v2alpha1.UpsertModuleRequest, v2alpha1.UpsertModuleResponse]
	deleteModule *connect.Client[v2alpha1.DeleteModuleRequest, v2alpha1.DeleteModuleResponse]
}

// Ping calls xyz.block.ftl.v2alpha1.SchemaService.Ping.
func (c *schemaServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetSchema calls xyz.block.ftl.v2alpha1.SchemaService.GetSchema.
func (c *schemaServiceClient) GetSchema(ctx context.Context, req *connect.Request[v2alpha1.GetSchemaRequest]) (*connect.Response[v2alpha1.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// PullSchema calls xyz.block.ftl.v2alpha1.SchemaService.PullSchema.
func (c *schemaServiceClient) PullSchema(ctx context.Context, req *connect.Request[v2alpha1.PullSchemaRequest]) (*connect.ServerStreamForClient[v2alpha1.PullSchemaResponse], error) {
	return c.pullSchema.CallServerStream(ctx, req)
}

// UpsertModule calls xyz.block.ftl.v2alpha1.SchemaService.UpsertModule.
func (c *schemaServiceClient) UpsertModule(ctx context.Context, req *connect.Request[v2alpha1.UpsertModuleRequest]) (*connect.Response[v2alpha1.UpsertModuleResponse], error) {
	return c.upsertModule.CallUnary(ctx, req)
}

// DeleteModule calls xyz.block.ftl.v2alpha1.SchemaService.DeleteModule.
func (c *schemaServiceClient) DeleteModule(ctx context.Context, req *connect.Request[v2alpha1.DeleteModuleRequest]) (*connect.Response[v2alpha1.DeleteModuleResponse], error) {
	return c.deleteModule.CallUnary(ctx, req)
}

// SchemaServiceHandler is an implementation of the xyz.block.ftl.v2alpha1.SchemaService service.
type SchemaServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// GetSchema returns the current full schema for the cluster.
	GetSchema(context.Context, *connect.Request[v2alpha1.GetSchemaRequest]) (*connect.Response[v2alpha1.GetSchemaResponse], error)
	// PullSchema returns a stream of module schema changes for the cluster.
	PullSchema(context.Context, *connect.Request[v2alpha1.PullSchemaRequest], *connect.ServerStream[v2alpha1.PullSchemaResponse]) error
	// UpsertModule creates or replaces a module in the schema.
	UpsertModule(context.Context, *connect.Request[v2alpha1.UpsertModuleRequest]) (*connect.Response[v2alpha1.UpsertModuleResponse], error)
	// DeleteModule deletes a module from the schema.
	DeleteModule(context.Context, *connect.Request[v2alpha1.DeleteModuleRequest]) (*connect.Response[v2alpha1.DeleteModuleResponse], error)
}

// NewSchemaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchemaServiceHandler(svc SchemaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	schemaServicePingHandler := connect.NewUnaryHandler(
		SchemaServicePingProcedure,
		svc.Ping,
		opts...,
	)
	schemaServiceGetSchemaHandler := connect.NewUnaryHandler(
		SchemaServiceGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	)
	schemaServicePullSchemaHandler := connect.NewServerStreamHandler(
		SchemaServicePullSchemaProcedure,
		svc.PullSchema,
		opts...,
	)
	schemaServiceUpsertModuleHandler := connect.NewUnaryHandler(
		SchemaServiceUpsertModuleProcedure,
		svc.UpsertModule,
		opts...,
	)
	schemaServiceDeleteModuleHandler := connect.NewUnaryHandler(
		SchemaServiceDeleteModuleProcedure,
		svc.DeleteModule,
		opts...,
	)
	return "/xyz.block.ftl.v2alpha1.SchemaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SchemaServicePingProcedure:
			schemaServicePingHandler.ServeHTTP(w, r)
		case SchemaServiceGetSchemaProcedure:
			schemaServiceGetSchemaHandler.ServeHTTP(w, r)
		case SchemaServicePullSchemaProcedure:
			schemaServicePullSchemaHandler.ServeHTTP(w, r)
		case SchemaServiceUpsertModuleProcedure:
			schemaServiceUpsertModuleHandler.ServeHTTP(w, r)
		case SchemaServiceDeleteModuleProcedure:
			schemaServiceDeleteModuleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSchemaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSchemaServiceHandler struct{}

func (UnimplementedSchemaServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v2alpha1.SchemaService.Ping is not implemented"))
}

func (UnimplementedSchemaServiceHandler) GetSchema(context.Context, *connect.Request[v2alpha1.GetSchemaRequest]) (*connect.Response[v2alpha1.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v2alpha1.SchemaService.GetSchema is not implemented"))
}

func (UnimplementedSchemaServiceHandler) PullSchema(context.Context, *connect.Request[v2alpha1.PullSchemaRequest], *connect.ServerStream[v2alpha1.PullSchemaResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v2alpha1.SchemaService.PullSchema is not implemented"))
}

func (UnimplementedSchemaServiceHandler) UpsertModule(context.Context, *connect.Request[v2alpha1.UpsertModuleRequest]) (*connect.Response[v2alpha1.UpsertModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v2alpha1.SchemaService.UpsertModule is not implemented"))
}

func (UnimplementedSchemaServiceHandler) DeleteModule(context.Context, *connect.Request[v2alpha1.DeleteModuleRequest]) (*connect.Response[v2alpha1.DeleteModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v2alpha1.SchemaService.DeleteModule is not implemented"))
}
