syntax = "proto3";

package xyz.block.ftl.v2alpha1;

import "xyz/block/ftl/v1/ftl.proto";
import "xyz/block/ftl/v1/schema/schema.proto";

option go_package = "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v2alpha1";
option java_multiple_files = true;

// A Changeset represents an "atomic" change to the schema.
// message Changeset {
//   repeated v1.schema.Module modules = 1;
// }

message GetSchemaRequest {}
message GetSchemaResponse {
  // The current full schema for the cluster.
  v1.schema.Schema schema = 1;
  // The active changesets.
  // repeated Changeset changesets = 2;
}

message PullSchemaRequest {}
message PullSchemaResponse {
  // True if this schema change is a delete, false if it is an upsert.
  bool deleted = 1;
  // The schema being changed.
  v1.schema.Module schema = 2;
  // If true there are more schema changes immediately following this one as part of the initial batch.
  // If false this is the last schema change in the initial batch, but others may follow later.
  bool initial_batch = 3;
}

message UpsertModuleRequest {
  v1.schema.Module schema = 1;
}
message UpsertModuleResponse {
  string deployment_key = 1;
}

message DeleteDeploymentRequest {
  string deployment_key = 1;
}
message DeleteDeploymentResponse {}

message DeleteModuleRequest {
  string module_name = 1;
}
message DeleteModuleResponse {}

// SchemaService is the central source of truth for the FTL schema.
service SchemaService {
  rpc Ping(v1.PingRequest) returns (v1.PingResponse); // For now we need to use the v1 types to comply with the interface.
  // GetSchema returns the current full schema for the cluster.
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);
  // PullSchema returns a stream of module schema changes for the cluster.
  rpc PullSchema(PullSchemaRequest) returns (stream PullSchemaResponse);

  // UpsertModule creates or replaces a module in the schema.
  rpc UpsertModule(UpsertModuleRequest) returns (UpsertModuleResponse);
  // DeleteModule deletes a module from the schema.
  rpc DeleteModule(DeleteModuleRequest) returns (DeleteModuleResponse);
}
