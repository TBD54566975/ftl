// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/publisher/v1/publisher.proto

package publisherpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/publisher/v1"
	v1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// PublisherServiceName is the fully-qualified name of the PublisherService service.
	PublisherServiceName = "xyz.block.ftl.publisher.v1.PublisherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PublisherServicePingProcedure is the fully-qualified name of the PublisherService's Ping RPC.
	PublisherServicePingProcedure = "/xyz.block.ftl.publisher.v1.PublisherService/Ping"
	// PublisherServicePublishEventProcedure is the fully-qualified name of the PublisherService's
	// PublishEvent RPC.
	PublisherServicePublishEventProcedure = "/xyz.block.ftl.publisher.v1.PublisherService/PublishEvent"
)

// PublisherServiceClient is a client for the xyz.block.ftl.publisher.v1.PublisherService service.
type PublisherServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Publish a message to a topic.
	PublishEvent(context.Context, *connect.Request[v11.PublishEventRequest]) (*connect.Response[v11.PublishEventResponse], error)
}

// NewPublisherServiceClient constructs a client for the xyz.block.ftl.publisher.v1.PublisherService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublisherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PublisherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &publisherServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+PublisherServicePingProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		publishEvent: connect.NewClient[v11.PublishEventRequest, v11.PublishEventResponse](
			httpClient,
			baseURL+PublisherServicePublishEventProcedure,
			opts...,
		),
	}
}

// publisherServiceClient implements PublisherServiceClient.
type publisherServiceClient struct {
	ping         *connect.Client[v1.PingRequest, v1.PingResponse]
	publishEvent *connect.Client[v11.PublishEventRequest, v11.PublishEventResponse]
}

// Ping calls xyz.block.ftl.publisher.v1.PublisherService.Ping.
func (c *publisherServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// PublishEvent calls xyz.block.ftl.publisher.v1.PublisherService.PublishEvent.
func (c *publisherServiceClient) PublishEvent(ctx context.Context, req *connect.Request[v11.PublishEventRequest]) (*connect.Response[v11.PublishEventResponse], error) {
	return c.publishEvent.CallUnary(ctx, req)
}

// PublisherServiceHandler is an implementation of the xyz.block.ftl.publisher.v1.PublisherService
// service.
type PublisherServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Publish a message to a topic.
	PublishEvent(context.Context, *connect.Request[v11.PublishEventRequest]) (*connect.Response[v11.PublishEventResponse], error)
}

// NewPublisherServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublisherServiceHandler(svc PublisherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	publisherServicePingHandler := connect.NewUnaryHandler(
		PublisherServicePingProcedure,
		svc.Ping,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	publisherServicePublishEventHandler := connect.NewUnaryHandler(
		PublisherServicePublishEventProcedure,
		svc.PublishEvent,
		opts...,
	)
	return "/xyz.block.ftl.publisher.v1.PublisherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PublisherServicePingProcedure:
			publisherServicePingHandler.ServeHTTP(w, r)
		case PublisherServicePublishEventProcedure:
			publisherServicePublishEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPublisherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPublisherServiceHandler struct{}

func (UnimplementedPublisherServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.publisher.v1.PublisherService.Ping is not implemented"))
}

func (UnimplementedPublisherServiceHandler) PublishEvent(context.Context, *connect.Request[v11.PublishEventRequest]) (*connect.Response[v11.PublishEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.publisher.v1.PublisherService.PublishEvent is not implemented"))
}
