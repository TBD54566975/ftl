syntax = "proto3";

package xyz.block.ftl.provisioner.v1beta1;

import "xyz/block/ftl/schema/v1/schema.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/block/ftl/backend/protos/xyz/block/ftl/provisioner/v1beta1;provisionerpb";
option java_multiple_files = true;

message ProvisionRequest {
  string ftl_cluster_id = 1;
  xyz.block.ftl.schema.v1.Module desired_module = 2;
  xyz.block.ftl.schema.v1.Module previous_module = 3;
  repeated string kinds = 4;
}

message ProvisionResponse {
  enum ProvisionResponseStatus {
    PROVISION_RESPONSE_STATUS_UNSPECIFIED = 0;
    PROVISION_RESPONSE_STATUS_SUBMITTED = 1;
  }

  string provisioning_token = 1;
  ProvisionResponseStatus status = 2;
}

message StatusRequest {
  string provisioning_token = 1;
  // The outputs of this module are updated if the the status is a success
  xyz.block.ftl.schema.v1.Module desired_module = 2;
}

message ProvisioningEvent {
  oneof value {
    xyz.block.ftl.schema.v1.ModuleRuntimeEvent module_runtime_event = 1;
    xyz.block.ftl.schema.v1.DatabaseRuntimeEvent database_runtime_event = 2;
    xyz.block.ftl.schema.v1.TopicRuntimeEvent topic_runtime_event = 3;
    xyz.block.ftl.schema.v1.VerbRuntimeEvent verb_runtime_event = 4;
  }
}

message StatusResponse {
  message ProvisioningRunning {}

  message ProvisioningFailed {
    string error_message = 1;
  }

  message ProvisioningSuccess {
    repeated ProvisioningEvent events = 1;
  }

  oneof status {
    ProvisioningRunning running = 1;
    ProvisioningSuccess success = 2;
  }
}

service ProvisionerPluginService {
  rpc Ping(xyz.block.ftl.v1.PingRequest) returns (xyz.block.ftl.v1.PingResponse);

  rpc Provision(ProvisionRequest) returns (ProvisionResponse);
  rpc Status(StatusRequest) returns (StatusResponse);
}
