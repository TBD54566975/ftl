// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: xyz/block/ftl/language/v1/language.proto

package languagepb

import (
	v1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/schema/v1"
	v11 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error_ErrorLevel int32

const (
	Error_ERROR_LEVEL_UNSPECIFIED Error_ErrorLevel = 0
	Error_ERROR_LEVEL_INFO        Error_ErrorLevel = 1
	Error_ERROR_LEVEL_WARN        Error_ErrorLevel = 2
	Error_ERROR_LEVEL_ERROR       Error_ErrorLevel = 3
)

// Enum value maps for Error_ErrorLevel.
var (
	Error_ErrorLevel_name = map[int32]string{
		0: "ERROR_LEVEL_UNSPECIFIED",
		1: "ERROR_LEVEL_INFO",
		2: "ERROR_LEVEL_WARN",
		3: "ERROR_LEVEL_ERROR",
	}
	Error_ErrorLevel_value = map[string]int32{
		"ERROR_LEVEL_UNSPECIFIED": 0,
		"ERROR_LEVEL_INFO":        1,
		"ERROR_LEVEL_WARN":        2,
		"ERROR_LEVEL_ERROR":       3,
	}
)

func (x Error_ErrorLevel) Enum() *Error_ErrorLevel {
	p := new(Error_ErrorLevel)
	*p = x
	return p
}

func (x Error_ErrorLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_ErrorLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_xyz_block_ftl_language_v1_language_proto_enumTypes[0].Descriptor()
}

func (Error_ErrorLevel) Type() protoreflect.EnumType {
	return &file_xyz_block_ftl_language_v1_language_proto_enumTypes[0]
}

func (x Error_ErrorLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_ErrorLevel.Descriptor instead.
func (Error_ErrorLevel) EnumDescriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{13, 0}
}

type Error_ErrorType int32

const (
	Error_ERROR_TYPE_UNSPECIFIED Error_ErrorType = 0
	Error_ERROR_TYPE_FTL         Error_ErrorType = 1
	// Compiler errors are errors that are from the compiler. This is useful to avoid duplicate errors
	// being shown to the user when combining errors from multiple sources (eg: an IDE showing compiler
	// errors and FTL errors via LSP).
	Error_ERROR_TYPE_COMPILER Error_ErrorType = 2
)

// Enum value maps for Error_ErrorType.
var (
	Error_ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_UNSPECIFIED",
		1: "ERROR_TYPE_FTL",
		2: "ERROR_TYPE_COMPILER",
	}
	Error_ErrorType_value = map[string]int32{
		"ERROR_TYPE_UNSPECIFIED": 0,
		"ERROR_TYPE_FTL":         1,
		"ERROR_TYPE_COMPILER":    2,
	}
)

func (x Error_ErrorType) Enum() *Error_ErrorType {
	p := new(Error_ErrorType)
	*p = x
	return p
}

func (x Error_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_xyz_block_ftl_language_v1_language_proto_enumTypes[1].Descriptor()
}

func (Error_ErrorType) Type() protoreflect.EnumType {
	return &file_xyz_block_ftl_language_v1_language_proto_enumTypes[1]
}

func (x Error_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_ErrorType.Descriptor instead.
func (Error_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{13, 1}
}

// ModuleConfig contains the configuration for a module, found in the module's ftl.toml file.
type ModuleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the module
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Absolute path to the module's directory
	Dir string `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty"`
	// The language of the module
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	// Absolute path to the directory containing all of this module's build artifacts for deployments
	DeployDir string `protobuf:"bytes,4,opt,name=deploy_dir,json=deployDir,proto3" json:"deploy_dir,omitempty"`
	// Build is the command to build the module.
	Build *string `protobuf:"bytes,5,opt,name=build,proto3,oneof" json:"build,omitempty"`
	// DevModeBuild is the command to build the module in dev mode.
	DevModeBuild *string `protobuf:"bytes,6,opt,name=dev_mode_build,json=devModeBuild,proto3,oneof" json:"dev_mode_build,omitempty"`
	// Build lock path to prevent concurrent builds
	BuildLock string `protobuf:"bytes,7,opt,name=build_lock,json=buildLock,proto3" json:"build_lock,omitempty"`
	// The directory to generate protobuf schema files into. These can be picked up by language specific build tools
	GeneratedSchemaDir *string `protobuf:"bytes,8,opt,name=generated_schema_dir,json=generatedSchemaDir,proto3,oneof" json:"generated_schema_dir,omitempty"`
	// Patterns to watch for file changes
	Watch []string `protobuf:"bytes,9,rep,name=watch,proto3" json:"watch,omitempty"`
	// LanguageConfig contains any metadata specific to a specific language.
	// These are stored in the ftl.toml file under the same key as the language (eg: "go", "java")
	LanguageConfig *structpb.Struct `protobuf:"bytes,10,opt,name=language_config,json=languageConfig,proto3" json:"language_config,omitempty"`
	// The directory containing the SQL migration files
	SqlMigrationDir string `protobuf:"bytes,11,opt,name=sql_migration_dir,json=sqlMigrationDir,proto3" json:"sql_migration_dir,omitempty"`
}

func (x *ModuleConfig) Reset() {
	*x = ModuleConfig{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleConfig) ProtoMessage() {}

func (x *ModuleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleConfig.ProtoReflect.Descriptor instead.
func (*ModuleConfig) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{0}
}

func (x *ModuleConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleConfig) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *ModuleConfig) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ModuleConfig) GetDeployDir() string {
	if x != nil {
		return x.DeployDir
	}
	return ""
}

func (x *ModuleConfig) GetBuild() string {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return ""
}

func (x *ModuleConfig) GetDevModeBuild() string {
	if x != nil && x.DevModeBuild != nil {
		return *x.DevModeBuild
	}
	return ""
}

func (x *ModuleConfig) GetBuildLock() string {
	if x != nil {
		return x.BuildLock
	}
	return ""
}

func (x *ModuleConfig) GetGeneratedSchemaDir() string {
	if x != nil && x.GeneratedSchemaDir != nil {
		return *x.GeneratedSchemaDir
	}
	return ""
}

func (x *ModuleConfig) GetWatch() []string {
	if x != nil {
		return x.Watch
	}
	return nil
}

func (x *ModuleConfig) GetLanguageConfig() *structpb.Struct {
	if x != nil {
		return x.LanguageConfig
	}
	return nil
}

func (x *ModuleConfig) GetSqlMigrationDir() string {
	if x != nil {
		return x.SqlMigrationDir
	}
	return ""
}

// ProjectConfig contains the configuration for a project, found in the ftl-project.toml file.
type ProjectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir    string `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NoGit  bool   `protobuf:"varint,3,opt,name=no_git,json=noGit,proto3" json:"no_git,omitempty"`
	Hermit bool   `protobuf:"varint,4,opt,name=hermit,proto3" json:"hermit,omitempty"`
}

func (x *ProjectConfig) Reset() {
	*x = ProjectConfig{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectConfig) ProtoMessage() {}

func (x *ProjectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectConfig.ProtoReflect.Descriptor instead.
func (*ProjectConfig) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectConfig) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *ProjectConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectConfig) GetNoGit() bool {
	if x != nil {
		return x.NoGit
	}
	return false
}

func (x *ProjectConfig) GetHermit() bool {
	if x != nil {
		return x.Hermit
	}
	return false
}

type GetCreateModuleFlagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCreateModuleFlagsRequest) Reset() {
	*x = GetCreateModuleFlagsRequest{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCreateModuleFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreateModuleFlagsRequest) ProtoMessage() {}

func (x *GetCreateModuleFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreateModuleFlagsRequest.ProtoReflect.Descriptor instead.
func (*GetCreateModuleFlagsRequest) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{2}
}

func (x *GetCreateModuleFlagsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCreateModuleFlagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags []*GetCreateModuleFlagsResponse_Flag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (x *GetCreateModuleFlagsResponse) Reset() {
	*x = GetCreateModuleFlagsResponse{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCreateModuleFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreateModuleFlagsResponse) ProtoMessage() {}

func (x *GetCreateModuleFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreateModuleFlagsResponse.ProtoReflect.Descriptor instead.
func (*GetCreateModuleFlagsResponse) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{3}
}

func (x *GetCreateModuleFlagsResponse) GetFlags() []*GetCreateModuleFlagsResponse_Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Request to create a new module.
type CreateModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The root directory for the module, which does not yet exist.
	// The plugin should create the directory.
	Dir string `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty"`
	// The project configuration
	ProjectConfig *ProjectConfig `protobuf:"bytes,3,opt,name=project_config,json=projectConfig,proto3" json:"project_config,omitempty"`
	// Flags contains any values set for those configured in the GetCreateModuleFlags call
	Flags *structpb.Struct `protobuf:"bytes,4,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *CreateModuleRequest) Reset() {
	*x = CreateModuleRequest{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleRequest) ProtoMessage() {}

func (x *CreateModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleRequest.ProtoReflect.Descriptor instead.
func (*CreateModuleRequest) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{4}
}

func (x *CreateModuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateModuleRequest) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *CreateModuleRequest) GetProjectConfig() *ProjectConfig {
	if x != nil {
		return x.ProjectConfig
	}
	return nil
}

func (x *CreateModuleRequest) GetFlags() *structpb.Struct {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Response to a create module request.
type CreateModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateModuleResponse) Reset() {
	*x = CreateModuleResponse{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleResponse) ProtoMessage() {}

func (x *CreateModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleResponse.ProtoReflect.Descriptor instead.
func (*CreateModuleResponse) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{5}
}

type ModuleConfigDefaultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir string `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
}

func (x *ModuleConfigDefaultsRequest) Reset() {
	*x = ModuleConfigDefaultsRequest{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleConfigDefaultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleConfigDefaultsRequest) ProtoMessage() {}

func (x *ModuleConfigDefaultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleConfigDefaultsRequest.ProtoReflect.Descriptor instead.
func (*ModuleConfigDefaultsRequest) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{6}
}

func (x *ModuleConfigDefaultsRequest) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

// ModuleConfigDefaultsResponse provides defaults for ModuleConfig.
//
// The result may be cached by FTL, so defaulting logic should not be changing due to normal module changes.
// For example, it is valid to return defaults based on which build tool is configured within the module directory,
// as that is not expected to change during normal operation.
// It is not recommended to read the module's toml file to determine defaults, as when the toml file is updated,
// the module defaults will not be recalculated.
type ModuleConfigDefaultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default relative path to the directory containing all build artifacts for deployments
	DeployDir string `protobuf:"bytes,1,opt,name=deploy_dir,json=deployDir,proto3" json:"deploy_dir,omitempty"`
	// Default build command
	Build *string `protobuf:"bytes,2,opt,name=build,proto3,oneof" json:"build,omitempty"`
	// Dev mode build command, if different from the regular build command
	DevModeBuild *string `protobuf:"bytes,3,opt,name=dev_mode_build,json=devModeBuild,proto3,oneof" json:"dev_mode_build,omitempty"`
	// Build lock path to prevent concurrent builds
	BuildLock *string `protobuf:"bytes,4,opt,name=build_lock,json=buildLock,proto3,oneof" json:"build_lock,omitempty"`
	// Default relative path to the directory containing generated schema files
	GeneratedSchemaDir *string `protobuf:"bytes,5,opt,name=generated_schema_dir,json=generatedSchemaDir,proto3,oneof" json:"generated_schema_dir,omitempty"`
	// Default patterns to watch for file changes, relative to the module directory
	Watch []string `protobuf:"bytes,6,rep,name=watch,proto3" json:"watch,omitempty"`
	// Default language specific configuration.
	// These defaults are filled in by looking at each root key only. If the key is not present, the default is used.
	LanguageConfig *structpb.Struct `protobuf:"bytes,7,opt,name=language_config,json=languageConfig,proto3" json:"language_config,omitempty"`
	// Default directory containing the SQL migration files
	SqlMigrationDir string `protobuf:"bytes,8,opt,name=sql_migration_dir,json=sqlMigrationDir,proto3" json:"sql_migration_dir,omitempty"`
}

func (x *ModuleConfigDefaultsResponse) Reset() {
	*x = ModuleConfigDefaultsResponse{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleConfigDefaultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleConfigDefaultsResponse) ProtoMessage() {}

func (x *ModuleConfigDefaultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleConfigDefaultsResponse.ProtoReflect.Descriptor instead.
func (*ModuleConfigDefaultsResponse) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{7}
}

func (x *ModuleConfigDefaultsResponse) GetDeployDir() string {
	if x != nil {
		return x.DeployDir
	}
	return ""
}

func (x *ModuleConfigDefaultsResponse) GetBuild() string {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return ""
}

func (x *ModuleConfigDefaultsResponse) GetDevModeBuild() string {
	if x != nil && x.DevModeBuild != nil {
		return *x.DevModeBuild
	}
	return ""
}

func (x *ModuleConfigDefaultsResponse) GetBuildLock() string {
	if x != nil && x.BuildLock != nil {
		return *x.BuildLock
	}
	return ""
}

func (x *ModuleConfigDefaultsResponse) GetGeneratedSchemaDir() string {
	if x != nil && x.GeneratedSchemaDir != nil {
		return *x.GeneratedSchemaDir
	}
	return ""
}

func (x *ModuleConfigDefaultsResponse) GetWatch() []string {
	if x != nil {
		return x.Watch
	}
	return nil
}

func (x *ModuleConfigDefaultsResponse) GetLanguageConfig() *structpb.Struct {
	if x != nil {
		return x.LanguageConfig
	}
	return nil
}

func (x *ModuleConfigDefaultsResponse) GetSqlMigrationDir() string {
	if x != nil {
		return x.SqlMigrationDir
	}
	return ""
}

type GetDependenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleConfig *ModuleConfig `protobuf:"bytes,1,opt,name=module_config,json=moduleConfig,proto3" json:"module_config,omitempty"`
}

func (x *GetDependenciesRequest) Reset() {
	*x = GetDependenciesRequest{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDependenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDependenciesRequest) ProtoMessage() {}

func (x *GetDependenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDependenciesRequest.ProtoReflect.Descriptor instead.
func (*GetDependenciesRequest) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{8}
}

func (x *GetDependenciesRequest) GetModuleConfig() *ModuleConfig {
	if x != nil {
		return x.ModuleConfig
	}
	return nil
}

type GetDependenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *GetDependenciesResponse) Reset() {
	*x = GetDependenciesResponse{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDependenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDependenciesResponse) ProtoMessage() {}

func (x *GetDependenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDependenciesResponse.ProtoReflect.Descriptor instead.
func (*GetDependenciesResponse) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{9}
}

func (x *GetDependenciesResponse) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

// BuildContext contains contextual information needed to build.
//
// Plugins must include the build context's id when a build succeeds or fails.
// For automatic rebuilds, plugins must use the most recent build context they have received.
type BuildContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The configuration for the module
	ModuleConfig *ModuleConfig `protobuf:"bytes,2,opt,name=module_config,json=moduleConfig,proto3" json:"module_config,omitempty"`
	// The FTL schema including all dependencies
	Schema *v1.Schema `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// The dependencies for the module
	Dependencies []string `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// Build environment provides environment variables to be set for the build command
	BuildEnv []string `protobuf:"bytes,5,rep,name=build_env,json=buildEnv,proto3" json:"build_env,omitempty"`
}

func (x *BuildContext) Reset() {
	*x = BuildContext{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildContext) ProtoMessage() {}

func (x *BuildContext) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildContext.ProtoReflect.Descriptor instead.
func (*BuildContext) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{10}
}

func (x *BuildContext) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BuildContext) GetModuleConfig() *ModuleConfig {
	if x != nil {
		return x.ModuleConfig
	}
	return nil
}

func (x *BuildContext) GetSchema() *v1.Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *BuildContext) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *BuildContext) GetBuildEnv() []string {
	if x != nil {
		return x.BuildEnv
	}
	return nil
}

type BuildContextUpdatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildContext *BuildContext `protobuf:"bytes,1,opt,name=build_context,json=buildContext,proto3" json:"build_context,omitempty"`
}

func (x *BuildContextUpdatedRequest) Reset() {
	*x = BuildContextUpdatedRequest{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildContextUpdatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildContextUpdatedRequest) ProtoMessage() {}

func (x *BuildContextUpdatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildContextUpdatedRequest.ProtoReflect.Descriptor instead.
func (*BuildContextUpdatedRequest) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{11}
}

func (x *BuildContextUpdatedRequest) GetBuildContext() *BuildContext {
	if x != nil {
		return x.BuildContext
	}
	return nil
}

type BuildContextUpdatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildContextUpdatedResponse) Reset() {
	*x = BuildContextUpdatedResponse{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildContextUpdatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildContextUpdatedResponse) ProtoMessage() {}

func (x *BuildContextUpdatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildContextUpdatedResponse.ProtoReflect.Descriptor instead.
func (*BuildContextUpdatedResponse) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{12}
}

// Error contains information about an error that occurred during a build.
// Errors do not always cause a build failure. Use lesser levels to help guide the user.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg   string           `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Level Error_ErrorLevel `protobuf:"varint,4,opt,name=level,proto3,enum=xyz.block.ftl.language.v1.Error_ErrorLevel" json:"level,omitempty"`
	Pos   *Position        `protobuf:"bytes,5,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Type  Error_ErrorType  `protobuf:"varint,6,opt,name=type,proto3,enum=xyz.block.ftl.language.v1.Error_ErrorType" json:"type,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{13}
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Error) GetLevel() Error_ErrorLevel {
	if x != nil {
		return x.Level
	}
	return Error_ERROR_LEVEL_UNSPECIFIED
}

func (x *Error) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Error) GetType() Error_ErrorType {
	if x != nil {
		return x.Type
	}
	return Error_ERROR_TYPE_UNSPECIFIED
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename    string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Line        int64  `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	StartColumn int64  `protobuf:"varint,3,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndColumn   int64  `protobuf:"varint,4,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{14}
}

func (x *Position) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Position) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetStartColumn() int64 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *Position) GetEndColumn() int64 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type ErrorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ErrorList) Reset() {
	*x = ErrorList{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorList) ProtoMessage() {}

func (x *ErrorList) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorList.ProtoReflect.Descriptor instead.
func (*ErrorList) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{15}
}

func (x *ErrorList) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Request to build a module.
type BuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root path for the FTL project
	ProjectRoot string `protobuf:"bytes,1,opt,name=project_root,json=projectRoot,proto3" json:"project_root,omitempty"`
	// The path to the directory containing all module stubs. Each module stub is in a subdirectory.
	StubsRoot string `protobuf:"bytes,2,opt,name=stubs_root,json=stubsRoot,proto3" json:"stubs_root,omitempty"`
	// Indicates whether to watch for file changes and automatically rebuild
	RebuildAutomatically bool          `protobuf:"varint,3,opt,name=rebuild_automatically,json=rebuildAutomatically,proto3" json:"rebuild_automatically,omitempty"`
	BuildContext         *BuildContext `protobuf:"bytes,4,opt,name=build_context,json=buildContext,proto3" json:"build_context,omitempty"`
}

func (x *BuildRequest) Reset() {
	*x = BuildRequest{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRequest) ProtoMessage() {}

func (x *BuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRequest.ProtoReflect.Descriptor instead.
func (*BuildRequest) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{16}
}

func (x *BuildRequest) GetProjectRoot() string {
	if x != nil {
		return x.ProjectRoot
	}
	return ""
}

func (x *BuildRequest) GetStubsRoot() string {
	if x != nil {
		return x.StubsRoot
	}
	return ""
}

func (x *BuildRequest) GetRebuildAutomatically() bool {
	if x != nil {
		return x.RebuildAutomatically
	}
	return false
}

func (x *BuildRequest) GetBuildContext() *BuildContext {
	if x != nil {
		return x.BuildContext
	}
	return nil
}

// AutoRebuildStarted should be sent when the plugin decides to start rebuilding automatically.
//
// It is not required to send this event, though it helps inform the user that their changes are not yet built.
// FTL may ignore this event if it does not match FTL's current build context and state.
// If the plugin decides to cancel the build because another build started, no failure or cancellation event needs
// to be sent.
type AutoRebuildStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextId string `protobuf:"bytes,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
}

func (x *AutoRebuildStarted) Reset() {
	*x = AutoRebuildStarted{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoRebuildStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRebuildStarted) ProtoMessage() {}

func (x *AutoRebuildStarted) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRebuildStarted.ProtoReflect.Descriptor instead.
func (*AutoRebuildStarted) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{17}
}

func (x *AutoRebuildStarted) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

// BuildSuccess should be sent when a build succeeds.
//
// FTL may ignore this event if it does not match FTL's current build context and state.
type BuildSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of build context used while building.
	ContextId string `protobuf:"bytes,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// Indicates whether the build was automatically started by the plugin, rather than due to a Build rpc call.
	IsAutomaticRebuild bool `protobuf:"varint,2,opt,name=is_automatic_rebuild,json=isAutomaticRebuild,proto3" json:"is_automatic_rebuild,omitempty"`
	// Module schema for the built module
	Module *v1.Module `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	// Paths for files/directories to be deployed
	Deploy []string `protobuf:"bytes,4,rep,name=deploy,proto3" json:"deploy,omitempty"`
	// Name of the docker image to use for the runner
	DockerImage string `protobuf:"bytes,5,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	// Errors contains any errors that occurred during the build
	// No errors can have a level of ERROR, instead a BuildFailure should be sent
	// Instead this is useful for INFO and WARN level errors.
	Errors *ErrorList `protobuf:"bytes,6,opt,name=errors,proto3" json:"errors,omitempty"`
	// Dev mode endpoint URI. If this is set then rather than trying to deploy the module, FTL will start a runner that
	// connects to this endpoint.
	DevEndpoint *string `protobuf:"bytes,7,opt,name=dev_endpoint,json=devEndpoint,proto3,oneof" json:"dev_endpoint,omitempty"`
	// Dev mode debug port
	DebugPort *int32 `protobuf:"varint,8,opt,name=debug_port,json=debugPort,proto3,oneof" json:"debug_port,omitempty"`
	// Dev mode runner info file, this file is used to allow the runner to communicate provisioner info back to the plugin
	DevRunnerInfoFile *string `protobuf:"bytes,9,opt,name=dev_runner_info_file,json=devRunnerInfoFile,proto3,oneof" json:"dev_runner_info_file,omitempty"`
}

func (x *BuildSuccess) Reset() {
	*x = BuildSuccess{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildSuccess) ProtoMessage() {}

func (x *BuildSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildSuccess.ProtoReflect.Descriptor instead.
func (*BuildSuccess) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{18}
}

func (x *BuildSuccess) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *BuildSuccess) GetIsAutomaticRebuild() bool {
	if x != nil {
		return x.IsAutomaticRebuild
	}
	return false
}

func (x *BuildSuccess) GetModule() *v1.Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *BuildSuccess) GetDeploy() []string {
	if x != nil {
		return x.Deploy
	}
	return nil
}

func (x *BuildSuccess) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *BuildSuccess) GetErrors() *ErrorList {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *BuildSuccess) GetDevEndpoint() string {
	if x != nil && x.DevEndpoint != nil {
		return *x.DevEndpoint
	}
	return ""
}

func (x *BuildSuccess) GetDebugPort() int32 {
	if x != nil && x.DebugPort != nil {
		return *x.DebugPort
	}
	return 0
}

func (x *BuildSuccess) GetDevRunnerInfoFile() string {
	if x != nil && x.DevRunnerInfoFile != nil {
		return *x.DevRunnerInfoFile
	}
	return ""
}

// BuildFailure should be sent when a build fails.
//
// FTL may ignore this event if it does not match FTL's current build context and state.
type BuildFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of build context used while building.
	ContextId string `protobuf:"bytes,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// Indicates whether the build was automatically started by the plugin, rather than due to a Build rpc call.
	IsAutomaticRebuild bool `protobuf:"varint,2,opt,name=is_automatic_rebuild,json=isAutomaticRebuild,proto3" json:"is_automatic_rebuild,omitempty"`
	// Errors contains any errors that occurred during the build
	Errors *ErrorList `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
	// Indicates the plugin determined that the dependencies in the BuildContext are out of date.
	// If a Build stream is being kept open for automatic rebuilds, FTL will call GetDependencies, followed by
	// BuildContextUpdated.
	InvalidateDependencies bool `protobuf:"varint,4,opt,name=invalidate_dependencies,json=invalidateDependencies,proto3" json:"invalidate_dependencies,omitempty"`
}

func (x *BuildFailure) Reset() {
	*x = BuildFailure{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildFailure) ProtoMessage() {}

func (x *BuildFailure) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildFailure.ProtoReflect.Descriptor instead.
func (*BuildFailure) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{19}
}

func (x *BuildFailure) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *BuildFailure) GetIsAutomaticRebuild() bool {
	if x != nil {
		return x.IsAutomaticRebuild
	}
	return false
}

func (x *BuildFailure) GetErrors() *ErrorList {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *BuildFailure) GetInvalidateDependencies() bool {
	if x != nil {
		return x.InvalidateDependencies
	}
	return false
}

// Every type of message that can be streamed from the language plugin for a build.
type BuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*BuildResponse_AutoRebuildStarted
	//	*BuildResponse_BuildSuccess
	//	*BuildResponse_BuildFailure
	Event isBuildResponse_Event `protobuf_oneof:"event"`
}

func (x *BuildResponse) Reset() {
	*x = BuildResponse{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildResponse) ProtoMessage() {}

func (x *BuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildResponse.ProtoReflect.Descriptor instead.
func (*BuildResponse) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{20}
}

func (m *BuildResponse) GetEvent() isBuildResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *BuildResponse) GetAutoRebuildStarted() *AutoRebuildStarted {
	if x, ok := x.GetEvent().(*BuildResponse_AutoRebuildStarted); ok {
		return x.AutoRebuildStarted
	}
	return nil
}

func (x *BuildResponse) GetBuildSuccess() *BuildSuccess {
	if x, ok := x.GetEvent().(*BuildResponse_BuildSuccess); ok {
		return x.BuildSuccess
	}
	return nil
}

func (x *BuildResponse) GetBuildFailure() *BuildFailure {
	if x, ok := x.GetEvent().(*BuildResponse_BuildFailure); ok {
		return x.BuildFailure
	}
	return nil
}

type isBuildResponse_Event interface {
	isBuildResponse_Event()
}

type BuildResponse_AutoRebuildStarted struct {
	AutoRebuildStarted *AutoRebuildStarted `protobuf:"bytes,2,opt,name=auto_rebuild_started,json=autoRebuildStarted,proto3,oneof"`
}

type BuildResponse_BuildSuccess struct {
	BuildSuccess *BuildSuccess `protobuf:"bytes,3,opt,name=build_success,json=buildSuccess,proto3,oneof"`
}

type BuildResponse_BuildFailure struct {
	BuildFailure *BuildFailure `protobuf:"bytes,4,opt,name=build_failure,json=buildFailure,proto3,oneof"`
}

func (*BuildResponse_AutoRebuildStarted) isBuildResponse_Event() {}

func (*BuildResponse_BuildSuccess) isBuildResponse_Event() {}

func (*BuildResponse_BuildFailure) isBuildResponse_Event() {}

type GenerateStubsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The directory path to generate stubs into
	Dir string `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	// The schema of the module to generate stubs for
	Module *v1.Module `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	// The module's configuration to generate stubs for
	ModuleConfig *ModuleConfig `protobuf:"bytes,3,opt,name=module_config,json=moduleConfig,proto3" json:"module_config,omitempty"`
	// Native module configuration is the configuration for a module that uses the plugin's language, if
	// the main moduleConfig provided is of a different language. It is provided as a mechanism to derive
	// language specific information. For example, the language version.
	NativeModuleConfig *ModuleConfig `protobuf:"bytes,4,opt,name=native_module_config,json=nativeModuleConfig,proto3,oneof" json:"native_module_config,omitempty"`
}

func (x *GenerateStubsRequest) Reset() {
	*x = GenerateStubsRequest{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateStubsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStubsRequest) ProtoMessage() {}

func (x *GenerateStubsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStubsRequest.ProtoReflect.Descriptor instead.
func (*GenerateStubsRequest) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{21}
}

func (x *GenerateStubsRequest) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *GenerateStubsRequest) GetModule() *v1.Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *GenerateStubsRequest) GetModuleConfig() *ModuleConfig {
	if x != nil {
		return x.ModuleConfig
	}
	return nil
}

func (x *GenerateStubsRequest) GetNativeModuleConfig() *ModuleConfig {
	if x != nil {
		return x.NativeModuleConfig
	}
	return nil
}

type GenerateStubsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenerateStubsResponse) Reset() {
	*x = GenerateStubsResponse{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateStubsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStubsResponse) ProtoMessage() {}

func (x *GenerateStubsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStubsResponse.ProtoReflect.Descriptor instead.
func (*GenerateStubsResponse) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{22}
}

type SyncStubReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleConfig *ModuleConfig `protobuf:"bytes,1,opt,name=module_config,json=moduleConfig,proto3" json:"module_config,omitempty"`
	// The path of the directory containing all module stubs. Each module is in a subdirectory
	StubsRoot string `protobuf:"bytes,2,opt,name=stubs_root,json=stubsRoot,proto3" json:"stubs_root,omitempty"`
	// The names of all modules that have had stubs generated
	Modules []string `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *SyncStubReferencesRequest) Reset() {
	*x = SyncStubReferencesRequest{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStubReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStubReferencesRequest) ProtoMessage() {}

func (x *SyncStubReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStubReferencesRequest.ProtoReflect.Descriptor instead.
func (*SyncStubReferencesRequest) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{23}
}

func (x *SyncStubReferencesRequest) GetModuleConfig() *ModuleConfig {
	if x != nil {
		return x.ModuleConfig
	}
	return nil
}

func (x *SyncStubReferencesRequest) GetStubsRoot() string {
	if x != nil {
		return x.StubsRoot
	}
	return ""
}

func (x *SyncStubReferencesRequest) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

type SyncStubReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncStubReferencesResponse) Reset() {
	*x = SyncStubReferencesResponse{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStubReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStubReferencesResponse) ProtoMessage() {}

func (x *SyncStubReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStubReferencesResponse.ProtoReflect.Descriptor instead.
func (*SyncStubReferencesResponse) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{24}
}

type GetCreateModuleFlagsResponse_Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Help  string  `protobuf:"bytes,2,opt,name=help,proto3" json:"help,omitempty"`
	Envar *string `protobuf:"bytes,3,opt,name=envar,proto3,oneof" json:"envar,omitempty"`
	// short must be a single character
	Short       *string `protobuf:"bytes,4,opt,name=short,proto3,oneof" json:"short,omitempty"`
	Placeholder *string `protobuf:"bytes,5,opt,name=placeholder,proto3,oneof" json:"placeholder,omitempty"`
	Default     *string `protobuf:"bytes,6,opt,name=default,proto3,oneof" json:"default,omitempty"`
}

func (x *GetCreateModuleFlagsResponse_Flag) Reset() {
	*x = GetCreateModuleFlagsResponse_Flag{}
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCreateModuleFlagsResponse_Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreateModuleFlagsResponse_Flag) ProtoMessage() {}

func (x *GetCreateModuleFlagsResponse_Flag) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_language_v1_language_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreateModuleFlagsResponse_Flag.ProtoReflect.Descriptor instead.
func (*GetCreateModuleFlagsResponse_Flag) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetCreateModuleFlagsResponse_Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCreateModuleFlagsResponse_Flag) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *GetCreateModuleFlagsResponse_Flag) GetEnvar() string {
	if x != nil && x.Envar != nil {
		return *x.Envar
	}
	return ""
}

func (x *GetCreateModuleFlagsResponse_Flag) GetShort() string {
	if x != nil && x.Short != nil {
		return *x.Short
	}
	return ""
}

func (x *GetCreateModuleFlagsResponse_Flag) GetPlaceholder() string {
	if x != nil && x.Placeholder != nil {
		return *x.Placeholder
	}
	return ""
}

func (x *GetCreateModuleFlagsResponse_Flag) GetDefault() string {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return ""
}

var File_xyz_block_ftl_language_v1_language_proto protoreflect.FileDescriptor

var file_xyz_block_ftl_language_v1_language_proto_rawDesc = []byte{
	0x0a, 0x28, 0x78, 0x79, 0x7a, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x66, 0x74, 0x6c, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x78, 0x79, 0x7a, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x66,
	0x74, 0x6c, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x78, 0x79, 0x7a, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x66, 0x74, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x74, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x03, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x14,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x69, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x0f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x71, 0x6c, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x22, 0x64, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x67, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x6f, 0x47, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x22, 0x39, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xcf,
	0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x1a, 0xda, 0x01, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x65, 0x6c, 0x70, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6e, 0x76, 0x61, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0xbb, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x4f,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2d, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x16,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x1b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x22, 0xa7, 0x03, 0x0a, 0x1c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x44, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x40,
	0x0a, 0x0f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x71, 0x6c, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x71, 0x6c,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x64, 0x69,
	0x72, 0x22, 0x66, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xe6,
	0x01, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4c, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x76, 0x22, 0x6a, 0x0a, 0x1a, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x41,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x3a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a,
	0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41,
	0x52, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x54, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x54, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x52, 0x10,
	0x02, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x7c, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x45, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xd3,
	0x01, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x62, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x62, 0x73, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0xcc, 0x03, 0x0a, 0x0c, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x76,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x64, 0x65, 0x76, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0xa8, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x5e, 0x0a, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x75, 0x62,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x62, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x62, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x75, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb9, 0x08, 0x0a, 0x0f, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x36, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x2e, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x31,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x27,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x62, 0x73, 0x12, 0x2f, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x75, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81,
	0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x75, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x75, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x75, 0x62,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x52, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x54, 0x42, 0x44, 0x35, 0x34, 0x35, 0x36, 0x36, 0x39, 0x37, 0x35, 0x2f, 0x66,
	0x74, 0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x78, 0x79, 0x7a, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x66, 0x74, 0x6c, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xyz_block_ftl_language_v1_language_proto_rawDescOnce sync.Once
	file_xyz_block_ftl_language_v1_language_proto_rawDescData = file_xyz_block_ftl_language_v1_language_proto_rawDesc
)

func file_xyz_block_ftl_language_v1_language_proto_rawDescGZIP() []byte {
	file_xyz_block_ftl_language_v1_language_proto_rawDescOnce.Do(func() {
		file_xyz_block_ftl_language_v1_language_proto_rawDescData = protoimpl.X.CompressGZIP(file_xyz_block_ftl_language_v1_language_proto_rawDescData)
	})
	return file_xyz_block_ftl_language_v1_language_proto_rawDescData
}

var file_xyz_block_ftl_language_v1_language_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_xyz_block_ftl_language_v1_language_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_xyz_block_ftl_language_v1_language_proto_goTypes = []any{
	(Error_ErrorLevel)(0),                     // 0: xyz.block.ftl.language.v1.Error.ErrorLevel
	(Error_ErrorType)(0),                      // 1: xyz.block.ftl.language.v1.Error.ErrorType
	(*ModuleConfig)(nil),                      // 2: xyz.block.ftl.language.v1.ModuleConfig
	(*ProjectConfig)(nil),                     // 3: xyz.block.ftl.language.v1.ProjectConfig
	(*GetCreateModuleFlagsRequest)(nil),       // 4: xyz.block.ftl.language.v1.GetCreateModuleFlagsRequest
	(*GetCreateModuleFlagsResponse)(nil),      // 5: xyz.block.ftl.language.v1.GetCreateModuleFlagsResponse
	(*CreateModuleRequest)(nil),               // 6: xyz.block.ftl.language.v1.CreateModuleRequest
	(*CreateModuleResponse)(nil),              // 7: xyz.block.ftl.language.v1.CreateModuleResponse
	(*ModuleConfigDefaultsRequest)(nil),       // 8: xyz.block.ftl.language.v1.ModuleConfigDefaultsRequest
	(*ModuleConfigDefaultsResponse)(nil),      // 9: xyz.block.ftl.language.v1.ModuleConfigDefaultsResponse
	(*GetDependenciesRequest)(nil),            // 10: xyz.block.ftl.language.v1.GetDependenciesRequest
	(*GetDependenciesResponse)(nil),           // 11: xyz.block.ftl.language.v1.GetDependenciesResponse
	(*BuildContext)(nil),                      // 12: xyz.block.ftl.language.v1.BuildContext
	(*BuildContextUpdatedRequest)(nil),        // 13: xyz.block.ftl.language.v1.BuildContextUpdatedRequest
	(*BuildContextUpdatedResponse)(nil),       // 14: xyz.block.ftl.language.v1.BuildContextUpdatedResponse
	(*Error)(nil),                             // 15: xyz.block.ftl.language.v1.Error
	(*Position)(nil),                          // 16: xyz.block.ftl.language.v1.Position
	(*ErrorList)(nil),                         // 17: xyz.block.ftl.language.v1.ErrorList
	(*BuildRequest)(nil),                      // 18: xyz.block.ftl.language.v1.BuildRequest
	(*AutoRebuildStarted)(nil),                // 19: xyz.block.ftl.language.v1.AutoRebuildStarted
	(*BuildSuccess)(nil),                      // 20: xyz.block.ftl.language.v1.BuildSuccess
	(*BuildFailure)(nil),                      // 21: xyz.block.ftl.language.v1.BuildFailure
	(*BuildResponse)(nil),                     // 22: xyz.block.ftl.language.v1.BuildResponse
	(*GenerateStubsRequest)(nil),              // 23: xyz.block.ftl.language.v1.GenerateStubsRequest
	(*GenerateStubsResponse)(nil),             // 24: xyz.block.ftl.language.v1.GenerateStubsResponse
	(*SyncStubReferencesRequest)(nil),         // 25: xyz.block.ftl.language.v1.SyncStubReferencesRequest
	(*SyncStubReferencesResponse)(nil),        // 26: xyz.block.ftl.language.v1.SyncStubReferencesResponse
	(*GetCreateModuleFlagsResponse_Flag)(nil), // 27: xyz.block.ftl.language.v1.GetCreateModuleFlagsResponse.Flag
	(*structpb.Struct)(nil),                   // 28: google.protobuf.Struct
	(*v1.Schema)(nil),                         // 29: xyz.block.ftl.schema.v1.Schema
	(*v1.Module)(nil),                         // 30: xyz.block.ftl.schema.v1.Module
	(*v11.PingRequest)(nil),                   // 31: xyz.block.ftl.v1.PingRequest
	(*v11.PingResponse)(nil),                  // 32: xyz.block.ftl.v1.PingResponse
}
var file_xyz_block_ftl_language_v1_language_proto_depIdxs = []int32{
	28, // 0: xyz.block.ftl.language.v1.ModuleConfig.language_config:type_name -> google.protobuf.Struct
	27, // 1: xyz.block.ftl.language.v1.GetCreateModuleFlagsResponse.flags:type_name -> xyz.block.ftl.language.v1.GetCreateModuleFlagsResponse.Flag
	3,  // 2: xyz.block.ftl.language.v1.CreateModuleRequest.project_config:type_name -> xyz.block.ftl.language.v1.ProjectConfig
	28, // 3: xyz.block.ftl.language.v1.CreateModuleRequest.flags:type_name -> google.protobuf.Struct
	28, // 4: xyz.block.ftl.language.v1.ModuleConfigDefaultsResponse.language_config:type_name -> google.protobuf.Struct
	2,  // 5: xyz.block.ftl.language.v1.GetDependenciesRequest.module_config:type_name -> xyz.block.ftl.language.v1.ModuleConfig
	2,  // 6: xyz.block.ftl.language.v1.BuildContext.module_config:type_name -> xyz.block.ftl.language.v1.ModuleConfig
	29, // 7: xyz.block.ftl.language.v1.BuildContext.schema:type_name -> xyz.block.ftl.schema.v1.Schema
	12, // 8: xyz.block.ftl.language.v1.BuildContextUpdatedRequest.build_context:type_name -> xyz.block.ftl.language.v1.BuildContext
	0,  // 9: xyz.block.ftl.language.v1.Error.level:type_name -> xyz.block.ftl.language.v1.Error.ErrorLevel
	16, // 10: xyz.block.ftl.language.v1.Error.pos:type_name -> xyz.block.ftl.language.v1.Position
	1,  // 11: xyz.block.ftl.language.v1.Error.type:type_name -> xyz.block.ftl.language.v1.Error.ErrorType
	15, // 12: xyz.block.ftl.language.v1.ErrorList.errors:type_name -> xyz.block.ftl.language.v1.Error
	12, // 13: xyz.block.ftl.language.v1.BuildRequest.build_context:type_name -> xyz.block.ftl.language.v1.BuildContext
	30, // 14: xyz.block.ftl.language.v1.BuildSuccess.module:type_name -> xyz.block.ftl.schema.v1.Module
	17, // 15: xyz.block.ftl.language.v1.BuildSuccess.errors:type_name -> xyz.block.ftl.language.v1.ErrorList
	17, // 16: xyz.block.ftl.language.v1.BuildFailure.errors:type_name -> xyz.block.ftl.language.v1.ErrorList
	19, // 17: xyz.block.ftl.language.v1.BuildResponse.auto_rebuild_started:type_name -> xyz.block.ftl.language.v1.AutoRebuildStarted
	20, // 18: xyz.block.ftl.language.v1.BuildResponse.build_success:type_name -> xyz.block.ftl.language.v1.BuildSuccess
	21, // 19: xyz.block.ftl.language.v1.BuildResponse.build_failure:type_name -> xyz.block.ftl.language.v1.BuildFailure
	30, // 20: xyz.block.ftl.language.v1.GenerateStubsRequest.module:type_name -> xyz.block.ftl.schema.v1.Module
	2,  // 21: xyz.block.ftl.language.v1.GenerateStubsRequest.module_config:type_name -> xyz.block.ftl.language.v1.ModuleConfig
	2,  // 22: xyz.block.ftl.language.v1.GenerateStubsRequest.native_module_config:type_name -> xyz.block.ftl.language.v1.ModuleConfig
	2,  // 23: xyz.block.ftl.language.v1.SyncStubReferencesRequest.module_config:type_name -> xyz.block.ftl.language.v1.ModuleConfig
	31, // 24: xyz.block.ftl.language.v1.LanguageService.Ping:input_type -> xyz.block.ftl.v1.PingRequest
	4,  // 25: xyz.block.ftl.language.v1.LanguageService.GetCreateModuleFlags:input_type -> xyz.block.ftl.language.v1.GetCreateModuleFlagsRequest
	6,  // 26: xyz.block.ftl.language.v1.LanguageService.CreateModule:input_type -> xyz.block.ftl.language.v1.CreateModuleRequest
	8,  // 27: xyz.block.ftl.language.v1.LanguageService.ModuleConfigDefaults:input_type -> xyz.block.ftl.language.v1.ModuleConfigDefaultsRequest
	10, // 28: xyz.block.ftl.language.v1.LanguageService.GetDependencies:input_type -> xyz.block.ftl.language.v1.GetDependenciesRequest
	18, // 29: xyz.block.ftl.language.v1.LanguageService.Build:input_type -> xyz.block.ftl.language.v1.BuildRequest
	13, // 30: xyz.block.ftl.language.v1.LanguageService.BuildContextUpdated:input_type -> xyz.block.ftl.language.v1.BuildContextUpdatedRequest
	23, // 31: xyz.block.ftl.language.v1.LanguageService.GenerateStubs:input_type -> xyz.block.ftl.language.v1.GenerateStubsRequest
	25, // 32: xyz.block.ftl.language.v1.LanguageService.SyncStubReferences:input_type -> xyz.block.ftl.language.v1.SyncStubReferencesRequest
	32, // 33: xyz.block.ftl.language.v1.LanguageService.Ping:output_type -> xyz.block.ftl.v1.PingResponse
	5,  // 34: xyz.block.ftl.language.v1.LanguageService.GetCreateModuleFlags:output_type -> xyz.block.ftl.language.v1.GetCreateModuleFlagsResponse
	7,  // 35: xyz.block.ftl.language.v1.LanguageService.CreateModule:output_type -> xyz.block.ftl.language.v1.CreateModuleResponse
	9,  // 36: xyz.block.ftl.language.v1.LanguageService.ModuleConfigDefaults:output_type -> xyz.block.ftl.language.v1.ModuleConfigDefaultsResponse
	11, // 37: xyz.block.ftl.language.v1.LanguageService.GetDependencies:output_type -> xyz.block.ftl.language.v1.GetDependenciesResponse
	22, // 38: xyz.block.ftl.language.v1.LanguageService.Build:output_type -> xyz.block.ftl.language.v1.BuildResponse
	14, // 39: xyz.block.ftl.language.v1.LanguageService.BuildContextUpdated:output_type -> xyz.block.ftl.language.v1.BuildContextUpdatedResponse
	24, // 40: xyz.block.ftl.language.v1.LanguageService.GenerateStubs:output_type -> xyz.block.ftl.language.v1.GenerateStubsResponse
	26, // 41: xyz.block.ftl.language.v1.LanguageService.SyncStubReferences:output_type -> xyz.block.ftl.language.v1.SyncStubReferencesResponse
	33, // [33:42] is the sub-list for method output_type
	24, // [24:33] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_xyz_block_ftl_language_v1_language_proto_init() }
func file_xyz_block_ftl_language_v1_language_proto_init() {
	if File_xyz_block_ftl_language_v1_language_proto != nil {
		return
	}
	file_xyz_block_ftl_language_v1_language_proto_msgTypes[0].OneofWrappers = []any{}
	file_xyz_block_ftl_language_v1_language_proto_msgTypes[7].OneofWrappers = []any{}
	file_xyz_block_ftl_language_v1_language_proto_msgTypes[13].OneofWrappers = []any{}
	file_xyz_block_ftl_language_v1_language_proto_msgTypes[18].OneofWrappers = []any{}
	file_xyz_block_ftl_language_v1_language_proto_msgTypes[20].OneofWrappers = []any{
		(*BuildResponse_AutoRebuildStarted)(nil),
		(*BuildResponse_BuildSuccess)(nil),
		(*BuildResponse_BuildFailure)(nil),
	}
	file_xyz_block_ftl_language_v1_language_proto_msgTypes[21].OneofWrappers = []any{}
	file_xyz_block_ftl_language_v1_language_proto_msgTypes[25].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xyz_block_ftl_language_v1_language_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xyz_block_ftl_language_v1_language_proto_goTypes,
		DependencyIndexes: file_xyz_block_ftl_language_v1_language_proto_depIdxs,
		EnumInfos:         file_xyz_block_ftl_language_v1_language_proto_enumTypes,
		MessageInfos:      file_xyz_block_ftl_language_v1_language_proto_msgTypes,
	}.Build()
	File_xyz_block_ftl_language_v1_language_proto = out.File
	file_xyz_block_ftl_language_v1_language_proto_rawDesc = nil
	file_xyz_block_ftl_language_v1_language_proto_goTypes = nil
	file_xyz_block_ftl_language_v1_language_proto_depIdxs = nil
}
