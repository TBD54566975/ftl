// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v1beta1/provisioner/service.proto

package provisionerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1"
	_ "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1beta1/provisioner"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// ProvisionerServiceName is the fully-qualified name of the ProvisionerService service.
	ProvisionerServiceName = "xyz.block.ftl.v1beta1.provisioner.ProvisionerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProvisionerServicePingProcedure is the fully-qualified name of the ProvisionerService's Ping RPC.
	ProvisionerServicePingProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/Ping"
	// ProvisionerServiceStatusProcedure is the fully-qualified name of the ProvisionerService's Status
	// RPC.
	ProvisionerServiceStatusProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/Status"
	// ProvisionerServiceGetArtefactDiffsProcedure is the fully-qualified name of the
	// ProvisionerService's GetArtefactDiffs RPC.
	ProvisionerServiceGetArtefactDiffsProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/GetArtefactDiffs"
	// ProvisionerServiceUploadArtefactProcedure is the fully-qualified name of the ProvisionerService's
	// UploadArtefact RPC.
	ProvisionerServiceUploadArtefactProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/UploadArtefact"
	// ProvisionerServiceCreateDeploymentProcedure is the fully-qualified name of the
	// ProvisionerService's CreateDeployment RPC.
	ProvisionerServiceCreateDeploymentProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/CreateDeployment"
	// ProvisionerServiceUpdateDeployProcedure is the fully-qualified name of the ProvisionerService's
	// UpdateDeploy RPC.
	ProvisionerServiceUpdateDeployProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/UpdateDeploy"
	// ProvisionerServiceReplaceDeployProcedure is the fully-qualified name of the ProvisionerService's
	// ReplaceDeploy RPC.
	ProvisionerServiceReplaceDeployProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/ReplaceDeploy"
	// ProvisionerServiceGetSchemaProcedure is the fully-qualified name of the ProvisionerService's
	// GetSchema RPC.
	ProvisionerServiceGetSchemaProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/GetSchema"
	// ProvisionerServicePullSchemaProcedure is the fully-qualified name of the ProvisionerService's
	// PullSchema RPC.
	ProvisionerServicePullSchemaProcedure = "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/PullSchema"
)

// ProvisionerServiceClient is a client for the xyz.block.ftl.v1beta1.provisioner.ProvisionerService
// service.
type ProvisionerServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
	GetArtefactDiffs(context.Context, *connect.Request[v1.GetArtefactDiffsRequest]) (*connect.Response[v1.GetArtefactDiffsResponse], error)
	UploadArtefact(context.Context, *connect.Request[v1.UploadArtefactRequest]) (*connect.Response[v1.UploadArtefactResponse], error)
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	UpdateDeploy(context.Context, *connect.Request[v1.UpdateDeployRequest]) (*connect.Response[v1.UpdateDeployResponse], error)
	ReplaceDeploy(context.Context, *connect.Request[v1.ReplaceDeployRequest]) (*connect.Response[v1.ReplaceDeployResponse], error)
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest]) (*connect.ServerStreamForClient[v1.PullSchemaResponse], error)
}

// NewProvisionerServiceClient constructs a client for the
// xyz.block.ftl.v1beta1.provisioner.ProvisionerService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProvisionerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProvisionerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &provisionerServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+ProvisionerServicePingProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		status: connect.NewClient[v1.StatusRequest, v1.StatusResponse](
			httpClient,
			baseURL+ProvisionerServiceStatusProcedure,
			opts...,
		),
		getArtefactDiffs: connect.NewClient[v1.GetArtefactDiffsRequest, v1.GetArtefactDiffsResponse](
			httpClient,
			baseURL+ProvisionerServiceGetArtefactDiffsProcedure,
			opts...,
		),
		uploadArtefact: connect.NewClient[v1.UploadArtefactRequest, v1.UploadArtefactResponse](
			httpClient,
			baseURL+ProvisionerServiceUploadArtefactProcedure,
			opts...,
		),
		createDeployment: connect.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+ProvisionerServiceCreateDeploymentProcedure,
			opts...,
		),
		updateDeploy: connect.NewClient[v1.UpdateDeployRequest, v1.UpdateDeployResponse](
			httpClient,
			baseURL+ProvisionerServiceUpdateDeployProcedure,
			opts...,
		),
		replaceDeploy: connect.NewClient[v1.ReplaceDeployRequest, v1.ReplaceDeployResponse](
			httpClient,
			baseURL+ProvisionerServiceReplaceDeployProcedure,
			opts...,
		),
		getSchema: connect.NewClient[v1.GetSchemaRequest, v1.GetSchemaResponse](
			httpClient,
			baseURL+ProvisionerServiceGetSchemaProcedure,
			opts...,
		),
		pullSchema: connect.NewClient[v1.PullSchemaRequest, v1.PullSchemaResponse](
			httpClient,
			baseURL+ProvisionerServicePullSchemaProcedure,
			opts...,
		),
	}
}

// provisionerServiceClient implements ProvisionerServiceClient.
type provisionerServiceClient struct {
	ping             *connect.Client[v1.PingRequest, v1.PingResponse]
	status           *connect.Client[v1.StatusRequest, v1.StatusResponse]
	getArtefactDiffs *connect.Client[v1.GetArtefactDiffsRequest, v1.GetArtefactDiffsResponse]
	uploadArtefact   *connect.Client[v1.UploadArtefactRequest, v1.UploadArtefactResponse]
	createDeployment *connect.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	updateDeploy     *connect.Client[v1.UpdateDeployRequest, v1.UpdateDeployResponse]
	replaceDeploy    *connect.Client[v1.ReplaceDeployRequest, v1.ReplaceDeployResponse]
	getSchema        *connect.Client[v1.GetSchemaRequest, v1.GetSchemaResponse]
	pullSchema       *connect.Client[v1.PullSchemaRequest, v1.PullSchemaResponse]
}

// Ping calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.Ping.
func (c *provisionerServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Status calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.Status.
func (c *provisionerServiceClient) Status(ctx context.Context, req *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// GetArtefactDiffs calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.GetArtefactDiffs.
func (c *provisionerServiceClient) GetArtefactDiffs(ctx context.Context, req *connect.Request[v1.GetArtefactDiffsRequest]) (*connect.Response[v1.GetArtefactDiffsResponse], error) {
	return c.getArtefactDiffs.CallUnary(ctx, req)
}

// UploadArtefact calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.UploadArtefact.
func (c *provisionerServiceClient) UploadArtefact(ctx context.Context, req *connect.Request[v1.UploadArtefactRequest]) (*connect.Response[v1.UploadArtefactResponse], error) {
	return c.uploadArtefact.CallUnary(ctx, req)
}

// CreateDeployment calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.CreateDeployment.
func (c *provisionerServiceClient) CreateDeployment(ctx context.Context, req *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// UpdateDeploy calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.UpdateDeploy.
func (c *provisionerServiceClient) UpdateDeploy(ctx context.Context, req *connect.Request[v1.UpdateDeployRequest]) (*connect.Response[v1.UpdateDeployResponse], error) {
	return c.updateDeploy.CallUnary(ctx, req)
}

// ReplaceDeploy calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.ReplaceDeploy.
func (c *provisionerServiceClient) ReplaceDeploy(ctx context.Context, req *connect.Request[v1.ReplaceDeployRequest]) (*connect.Response[v1.ReplaceDeployResponse], error) {
	return c.replaceDeploy.CallUnary(ctx, req)
}

// GetSchema calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.GetSchema.
func (c *provisionerServiceClient) GetSchema(ctx context.Context, req *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// PullSchema calls xyz.block.ftl.v1beta1.provisioner.ProvisionerService.PullSchema.
func (c *provisionerServiceClient) PullSchema(ctx context.Context, req *connect.Request[v1.PullSchemaRequest]) (*connect.ServerStreamForClient[v1.PullSchemaResponse], error) {
	return c.pullSchema.CallServerStream(ctx, req)
}

// ProvisionerServiceHandler is an implementation of the
// xyz.block.ftl.v1beta1.provisioner.ProvisionerService service.
type ProvisionerServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
	GetArtefactDiffs(context.Context, *connect.Request[v1.GetArtefactDiffsRequest]) (*connect.Response[v1.GetArtefactDiffsResponse], error)
	UploadArtefact(context.Context, *connect.Request[v1.UploadArtefactRequest]) (*connect.Response[v1.UploadArtefactResponse], error)
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	UpdateDeploy(context.Context, *connect.Request[v1.UpdateDeployRequest]) (*connect.Response[v1.UpdateDeployResponse], error)
	ReplaceDeploy(context.Context, *connect.Request[v1.ReplaceDeployRequest]) (*connect.Response[v1.ReplaceDeployResponse], error)
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest], *connect.ServerStream[v1.PullSchemaResponse]) error
}

// NewProvisionerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProvisionerServiceHandler(svc ProvisionerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	provisionerServicePingHandler := connect.NewUnaryHandler(
		ProvisionerServicePingProcedure,
		svc.Ping,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	provisionerServiceStatusHandler := connect.NewUnaryHandler(
		ProvisionerServiceStatusProcedure,
		svc.Status,
		opts...,
	)
	provisionerServiceGetArtefactDiffsHandler := connect.NewUnaryHandler(
		ProvisionerServiceGetArtefactDiffsProcedure,
		svc.GetArtefactDiffs,
		opts...,
	)
	provisionerServiceUploadArtefactHandler := connect.NewUnaryHandler(
		ProvisionerServiceUploadArtefactProcedure,
		svc.UploadArtefact,
		opts...,
	)
	provisionerServiceCreateDeploymentHandler := connect.NewUnaryHandler(
		ProvisionerServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		opts...,
	)
	provisionerServiceUpdateDeployHandler := connect.NewUnaryHandler(
		ProvisionerServiceUpdateDeployProcedure,
		svc.UpdateDeploy,
		opts...,
	)
	provisionerServiceReplaceDeployHandler := connect.NewUnaryHandler(
		ProvisionerServiceReplaceDeployProcedure,
		svc.ReplaceDeploy,
		opts...,
	)
	provisionerServiceGetSchemaHandler := connect.NewUnaryHandler(
		ProvisionerServiceGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	)
	provisionerServicePullSchemaHandler := connect.NewServerStreamHandler(
		ProvisionerServicePullSchemaProcedure,
		svc.PullSchema,
		opts...,
	)
	return "/xyz.block.ftl.v1beta1.provisioner.ProvisionerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProvisionerServicePingProcedure:
			provisionerServicePingHandler.ServeHTTP(w, r)
		case ProvisionerServiceStatusProcedure:
			provisionerServiceStatusHandler.ServeHTTP(w, r)
		case ProvisionerServiceGetArtefactDiffsProcedure:
			provisionerServiceGetArtefactDiffsHandler.ServeHTTP(w, r)
		case ProvisionerServiceUploadArtefactProcedure:
			provisionerServiceUploadArtefactHandler.ServeHTTP(w, r)
		case ProvisionerServiceCreateDeploymentProcedure:
			provisionerServiceCreateDeploymentHandler.ServeHTTP(w, r)
		case ProvisionerServiceUpdateDeployProcedure:
			provisionerServiceUpdateDeployHandler.ServeHTTP(w, r)
		case ProvisionerServiceReplaceDeployProcedure:
			provisionerServiceReplaceDeployHandler.ServeHTTP(w, r)
		case ProvisionerServiceGetSchemaProcedure:
			provisionerServiceGetSchemaHandler.ServeHTTP(w, r)
		case ProvisionerServicePullSchemaProcedure:
			provisionerServicePullSchemaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProvisionerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProvisionerServiceHandler struct{}

func (UnimplementedProvisionerServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.Ping is not implemented"))
}

func (UnimplementedProvisionerServiceHandler) Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.Status is not implemented"))
}

func (UnimplementedProvisionerServiceHandler) GetArtefactDiffs(context.Context, *connect.Request[v1.GetArtefactDiffsRequest]) (*connect.Response[v1.GetArtefactDiffsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.GetArtefactDiffs is not implemented"))
}

func (UnimplementedProvisionerServiceHandler) UploadArtefact(context.Context, *connect.Request[v1.UploadArtefactRequest]) (*connect.Response[v1.UploadArtefactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.UploadArtefact is not implemented"))
}

func (UnimplementedProvisionerServiceHandler) CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.CreateDeployment is not implemented"))
}

func (UnimplementedProvisionerServiceHandler) UpdateDeploy(context.Context, *connect.Request[v1.UpdateDeployRequest]) (*connect.Response[v1.UpdateDeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.UpdateDeploy is not implemented"))
}

func (UnimplementedProvisionerServiceHandler) ReplaceDeploy(context.Context, *connect.Request[v1.ReplaceDeployRequest]) (*connect.Response[v1.ReplaceDeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.ReplaceDeploy is not implemented"))
}

func (UnimplementedProvisionerServiceHandler) GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.GetSchema is not implemented"))
}

func (UnimplementedProvisionerServiceHandler) PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest], *connect.ServerStream[v1.PullSchemaResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1beta1.provisioner.ProvisionerService.PullSchema is not implemented"))
}
