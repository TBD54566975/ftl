syntax = "proto3";

package xyz.block.ftl.console.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "xyz/block/ftl/schema/v1/schema.proto";
import "xyz/block/ftl/timeline/v1/event.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/console/v1;pbconsole";
option java_multiple_files = true;

message Config {
  ftl.schema.v1.Config config = 1;
  repeated ftl.schema.v1.Ref references = 2;
}

message Data {
  ftl.schema.v1.Data data = 1;
  string schema = 2;
  repeated ftl.schema.v1.Ref references = 3;
}

message Database {
  ftl.schema.v1.Database database = 1;
  repeated ftl.schema.v1.Ref references = 2;
}

message Enum {
  ftl.schema.v1.Enum enum = 1;
  repeated ftl.schema.v1.Ref references = 2;
}

message Topic {
  ftl.schema.v1.Topic topic = 1;
  repeated ftl.schema.v1.Ref references = 2;
}

message TypeAlias {
  ftl.schema.v1.TypeAlias typealias = 1;
  repeated ftl.schema.v1.Ref references = 2;
}

message Secret {
  ftl.schema.v1.Secret secret = 1;
  repeated ftl.schema.v1.Ref references = 2;
}

message Verb {
  ftl.schema.v1.Verb verb = 1;
  string schema = 2;
  string json_request_schema = 3;
  repeated ftl.schema.v1.Ref references = 4;
}

message Module {
  string name = 1;
  string deployment_key = 2;
  string language = 3;
  string schema = 4;
  repeated Verb verbs = 5;
  repeated Data data = 6;
  repeated Secret secrets = 7;
  repeated Config configs = 8;
  repeated Database databases = 9;
  repeated Enum enums = 10;
  repeated Topic topics = 11;
  repeated TypeAlias typealiases = 12;
}

message TopologyGroup {
  repeated string modules = 1;
}

message Topology {
  repeated TopologyGroup levels = 1;
}

message GetModulesRequest {}
message GetModulesResponse {
  repeated Module modules = 1;
  Topology topology = 2;
}

message StreamModulesRequest {}
message StreamModulesResponse {
  repeated Module modules = 1;
  Topology topology = 2;
}

// Query for events.
message GetEventsRequest {
  // Limit the number of events returned.
  message LimitFilter {
    int32 limit = 1;
  }
  // Filters events by log level.
  message LogLevelFilter {
    timeline.v1.LogLevel log_level = 1;
  }
  // Filters events by deployment key.
  message DeploymentFilter {
    repeated string deployments = 1;
  }
  // Filters events by request key.
  message RequestFilter {
    repeated string requests = 1;
  }
  // Filters events by event type.
  message EventTypeFilter {
    repeated timeline.v1.EventType event_types = 1;
  }
  // Filters events by time.
  //
  // Either end of the time range can be omitted to indicate no bound.
  message TimeFilter {
    optional google.protobuf.Timestamp older_than = 1;
    optional google.protobuf.Timestamp newer_than = 2;
  }
  // Filters events by ID.
  //
  // Either end of the ID range can be omitted to indicate no bound.
  message IDFilter {
    optional int64 lower_than = 1;
    optional int64 higher_than = 2;
  }
  // Filters events by call.
  message CallFilter {
    string dest_module = 1;
    optional string dest_verb = 2;
    optional string source_module = 3;
  }
  message ModuleFilter {
    string module = 1;
    optional string verb = 2;
  }

  enum Order {
    ORDER_UNSPECIFIED = 0;
    ORDER_ASC = 1;
    ORDER_DESC = 2;
  }

  message Filter {
    // These map 1:1 with filters in backend/controller/internal/dal/events.go
    oneof filter {
      LimitFilter limit = 1;
      LogLevelFilter log_level = 2;
      DeploymentFilter deployments = 3;
      RequestFilter requests = 4;
      EventTypeFilter event_types = 5;
      TimeFilter time = 6;
      IDFilter id = 7;
      CallFilter call = 8;
      ModuleFilter module = 9;
    }
  }

  repeated Filter filters = 1;
  int32 limit = 2;
  Order order = 3;
}

message GetEventsResponse {
  repeated timeline.v1.Event events = 1;

  // For pagination, this cursor is where we should start our next query
  optional int64 cursor = 2;
}

message GetConfigRequest {
  string name = 1;
  optional string module = 2;
}

message GetConfigResponse {
  bytes value = 1;
}

message SetConfigRequest {
  string name = 1;
  optional string module = 2;
  bytes value = 3;
}

message SetConfigResponse {
  bytes value = 1;
}

message GetSecretRequest {
  string name = 1;
  optional string module = 2;
}

message GetSecretResponse {
  bytes value = 1;
}

message SetSecretRequest {
  string name = 1;
  optional string module = 2;
  bytes value = 3;
}

message SetSecretResponse {
  bytes value = 1;
}

message StreamEventsRequest {
  optional google.protobuf.Duration update_interval = 1;
  GetEventsRequest query = 2;
}

message StreamEventsResponse {
  repeated timeline.v1.Event events = 1;
}

service ConsoleService {
  // Ping service for readiness.
  rpc Ping(ftl.v1.PingRequest) returns (ftl.v1.PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc GetModules(GetModulesRequest) returns (GetModulesResponse);
  rpc StreamModules(StreamModulesRequest) returns (stream StreamModulesResponse);
  rpc StreamEvents(StreamEventsRequest) returns (stream StreamEventsResponse);
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse);

  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse);

  rpc GetSecret(GetSecretRequest) returns (GetSecretResponse);
  rpc SetSecret(SetSecretRequest) returns (SetSecretResponse);
}
