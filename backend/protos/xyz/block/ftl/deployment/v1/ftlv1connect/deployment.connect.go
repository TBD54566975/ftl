// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/deployment/v1/deployment.proto

package ftlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/deployment/v1"
	v1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "xyz.block.ftl.deployment.v1.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploymentServicePingProcedure is the fully-qualified name of the DeploymentService's Ping RPC.
	DeploymentServicePingProcedure = "/xyz.block.ftl.deployment.v1.DeploymentService/Ping"
	// DeploymentServiceGetDeploymentContextProcedure is the fully-qualified name of the
	// DeploymentService's GetDeploymentContext RPC.
	DeploymentServiceGetDeploymentContextProcedure = "/xyz.block.ftl.deployment.v1.DeploymentService/GetDeploymentContext"
)

// DeploymentServiceClient is a client for the xyz.block.ftl.deployment.v1.DeploymentService
// service.
type DeploymentServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Get configuration state for the deployment
	GetDeploymentContext(context.Context, *connect.Request[v11.GetDeploymentContextRequest]) (*connect.ServerStreamForClient[v11.GetDeploymentContextResponse], error)
}

// NewDeploymentServiceClient constructs a client for the
// xyz.block.ftl.deployment.v1.DeploymentService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deploymentServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+DeploymentServicePingProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getDeploymentContext: connect.NewClient[v11.GetDeploymentContextRequest, v11.GetDeploymentContextResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentContextProcedure,
			opts...,
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	ping                 *connect.Client[v1.PingRequest, v1.PingResponse]
	getDeploymentContext *connect.Client[v11.GetDeploymentContextRequest, v11.GetDeploymentContextResponse]
}

// Ping calls xyz.block.ftl.deployment.v1.DeploymentService.Ping.
func (c *deploymentServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetDeploymentContext calls xyz.block.ftl.deployment.v1.DeploymentService.GetDeploymentContext.
func (c *deploymentServiceClient) GetDeploymentContext(ctx context.Context, req *connect.Request[v11.GetDeploymentContextRequest]) (*connect.ServerStreamForClient[v11.GetDeploymentContextResponse], error) {
	return c.getDeploymentContext.CallServerStream(ctx, req)
}

// DeploymentServiceHandler is an implementation of the
// xyz.block.ftl.deployment.v1.DeploymentService service.
type DeploymentServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Get configuration state for the deployment
	GetDeploymentContext(context.Context, *connect.Request[v11.GetDeploymentContextRequest], *connect.ServerStream[v11.GetDeploymentContextResponse]) error
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServicePingHandler := connect.NewUnaryHandler(
		DeploymentServicePingProcedure,
		svc.Ping,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDeploymentContextHandler := connect.NewServerStreamHandler(
		DeploymentServiceGetDeploymentContextProcedure,
		svc.GetDeploymentContext,
		opts...,
	)
	return "/xyz.block.ftl.deployment.v1.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServicePingProcedure:
			deploymentServicePingHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDeploymentContextProcedure:
			deploymentServiceGetDeploymentContextHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.deployment.v1.DeploymentService.Ping is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDeploymentContext(context.Context, *connect.Request[v11.GetDeploymentContextRequest], *connect.ServerStream[v11.GetDeploymentContextResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.deployment.v1.DeploymentService.GetDeploymentContext is not implemented"))
}
