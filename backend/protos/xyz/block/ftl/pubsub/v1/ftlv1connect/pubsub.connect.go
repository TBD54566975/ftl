// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/pubsub/v1/pubsub.proto

package ftlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/pubsub/v1"
	v1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// LegacyPubsubServiceName is the fully-qualified name of the LegacyPubsubService service.
	LegacyPubsubServiceName = "xyz.block.ftl.pubsub.v1.LegacyPubsubService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LegacyPubsubServicePingProcedure is the fully-qualified name of the LegacyPubsubService's Ping
	// RPC.
	LegacyPubsubServicePingProcedure = "/xyz.block.ftl.pubsub.v1.LegacyPubsubService/Ping"
	// LegacyPubsubServicePublishEventProcedure is the fully-qualified name of the LegacyPubsubService's
	// PublishEvent RPC.
	LegacyPubsubServicePublishEventProcedure = "/xyz.block.ftl.pubsub.v1.LegacyPubsubService/PublishEvent"
	// LegacyPubsubServiceResetSubscriptionProcedure is the fully-qualified name of the
	// LegacyPubsubService's ResetSubscription RPC.
	LegacyPubsubServiceResetSubscriptionProcedure = "/xyz.block.ftl.pubsub.v1.LegacyPubsubService/ResetSubscription"
)

// LegacyPubsubServiceClient is a client for the xyz.block.ftl.pubsub.v1.LegacyPubsubService
// service.
type LegacyPubsubServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Publish an event to a topic.
	PublishEvent(context.Context, *connect.Request[v11.PublishEventRequest]) (*connect.Response[v11.PublishEventResponse], error)
	// Reset the cursor for a subscription to the head of its topic.
	ResetSubscription(context.Context, *connect.Request[v11.ResetSubscriptionRequest]) (*connect.Response[v11.ResetSubscriptionResponse], error)
}

// NewLegacyPubsubServiceClient constructs a client for the
// xyz.block.ftl.pubsub.v1.LegacyPubsubService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLegacyPubsubServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LegacyPubsubServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &legacyPubsubServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+LegacyPubsubServicePingProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		publishEvent: connect.NewClient[v11.PublishEventRequest, v11.PublishEventResponse](
			httpClient,
			baseURL+LegacyPubsubServicePublishEventProcedure,
			opts...,
		),
		resetSubscription: connect.NewClient[v11.ResetSubscriptionRequest, v11.ResetSubscriptionResponse](
			httpClient,
			baseURL+LegacyPubsubServiceResetSubscriptionProcedure,
			opts...,
		),
	}
}

// legacyPubsubServiceClient implements LegacyPubsubServiceClient.
type legacyPubsubServiceClient struct {
	ping              *connect.Client[v1.PingRequest, v1.PingResponse]
	publishEvent      *connect.Client[v11.PublishEventRequest, v11.PublishEventResponse]
	resetSubscription *connect.Client[v11.ResetSubscriptionRequest, v11.ResetSubscriptionResponse]
}

// Ping calls xyz.block.ftl.pubsub.v1.LegacyPubsubService.Ping.
func (c *legacyPubsubServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// PublishEvent calls xyz.block.ftl.pubsub.v1.LegacyPubsubService.PublishEvent.
func (c *legacyPubsubServiceClient) PublishEvent(ctx context.Context, req *connect.Request[v11.PublishEventRequest]) (*connect.Response[v11.PublishEventResponse], error) {
	return c.publishEvent.CallUnary(ctx, req)
}

// ResetSubscription calls xyz.block.ftl.pubsub.v1.LegacyPubsubService.ResetSubscription.
func (c *legacyPubsubServiceClient) ResetSubscription(ctx context.Context, req *connect.Request[v11.ResetSubscriptionRequest]) (*connect.Response[v11.ResetSubscriptionResponse], error) {
	return c.resetSubscription.CallUnary(ctx, req)
}

// LegacyPubsubServiceHandler is an implementation of the
// xyz.block.ftl.pubsub.v1.LegacyPubsubService service.
type LegacyPubsubServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Publish an event to a topic.
	PublishEvent(context.Context, *connect.Request[v11.PublishEventRequest]) (*connect.Response[v11.PublishEventResponse], error)
	// Reset the cursor for a subscription to the head of its topic.
	ResetSubscription(context.Context, *connect.Request[v11.ResetSubscriptionRequest]) (*connect.Response[v11.ResetSubscriptionResponse], error)
}

// NewLegacyPubsubServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLegacyPubsubServiceHandler(svc LegacyPubsubServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	legacyPubsubServicePingHandler := connect.NewUnaryHandler(
		LegacyPubsubServicePingProcedure,
		svc.Ping,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	legacyPubsubServicePublishEventHandler := connect.NewUnaryHandler(
		LegacyPubsubServicePublishEventProcedure,
		svc.PublishEvent,
		opts...,
	)
	legacyPubsubServiceResetSubscriptionHandler := connect.NewUnaryHandler(
		LegacyPubsubServiceResetSubscriptionProcedure,
		svc.ResetSubscription,
		opts...,
	)
	return "/xyz.block.ftl.pubsub.v1.LegacyPubsubService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LegacyPubsubServicePingProcedure:
			legacyPubsubServicePingHandler.ServeHTTP(w, r)
		case LegacyPubsubServicePublishEventProcedure:
			legacyPubsubServicePublishEventHandler.ServeHTTP(w, r)
		case LegacyPubsubServiceResetSubscriptionProcedure:
			legacyPubsubServiceResetSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLegacyPubsubServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLegacyPubsubServiceHandler struct{}

func (UnimplementedLegacyPubsubServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.pubsub.v1.LegacyPubsubService.Ping is not implemented"))
}

func (UnimplementedLegacyPubsubServiceHandler) PublishEvent(context.Context, *connect.Request[v11.PublishEventRequest]) (*connect.Response[v11.PublishEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.pubsub.v1.LegacyPubsubService.PublishEvent is not implemented"))
}

func (UnimplementedLegacyPubsubServiceHandler) ResetSubscription(context.Context, *connect.Request[v11.ResetSubscriptionRequest]) (*connect.Response[v11.ResetSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.pubsub.v1.LegacyPubsubService.ResetSubscription is not implemented"))
}
