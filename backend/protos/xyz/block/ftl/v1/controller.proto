syntax = "proto3";

package xyz.block.ftl.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "xyz/block/ftl/v1/ftl.proto";
import "xyz/block/ftl/v1/schema/schema.proto";

option go_package = "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1;ftlv1";
option java_multiple_files = true;

message GetCertificationRequest {
  CertificateContent request = 1;
  bytes signature = 2;
}

message GetCertificationResponse {
  Certificate certificate = 1;
}

// CertificateContent is separated from Certificate to allow for easier signing.
message CertificateContent {
  string identity = 1;
  bytes public_key = 2;
}

message Certificate {
  CertificateContent content = 1;
  bytes controller_signature = 3;
}

message GetArtefactDiffsRequest {
  repeated string client_digests = 1;
}
message GetArtefactDiffsResponse {
  repeated string missing_digests = 1;
  // Artefacts that the client already has, and their path+executable status.
  repeated DeploymentArtefact client_artefacts = 2;
}

message UploadArtefactRequest {
  bytes content = 1;
}
message UploadArtefactResponse {
  bytes digest = 2;
}

message DeploymentArtefact {
  string digest = 1;
  string path = 2;
  bool executable = 3;
}

message CreateDeploymentRequest {
  schema.Module schema = 1;
  repeated DeploymentArtefact artefacts = 2;
}
message CreateDeploymentResponse {
  string deployment_key = 1;
  // Currently active deployment for this module, if any.
  optional string active_deployment_key = 2;
}

message GetDeploymentArtefactsRequest {
  string deployment_key = 1;
  repeated DeploymentArtefact have_artefacts = 2;
}
message GetDeploymentArtefactsResponse {
  DeploymentArtefact artefact = 1;
  bytes chunk = 2;
}

message GetDeploymentRequest {
  string deployment_key = 1;
}
message GetDeploymentResponse {
  schema.Module schema = 1;
  repeated DeploymentArtefact artefacts = 2;
}

message RegisterRunnerRequest {
  string key = 1;
  string endpoint = 2;
  string deployment = 3;
  google.protobuf.Struct labels = 5;
}

message RegisterRunnerResponse {}

message UpdateDeployRequest {
  string deployment_key = 1;
  optional int32 min_replicas = 2;
  optional string endpoint = 3;
}
message UpdateDeployResponse {}

message ReplaceDeployRequest {
  string deployment_key = 1;
  int32 min_replicas = 2;
}
message ReplaceDeployResponse {}

message StreamDeploymentLogsRequest {
  string deployment_key = 1;
  optional string request_key = 2;
  google.protobuf.Timestamp time_stamp = 3;
  int32 log_level = 4;
  map<string, string> attributes = 5;
  string message = 6;
  optional string error = 7;
}
message StreamDeploymentLogsResponse {}

message StatusRequest {}
message StatusResponse {
  message Controller {
    string key = 1;
    string endpoint = 2;
    string version = 3;
  }
  repeated Controller controllers = 1;

  message Runner {
    string key = 1;
    string endpoint = 2;
    optional string deployment = 3;
    google.protobuf.Struct labels = 4;
  }
  repeated Runner runners = 2;

  message Deployment {
    string key = 1;
    string language = 2;
    string name = 3;
    int32 min_replicas = 4;
    int32 replicas = 7;
    google.protobuf.Struct labels = 5;
    schema.Module schema = 6;
  }
  repeated Deployment deployments = 3;

  message Route {
    string module = 1;
    string deployment = 2;
    string endpoint = 3;
  }
  repeated Route routes = 5;
}

message ProcessListRequest {}
message ProcessListResponse {
  message ProcessRunner {
    string key = 1;
    string endpoint = 2;
    google.protobuf.Struct labels = 3;
  }
  message Process {
    string deployment = 1;
    int32 min_replicas = 2;
    google.protobuf.Struct labels = 3;
    optional ProcessRunner runner = 4;
  }
  repeated Process processes = 1;
}

message ResetSubscriptionRequest {
  schema.Ref subscription = 1;
}
message ResetSubscriptionResponse {}

service ControllerService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // List "processes" running on the cluster.
  rpc ProcessList(ProcessListRequest) returns (ProcessListResponse);

  rpc Status(StatusRequest) returns (StatusResponse);

  // Runner will initially call this to have the controller sign its public key.
  rpc GetCertification(GetCertificationRequest) returns (GetCertificationResponse);

  // Get list of artefacts that differ between the server and client.
  rpc GetArtefactDiffs(GetArtefactDiffsRequest) returns (GetArtefactDiffsResponse);

  // Upload an artefact to the server.
  rpc UploadArtefact(UploadArtefactRequest) returns (UploadArtefactResponse);

  // Create a deployment.
  rpc CreateDeployment(CreateDeploymentRequest) returns (CreateDeploymentResponse);

  // Get the schema and artefact metadata for a deployment.
  rpc GetDeployment(GetDeploymentRequest) returns (GetDeploymentResponse);

  // Stream deployment artefacts from the server.
  //
  // Each artefact is streamed one after the other as a sequence of max 1MB
  // chunks.
  rpc GetDeploymentArtefacts(GetDeploymentArtefactsRequest) returns (stream GetDeploymentArtefactsResponse);

  // Register a Runner with the Controller.
  //
  // Each runner issue a RegisterRunnerRequest to the ControllerService
  // every 10 seconds to maintain its heartbeat.
  rpc RegisterRunner(stream RegisterRunnerRequest) returns (RegisterRunnerResponse);

  // Update an existing deployment.
  rpc UpdateDeploy(UpdateDeployRequest) returns (UpdateDeployResponse);

  // Gradually replace an existing deployment with a new one.
  //
  // If a deployment already exists for the module of the new deployment,
  // it will be scaled down and replaced by the new one.
  rpc ReplaceDeploy(ReplaceDeployRequest) returns (ReplaceDeployResponse);

  // Stream logs from a deployment
  rpc StreamDeploymentLogs(stream StreamDeploymentLogsRequest) returns (StreamDeploymentLogsResponse);

  // Reset the cursor for a subscription to the head of its topic.
  rpc ResetSubscription(ResetSubscriptionRequest) returns (ResetSubscriptionResponse);
}
