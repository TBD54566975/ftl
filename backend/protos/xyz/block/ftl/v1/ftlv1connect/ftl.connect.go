// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v1/ftl.proto

package ftlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// VerbServiceName is the fully-qualified name of the VerbService service.
	VerbServiceName = "xyz.block.ftl.v1.VerbService"
	// ControllerServiceName is the fully-qualified name of the ControllerService service.
	ControllerServiceName = "xyz.block.ftl.v1.ControllerService"
	// RunnerServiceName is the fully-qualified name of the RunnerService service.
	RunnerServiceName = "xyz.block.ftl.v1.RunnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VerbServicePingProcedure is the fully-qualified name of the VerbService's Ping RPC.
	VerbServicePingProcedure = "/xyz.block.ftl.v1.VerbService/Ping"
	// VerbServiceGetModuleContextProcedure is the fully-qualified name of the VerbService's
	// GetModuleContext RPC.
	VerbServiceGetModuleContextProcedure = "/xyz.block.ftl.v1.VerbService/GetModuleContext"
	// VerbServiceAcquireLeaseProcedure is the fully-qualified name of the VerbService's AcquireLease
	// RPC.
	VerbServiceAcquireLeaseProcedure = "/xyz.block.ftl.v1.VerbService/AcquireLease"
	// VerbServiceCallProcedure is the fully-qualified name of the VerbService's Call RPC.
	VerbServiceCallProcedure = "/xyz.block.ftl.v1.VerbService/Call"
	// ControllerServicePingProcedure is the fully-qualified name of the ControllerService's Ping RPC.
	ControllerServicePingProcedure = "/xyz.block.ftl.v1.ControllerService/Ping"
	// ControllerServiceProcessListProcedure is the fully-qualified name of the ControllerService's
	// ProcessList RPC.
	ControllerServiceProcessListProcedure = "/xyz.block.ftl.v1.ControllerService/ProcessList"
	// ControllerServiceStatusProcedure is the fully-qualified name of the ControllerService's Status
	// RPC.
	ControllerServiceStatusProcedure = "/xyz.block.ftl.v1.ControllerService/Status"
	// ControllerServiceGetArtefactDiffsProcedure is the fully-qualified name of the ControllerService's
	// GetArtefactDiffs RPC.
	ControllerServiceGetArtefactDiffsProcedure = "/xyz.block.ftl.v1.ControllerService/GetArtefactDiffs"
	// ControllerServiceUploadArtefactProcedure is the fully-qualified name of the ControllerService's
	// UploadArtefact RPC.
	ControllerServiceUploadArtefactProcedure = "/xyz.block.ftl.v1.ControllerService/UploadArtefact"
	// ControllerServiceCreateDeploymentProcedure is the fully-qualified name of the ControllerService's
	// CreateDeployment RPC.
	ControllerServiceCreateDeploymentProcedure = "/xyz.block.ftl.v1.ControllerService/CreateDeployment"
	// ControllerServiceGetDeploymentProcedure is the fully-qualified name of the ControllerService's
	// GetDeployment RPC.
	ControllerServiceGetDeploymentProcedure = "/xyz.block.ftl.v1.ControllerService/GetDeployment"
	// ControllerServiceGetDeploymentArtefactsProcedure is the fully-qualified name of the
	// ControllerService's GetDeploymentArtefacts RPC.
	ControllerServiceGetDeploymentArtefactsProcedure = "/xyz.block.ftl.v1.ControllerService/GetDeploymentArtefacts"
	// ControllerServiceRegisterRunnerProcedure is the fully-qualified name of the ControllerService's
	// RegisterRunner RPC.
	ControllerServiceRegisterRunnerProcedure = "/xyz.block.ftl.v1.ControllerService/RegisterRunner"
	// ControllerServiceUpdateDeployProcedure is the fully-qualified name of the ControllerService's
	// UpdateDeploy RPC.
	ControllerServiceUpdateDeployProcedure = "/xyz.block.ftl.v1.ControllerService/UpdateDeploy"
	// ControllerServiceReplaceDeployProcedure is the fully-qualified name of the ControllerService's
	// ReplaceDeploy RPC.
	ControllerServiceReplaceDeployProcedure = "/xyz.block.ftl.v1.ControllerService/ReplaceDeploy"
	// ControllerServiceStreamDeploymentLogsProcedure is the fully-qualified name of the
	// ControllerService's StreamDeploymentLogs RPC.
	ControllerServiceStreamDeploymentLogsProcedure = "/xyz.block.ftl.v1.ControllerService/StreamDeploymentLogs"
	// ControllerServiceGetSchemaProcedure is the fully-qualified name of the ControllerService's
	// GetSchema RPC.
	ControllerServiceGetSchemaProcedure = "/xyz.block.ftl.v1.ControllerService/GetSchema"
	// ControllerServicePullSchemaProcedure is the fully-qualified name of the ControllerService's
	// PullSchema RPC.
	ControllerServicePullSchemaProcedure = "/xyz.block.ftl.v1.ControllerService/PullSchema"
	// ControllerServiceGetVerbsProcedure is the fully-qualified name of the ControllerService's
	// GetVerbs RPC.
	ControllerServiceGetVerbsProcedure = "/xyz.block.ftl.v1.ControllerService/GetVerbs"
	// RunnerServicePingProcedure is the fully-qualified name of the RunnerService's Ping RPC.
	RunnerServicePingProcedure = "/xyz.block.ftl.v1.RunnerService/Ping"
	// RunnerServiceReserveProcedure is the fully-qualified name of the RunnerService's Reserve RPC.
	RunnerServiceReserveProcedure = "/xyz.block.ftl.v1.RunnerService/Reserve"
	// RunnerServiceDeployProcedure is the fully-qualified name of the RunnerService's Deploy RPC.
	RunnerServiceDeployProcedure = "/xyz.block.ftl.v1.RunnerService/Deploy"
	// RunnerServiceTerminateProcedure is the fully-qualified name of the RunnerService's Terminate RPC.
	RunnerServiceTerminateProcedure = "/xyz.block.ftl.v1.RunnerService/Terminate"
)

// VerbServiceClient is a client for the xyz.block.ftl.v1.VerbService service.
type VerbServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Get configuration state for the module
	GetModuleContext(context.Context, *connect.Request[v1.ModuleContextRequest]) (*connect.Response[v1.ModuleContextResponse], error)
	// Acquire (and renew) a lease for a deployment.
	//
	// Returns ResourceExhausted if the lease is held.
	AcquireLease(context.Context) *connect.BidiStreamForClient[v1.AcquireLeaseRequest, v1.AcquireLeaseResponse]
	// Issue a synchronous call to a Verb.
	Call(context.Context, *connect.Request[v1.CallRequest]) (*connect.Response[v1.CallResponse], error)
}

// NewVerbServiceClient constructs a client for the xyz.block.ftl.v1.VerbService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVerbServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VerbServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &verbServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+VerbServicePingProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getModuleContext: connect.NewClient[v1.ModuleContextRequest, v1.ModuleContextResponse](
			httpClient,
			baseURL+VerbServiceGetModuleContextProcedure,
			opts...,
		),
		acquireLease: connect.NewClient[v1.AcquireLeaseRequest, v1.AcquireLeaseResponse](
			httpClient,
			baseURL+VerbServiceAcquireLeaseProcedure,
			opts...,
		),
		call: connect.NewClient[v1.CallRequest, v1.CallResponse](
			httpClient,
			baseURL+VerbServiceCallProcedure,
			opts...,
		),
	}
}

// verbServiceClient implements VerbServiceClient.
type verbServiceClient struct {
	ping             *connect.Client[v1.PingRequest, v1.PingResponse]
	getModuleContext *connect.Client[v1.ModuleContextRequest, v1.ModuleContextResponse]
	acquireLease     *connect.Client[v1.AcquireLeaseRequest, v1.AcquireLeaseResponse]
	call             *connect.Client[v1.CallRequest, v1.CallResponse]
}

// Ping calls xyz.block.ftl.v1.VerbService.Ping.
func (c *verbServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetModuleContext calls xyz.block.ftl.v1.VerbService.GetModuleContext.
func (c *verbServiceClient) GetModuleContext(ctx context.Context, req *connect.Request[v1.ModuleContextRequest]) (*connect.Response[v1.ModuleContextResponse], error) {
	return c.getModuleContext.CallUnary(ctx, req)
}

// AcquireLease calls xyz.block.ftl.v1.VerbService.AcquireLease.
func (c *verbServiceClient) AcquireLease(ctx context.Context) *connect.BidiStreamForClient[v1.AcquireLeaseRequest, v1.AcquireLeaseResponse] {
	return c.acquireLease.CallBidiStream(ctx)
}

// Call calls xyz.block.ftl.v1.VerbService.Call.
func (c *verbServiceClient) Call(ctx context.Context, req *connect.Request[v1.CallRequest]) (*connect.Response[v1.CallResponse], error) {
	return c.call.CallUnary(ctx, req)
}

// VerbServiceHandler is an implementation of the xyz.block.ftl.v1.VerbService service.
type VerbServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Get configuration state for the module
	GetModuleContext(context.Context, *connect.Request[v1.ModuleContextRequest]) (*connect.Response[v1.ModuleContextResponse], error)
	// Acquire (and renew) a lease for a deployment.
	//
	// Returns ResourceExhausted if the lease is held.
	AcquireLease(context.Context, *connect.BidiStream[v1.AcquireLeaseRequest, v1.AcquireLeaseResponse]) error
	// Issue a synchronous call to a Verb.
	Call(context.Context, *connect.Request[v1.CallRequest]) (*connect.Response[v1.CallResponse], error)
}

// NewVerbServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVerbServiceHandler(svc VerbServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	verbServicePingHandler := connect.NewUnaryHandler(
		VerbServicePingProcedure,
		svc.Ping,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	verbServiceGetModuleContextHandler := connect.NewUnaryHandler(
		VerbServiceGetModuleContextProcedure,
		svc.GetModuleContext,
		opts...,
	)
	verbServiceAcquireLeaseHandler := connect.NewBidiStreamHandler(
		VerbServiceAcquireLeaseProcedure,
		svc.AcquireLease,
		opts...,
	)
	verbServiceCallHandler := connect.NewUnaryHandler(
		VerbServiceCallProcedure,
		svc.Call,
		opts...,
	)
	return "/xyz.block.ftl.v1.VerbService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VerbServicePingProcedure:
			verbServicePingHandler.ServeHTTP(w, r)
		case VerbServiceGetModuleContextProcedure:
			verbServiceGetModuleContextHandler.ServeHTTP(w, r)
		case VerbServiceAcquireLeaseProcedure:
			verbServiceAcquireLeaseHandler.ServeHTTP(w, r)
		case VerbServiceCallProcedure:
			verbServiceCallHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVerbServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVerbServiceHandler struct{}

func (UnimplementedVerbServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.Ping is not implemented"))
}

func (UnimplementedVerbServiceHandler) GetModuleContext(context.Context, *connect.Request[v1.ModuleContextRequest]) (*connect.Response[v1.ModuleContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.GetModuleContext is not implemented"))
}

func (UnimplementedVerbServiceHandler) AcquireLease(context.Context, *connect.BidiStream[v1.AcquireLeaseRequest, v1.AcquireLeaseResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.AcquireLease is not implemented"))
}

func (UnimplementedVerbServiceHandler) Call(context.Context, *connect.Request[v1.CallRequest]) (*connect.Response[v1.CallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.VerbService.Call is not implemented"))
}

// ControllerServiceClient is a client for the xyz.block.ftl.v1.ControllerService service.
type ControllerServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// List "processes" running on the cluster.
	ProcessList(context.Context, *connect.Request[v1.ProcessListRequest]) (*connect.Response[v1.ProcessListResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *connect.Request[v1.GetArtefactDiffsRequest]) (*connect.Response[v1.GetArtefactDiffsResponse], error)
	// Upload an artefact to the server.
	UploadArtefact(context.Context, *connect.Request[v1.UploadArtefactRequest]) (*connect.Response[v1.UploadArtefactResponse], error)
	// Create a deployment.
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// Get the schema and artefact metadata for a deployment.
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// Stream deployment artefacts from the server.
	//
	// Each artefact is streamed one after the other as a sequence of max 1MB
	// chunks.
	GetDeploymentArtefacts(context.Context, *connect.Request[v1.GetDeploymentArtefactsRequest]) (*connect.ServerStreamForClient[v1.GetDeploymentArtefactsResponse], error)
	// Register a Runner with the Controller.
	//
	// Each runner issue a RegisterRunnerRequest to the ControllerService
	// every 10 seconds to maintain its heartbeat.
	RegisterRunner(context.Context) *connect.ClientStreamForClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse]
	// Update an existing deployment.
	UpdateDeploy(context.Context, *connect.Request[v1.UpdateDeployRequest]) (*connect.Response[v1.UpdateDeployResponse], error)
	// Gradually replace an existing deployment with a new one.
	//
	// If a deployment already exists for the module of the new deployment,
	// it will be scaled down and replaced by the new one.
	ReplaceDeploy(context.Context, *connect.Request[v1.ReplaceDeployRequest]) (*connect.Response[v1.ReplaceDeployResponse], error)
	// Stream logs from a deployment
	StreamDeploymentLogs(context.Context) *connect.ClientStreamForClient[v1.StreamDeploymentLogsRequest, v1.StreamDeploymentLogsResponse]
	// Get the full schema.
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	// Pull schema changes from the Controller.
	//
	// Note that if there are no deployments this will block indefinitely, making it unsuitable for
	// just retrieving the schema. Use GetSchema for that.
	PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest]) (*connect.ServerStreamForClient[v1.PullSchemaResponse], error)
	// Returns a map of verbs by module name
	GetVerbs(context.Context, *connect.Request[v1.VerbsRequest]) (*connect.Response[v1.VerbsResponse], error)
}

// NewControllerServiceClient constructs a client for the xyz.block.ftl.v1.ControllerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &controllerServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+ControllerServicePingProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		processList: connect.NewClient[v1.ProcessListRequest, v1.ProcessListResponse](
			httpClient,
			baseURL+ControllerServiceProcessListProcedure,
			opts...,
		),
		status: connect.NewClient[v1.StatusRequest, v1.StatusResponse](
			httpClient,
			baseURL+ControllerServiceStatusProcedure,
			opts...,
		),
		getArtefactDiffs: connect.NewClient[v1.GetArtefactDiffsRequest, v1.GetArtefactDiffsResponse](
			httpClient,
			baseURL+ControllerServiceGetArtefactDiffsProcedure,
			opts...,
		),
		uploadArtefact: connect.NewClient[v1.UploadArtefactRequest, v1.UploadArtefactResponse](
			httpClient,
			baseURL+ControllerServiceUploadArtefactProcedure,
			opts...,
		),
		createDeployment: connect.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+ControllerServiceCreateDeploymentProcedure,
			opts...,
		),
		getDeployment: connect.NewClient[v1.GetDeploymentRequest, v1.GetDeploymentResponse](
			httpClient,
			baseURL+ControllerServiceGetDeploymentProcedure,
			opts...,
		),
		getDeploymentArtefacts: connect.NewClient[v1.GetDeploymentArtefactsRequest, v1.GetDeploymentArtefactsResponse](
			httpClient,
			baseURL+ControllerServiceGetDeploymentArtefactsProcedure,
			opts...,
		),
		registerRunner: connect.NewClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse](
			httpClient,
			baseURL+ControllerServiceRegisterRunnerProcedure,
			opts...,
		),
		updateDeploy: connect.NewClient[v1.UpdateDeployRequest, v1.UpdateDeployResponse](
			httpClient,
			baseURL+ControllerServiceUpdateDeployProcedure,
			opts...,
		),
		replaceDeploy: connect.NewClient[v1.ReplaceDeployRequest, v1.ReplaceDeployResponse](
			httpClient,
			baseURL+ControllerServiceReplaceDeployProcedure,
			opts...,
		),
		streamDeploymentLogs: connect.NewClient[v1.StreamDeploymentLogsRequest, v1.StreamDeploymentLogsResponse](
			httpClient,
			baseURL+ControllerServiceStreamDeploymentLogsProcedure,
			opts...,
		),
		getSchema: connect.NewClient[v1.GetSchemaRequest, v1.GetSchemaResponse](
			httpClient,
			baseURL+ControllerServiceGetSchemaProcedure,
			opts...,
		),
		pullSchema: connect.NewClient[v1.PullSchemaRequest, v1.PullSchemaResponse](
			httpClient,
			baseURL+ControllerServicePullSchemaProcedure,
			opts...,
		),
		getVerbs: connect.NewClient[v1.VerbsRequest, v1.VerbsResponse](
			httpClient,
			baseURL+ControllerServiceGetVerbsProcedure,
			opts...,
		),
	}
}

// controllerServiceClient implements ControllerServiceClient.
type controllerServiceClient struct {
	ping                   *connect.Client[v1.PingRequest, v1.PingResponse]
	processList            *connect.Client[v1.ProcessListRequest, v1.ProcessListResponse]
	status                 *connect.Client[v1.StatusRequest, v1.StatusResponse]
	getArtefactDiffs       *connect.Client[v1.GetArtefactDiffsRequest, v1.GetArtefactDiffsResponse]
	uploadArtefact         *connect.Client[v1.UploadArtefactRequest, v1.UploadArtefactResponse]
	createDeployment       *connect.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	getDeployment          *connect.Client[v1.GetDeploymentRequest, v1.GetDeploymentResponse]
	getDeploymentArtefacts *connect.Client[v1.GetDeploymentArtefactsRequest, v1.GetDeploymentArtefactsResponse]
	registerRunner         *connect.Client[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse]
	updateDeploy           *connect.Client[v1.UpdateDeployRequest, v1.UpdateDeployResponse]
	replaceDeploy          *connect.Client[v1.ReplaceDeployRequest, v1.ReplaceDeployResponse]
	streamDeploymentLogs   *connect.Client[v1.StreamDeploymentLogsRequest, v1.StreamDeploymentLogsResponse]
	getSchema              *connect.Client[v1.GetSchemaRequest, v1.GetSchemaResponse]
	pullSchema             *connect.Client[v1.PullSchemaRequest, v1.PullSchemaResponse]
	getVerbs               *connect.Client[v1.VerbsRequest, v1.VerbsResponse]
}

// Ping calls xyz.block.ftl.v1.ControllerService.Ping.
func (c *controllerServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ProcessList calls xyz.block.ftl.v1.ControllerService.ProcessList.
func (c *controllerServiceClient) ProcessList(ctx context.Context, req *connect.Request[v1.ProcessListRequest]) (*connect.Response[v1.ProcessListResponse], error) {
	return c.processList.CallUnary(ctx, req)
}

// Status calls xyz.block.ftl.v1.ControllerService.Status.
func (c *controllerServiceClient) Status(ctx context.Context, req *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// GetArtefactDiffs calls xyz.block.ftl.v1.ControllerService.GetArtefactDiffs.
func (c *controllerServiceClient) GetArtefactDiffs(ctx context.Context, req *connect.Request[v1.GetArtefactDiffsRequest]) (*connect.Response[v1.GetArtefactDiffsResponse], error) {
	return c.getArtefactDiffs.CallUnary(ctx, req)
}

// UploadArtefact calls xyz.block.ftl.v1.ControllerService.UploadArtefact.
func (c *controllerServiceClient) UploadArtefact(ctx context.Context, req *connect.Request[v1.UploadArtefactRequest]) (*connect.Response[v1.UploadArtefactResponse], error) {
	return c.uploadArtefact.CallUnary(ctx, req)
}

// CreateDeployment calls xyz.block.ftl.v1.ControllerService.CreateDeployment.
func (c *controllerServiceClient) CreateDeployment(ctx context.Context, req *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// GetDeployment calls xyz.block.ftl.v1.ControllerService.GetDeployment.
func (c *controllerServiceClient) GetDeployment(ctx context.Context, req *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// GetDeploymentArtefacts calls xyz.block.ftl.v1.ControllerService.GetDeploymentArtefacts.
func (c *controllerServiceClient) GetDeploymentArtefacts(ctx context.Context, req *connect.Request[v1.GetDeploymentArtefactsRequest]) (*connect.ServerStreamForClient[v1.GetDeploymentArtefactsResponse], error) {
	return c.getDeploymentArtefacts.CallServerStream(ctx, req)
}

// RegisterRunner calls xyz.block.ftl.v1.ControllerService.RegisterRunner.
func (c *controllerServiceClient) RegisterRunner(ctx context.Context) *connect.ClientStreamForClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse] {
	return c.registerRunner.CallClientStream(ctx)
}

// UpdateDeploy calls xyz.block.ftl.v1.ControllerService.UpdateDeploy.
func (c *controllerServiceClient) UpdateDeploy(ctx context.Context, req *connect.Request[v1.UpdateDeployRequest]) (*connect.Response[v1.UpdateDeployResponse], error) {
	return c.updateDeploy.CallUnary(ctx, req)
}

// ReplaceDeploy calls xyz.block.ftl.v1.ControllerService.ReplaceDeploy.
func (c *controllerServiceClient) ReplaceDeploy(ctx context.Context, req *connect.Request[v1.ReplaceDeployRequest]) (*connect.Response[v1.ReplaceDeployResponse], error) {
	return c.replaceDeploy.CallUnary(ctx, req)
}

// StreamDeploymentLogs calls xyz.block.ftl.v1.ControllerService.StreamDeploymentLogs.
func (c *controllerServiceClient) StreamDeploymentLogs(ctx context.Context) *connect.ClientStreamForClient[v1.StreamDeploymentLogsRequest, v1.StreamDeploymentLogsResponse] {
	return c.streamDeploymentLogs.CallClientStream(ctx)
}

// GetSchema calls xyz.block.ftl.v1.ControllerService.GetSchema.
func (c *controllerServiceClient) GetSchema(ctx context.Context, req *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// PullSchema calls xyz.block.ftl.v1.ControllerService.PullSchema.
func (c *controllerServiceClient) PullSchema(ctx context.Context, req *connect.Request[v1.PullSchemaRequest]) (*connect.ServerStreamForClient[v1.PullSchemaResponse], error) {
	return c.pullSchema.CallServerStream(ctx, req)
}

// GetVerbs calls xyz.block.ftl.v1.ControllerService.GetVerbs.
func (c *controllerServiceClient) GetVerbs(ctx context.Context, req *connect.Request[v1.VerbsRequest]) (*connect.Response[v1.VerbsResponse], error) {
	return c.getVerbs.CallUnary(ctx, req)
}

// ControllerServiceHandler is an implementation of the xyz.block.ftl.v1.ControllerService service.
type ControllerServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// List "processes" running on the cluster.
	ProcessList(context.Context, *connect.Request[v1.ProcessListRequest]) (*connect.Response[v1.ProcessListResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *connect.Request[v1.GetArtefactDiffsRequest]) (*connect.Response[v1.GetArtefactDiffsResponse], error)
	// Upload an artefact to the server.
	UploadArtefact(context.Context, *connect.Request[v1.UploadArtefactRequest]) (*connect.Response[v1.UploadArtefactResponse], error)
	// Create a deployment.
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// Get the schema and artefact metadata for a deployment.
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// Stream deployment artefacts from the server.
	//
	// Each artefact is streamed one after the other as a sequence of max 1MB
	// chunks.
	GetDeploymentArtefacts(context.Context, *connect.Request[v1.GetDeploymentArtefactsRequest], *connect.ServerStream[v1.GetDeploymentArtefactsResponse]) error
	// Register a Runner with the Controller.
	//
	// Each runner issue a RegisterRunnerRequest to the ControllerService
	// every 10 seconds to maintain its heartbeat.
	RegisterRunner(context.Context, *connect.ClientStream[v1.RegisterRunnerRequest]) (*connect.Response[v1.RegisterRunnerResponse], error)
	// Update an existing deployment.
	UpdateDeploy(context.Context, *connect.Request[v1.UpdateDeployRequest]) (*connect.Response[v1.UpdateDeployResponse], error)
	// Gradually replace an existing deployment with a new one.
	//
	// If a deployment already exists for the module of the new deployment,
	// it will be scaled down and replaced by the new one.
	ReplaceDeploy(context.Context, *connect.Request[v1.ReplaceDeployRequest]) (*connect.Response[v1.ReplaceDeployResponse], error)
	// Stream logs from a deployment
	StreamDeploymentLogs(context.Context, *connect.ClientStream[v1.StreamDeploymentLogsRequest]) (*connect.Response[v1.StreamDeploymentLogsResponse], error)
	// Get the full schema.
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	// Pull schema changes from the Controller.
	//
	// Note that if there are no deployments this will block indefinitely, making it unsuitable for
	// just retrieving the schema. Use GetSchema for that.
	PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest], *connect.ServerStream[v1.PullSchemaResponse]) error
	// Returns a map of verbs by module name
	GetVerbs(context.Context, *connect.Request[v1.VerbsRequest]) (*connect.Response[v1.VerbsResponse], error)
}

// NewControllerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerServiceHandler(svc ControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerServicePingHandler := connect.NewUnaryHandler(
		ControllerServicePingProcedure,
		svc.Ping,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceProcessListHandler := connect.NewUnaryHandler(
		ControllerServiceProcessListProcedure,
		svc.ProcessList,
		opts...,
	)
	controllerServiceStatusHandler := connect.NewUnaryHandler(
		ControllerServiceStatusProcedure,
		svc.Status,
		opts...,
	)
	controllerServiceGetArtefactDiffsHandler := connect.NewUnaryHandler(
		ControllerServiceGetArtefactDiffsProcedure,
		svc.GetArtefactDiffs,
		opts...,
	)
	controllerServiceUploadArtefactHandler := connect.NewUnaryHandler(
		ControllerServiceUploadArtefactProcedure,
		svc.UploadArtefact,
		opts...,
	)
	controllerServiceCreateDeploymentHandler := connect.NewUnaryHandler(
		ControllerServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		opts...,
	)
	controllerServiceGetDeploymentHandler := connect.NewUnaryHandler(
		ControllerServiceGetDeploymentProcedure,
		svc.GetDeployment,
		opts...,
	)
	controllerServiceGetDeploymentArtefactsHandler := connect.NewServerStreamHandler(
		ControllerServiceGetDeploymentArtefactsProcedure,
		svc.GetDeploymentArtefacts,
		opts...,
	)
	controllerServiceRegisterRunnerHandler := connect.NewClientStreamHandler(
		ControllerServiceRegisterRunnerProcedure,
		svc.RegisterRunner,
		opts...,
	)
	controllerServiceUpdateDeployHandler := connect.NewUnaryHandler(
		ControllerServiceUpdateDeployProcedure,
		svc.UpdateDeploy,
		opts...,
	)
	controllerServiceReplaceDeployHandler := connect.NewUnaryHandler(
		ControllerServiceReplaceDeployProcedure,
		svc.ReplaceDeploy,
		opts...,
	)
	controllerServiceStreamDeploymentLogsHandler := connect.NewClientStreamHandler(
		ControllerServiceStreamDeploymentLogsProcedure,
		svc.StreamDeploymentLogs,
		opts...,
	)
	controllerServiceGetSchemaHandler := connect.NewUnaryHandler(
		ControllerServiceGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	)
	controllerServicePullSchemaHandler := connect.NewServerStreamHandler(
		ControllerServicePullSchemaProcedure,
		svc.PullSchema,
		opts...,
	)
	controllerServiceGetVerbsHandler := connect.NewUnaryHandler(
		ControllerServiceGetVerbsProcedure,
		svc.GetVerbs,
		opts...,
	)
	return "/xyz.block.ftl.v1.ControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerServicePingProcedure:
			controllerServicePingHandler.ServeHTTP(w, r)
		case ControllerServiceProcessListProcedure:
			controllerServiceProcessListHandler.ServeHTTP(w, r)
		case ControllerServiceStatusProcedure:
			controllerServiceStatusHandler.ServeHTTP(w, r)
		case ControllerServiceGetArtefactDiffsProcedure:
			controllerServiceGetArtefactDiffsHandler.ServeHTTP(w, r)
		case ControllerServiceUploadArtefactProcedure:
			controllerServiceUploadArtefactHandler.ServeHTTP(w, r)
		case ControllerServiceCreateDeploymentProcedure:
			controllerServiceCreateDeploymentHandler.ServeHTTP(w, r)
		case ControllerServiceGetDeploymentProcedure:
			controllerServiceGetDeploymentHandler.ServeHTTP(w, r)
		case ControllerServiceGetDeploymentArtefactsProcedure:
			controllerServiceGetDeploymentArtefactsHandler.ServeHTTP(w, r)
		case ControllerServiceRegisterRunnerProcedure:
			controllerServiceRegisterRunnerHandler.ServeHTTP(w, r)
		case ControllerServiceUpdateDeployProcedure:
			controllerServiceUpdateDeployHandler.ServeHTTP(w, r)
		case ControllerServiceReplaceDeployProcedure:
			controllerServiceReplaceDeployHandler.ServeHTTP(w, r)
		case ControllerServiceStreamDeploymentLogsProcedure:
			controllerServiceStreamDeploymentLogsHandler.ServeHTTP(w, r)
		case ControllerServiceGetSchemaProcedure:
			controllerServiceGetSchemaHandler.ServeHTTP(w, r)
		case ControllerServicePullSchemaProcedure:
			controllerServicePullSchemaHandler.ServeHTTP(w, r)
		case ControllerServiceGetVerbsProcedure:
			controllerServiceGetVerbsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerServiceHandler struct{}

func (UnimplementedControllerServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.Ping is not implemented"))
}

func (UnimplementedControllerServiceHandler) ProcessList(context.Context, *connect.Request[v1.ProcessListRequest]) (*connect.Response[v1.ProcessListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.ProcessList is not implemented"))
}

func (UnimplementedControllerServiceHandler) Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.Status is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetArtefactDiffs(context.Context, *connect.Request[v1.GetArtefactDiffsRequest]) (*connect.Response[v1.GetArtefactDiffsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.GetArtefactDiffs is not implemented"))
}

func (UnimplementedControllerServiceHandler) UploadArtefact(context.Context, *connect.Request[v1.UploadArtefactRequest]) (*connect.Response[v1.UploadArtefactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.UploadArtefact is not implemented"))
}

func (UnimplementedControllerServiceHandler) CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.CreateDeployment is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.GetDeployment is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetDeploymentArtefacts(context.Context, *connect.Request[v1.GetDeploymentArtefactsRequest], *connect.ServerStream[v1.GetDeploymentArtefactsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.GetDeploymentArtefacts is not implemented"))
}

func (UnimplementedControllerServiceHandler) RegisterRunner(context.Context, *connect.ClientStream[v1.RegisterRunnerRequest]) (*connect.Response[v1.RegisterRunnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.RegisterRunner is not implemented"))
}

func (UnimplementedControllerServiceHandler) UpdateDeploy(context.Context, *connect.Request[v1.UpdateDeployRequest]) (*connect.Response[v1.UpdateDeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.UpdateDeploy is not implemented"))
}

func (UnimplementedControllerServiceHandler) ReplaceDeploy(context.Context, *connect.Request[v1.ReplaceDeployRequest]) (*connect.Response[v1.ReplaceDeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.ReplaceDeploy is not implemented"))
}

func (UnimplementedControllerServiceHandler) StreamDeploymentLogs(context.Context, *connect.ClientStream[v1.StreamDeploymentLogsRequest]) (*connect.Response[v1.StreamDeploymentLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.StreamDeploymentLogs is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.GetSchema is not implemented"))
}

func (UnimplementedControllerServiceHandler) PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest], *connect.ServerStream[v1.PullSchemaResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.PullSchema is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetVerbs(context.Context, *connect.Request[v1.VerbsRequest]) (*connect.Response[v1.VerbsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.GetVerbs is not implemented"))
}

// RunnerServiceClient is a client for the xyz.block.ftl.v1.RunnerService service.
type RunnerServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Reserve synchronously reserves a Runner for a deployment but does nothing else.
	Reserve(context.Context, *connect.Request[v1.ReserveRequest]) (*connect.Response[v1.ReserveResponse], error)
	// Initiate a deployment on this Runner.
	Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error)
	// Terminate the deployment on this Runner.
	Terminate(context.Context, *connect.Request[v1.TerminateRequest]) (*connect.Response[v1.RegisterRunnerRequest], error)
}

// NewRunnerServiceClient constructs a client for the xyz.block.ftl.v1.RunnerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runnerServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+RunnerServicePingProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		reserve: connect.NewClient[v1.ReserveRequest, v1.ReserveResponse](
			httpClient,
			baseURL+RunnerServiceReserveProcedure,
			opts...,
		),
		deploy: connect.NewClient[v1.DeployRequest, v1.DeployResponse](
			httpClient,
			baseURL+RunnerServiceDeployProcedure,
			opts...,
		),
		terminate: connect.NewClient[v1.TerminateRequest, v1.RegisterRunnerRequest](
			httpClient,
			baseURL+RunnerServiceTerminateProcedure,
			opts...,
		),
	}
}

// runnerServiceClient implements RunnerServiceClient.
type runnerServiceClient struct {
	ping      *connect.Client[v1.PingRequest, v1.PingResponse]
	reserve   *connect.Client[v1.ReserveRequest, v1.ReserveResponse]
	deploy    *connect.Client[v1.DeployRequest, v1.DeployResponse]
	terminate *connect.Client[v1.TerminateRequest, v1.RegisterRunnerRequest]
}

// Ping calls xyz.block.ftl.v1.RunnerService.Ping.
func (c *runnerServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Reserve calls xyz.block.ftl.v1.RunnerService.Reserve.
func (c *runnerServiceClient) Reserve(ctx context.Context, req *connect.Request[v1.ReserveRequest]) (*connect.Response[v1.ReserveResponse], error) {
	return c.reserve.CallUnary(ctx, req)
}

// Deploy calls xyz.block.ftl.v1.RunnerService.Deploy.
func (c *runnerServiceClient) Deploy(ctx context.Context, req *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error) {
	return c.deploy.CallUnary(ctx, req)
}

// Terminate calls xyz.block.ftl.v1.RunnerService.Terminate.
func (c *runnerServiceClient) Terminate(ctx context.Context, req *connect.Request[v1.TerminateRequest]) (*connect.Response[v1.RegisterRunnerRequest], error) {
	return c.terminate.CallUnary(ctx, req)
}

// RunnerServiceHandler is an implementation of the xyz.block.ftl.v1.RunnerService service.
type RunnerServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Reserve synchronously reserves a Runner for a deployment but does nothing else.
	Reserve(context.Context, *connect.Request[v1.ReserveRequest]) (*connect.Response[v1.ReserveResponse], error)
	// Initiate a deployment on this Runner.
	Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error)
	// Terminate the deployment on this Runner.
	Terminate(context.Context, *connect.Request[v1.TerminateRequest]) (*connect.Response[v1.RegisterRunnerRequest], error)
}

// NewRunnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerServiceHandler(svc RunnerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runnerServicePingHandler := connect.NewUnaryHandler(
		RunnerServicePingProcedure,
		svc.Ping,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceReserveHandler := connect.NewUnaryHandler(
		RunnerServiceReserveProcedure,
		svc.Reserve,
		opts...,
	)
	runnerServiceDeployHandler := connect.NewUnaryHandler(
		RunnerServiceDeployProcedure,
		svc.Deploy,
		opts...,
	)
	runnerServiceTerminateHandler := connect.NewUnaryHandler(
		RunnerServiceTerminateProcedure,
		svc.Terminate,
		opts...,
	)
	return "/xyz.block.ftl.v1.RunnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunnerServicePingProcedure:
			runnerServicePingHandler.ServeHTTP(w, r)
		case RunnerServiceReserveProcedure:
			runnerServiceReserveHandler.ServeHTTP(w, r)
		case RunnerServiceDeployProcedure:
			runnerServiceDeployHandler.ServeHTTP(w, r)
		case RunnerServiceTerminateProcedure:
			runnerServiceTerminateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerServiceHandler struct{}

func (UnimplementedRunnerServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.RunnerService.Ping is not implemented"))
}

func (UnimplementedRunnerServiceHandler) Reserve(context.Context, *connect.Request[v1.ReserveRequest]) (*connect.Response[v1.ReserveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.RunnerService.Reserve is not implemented"))
}

func (UnimplementedRunnerServiceHandler) Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.RunnerService.Deploy is not implemented"))
}

func (UnimplementedRunnerServiceHandler) Terminate(context.Context, *connect.Request[v1.TerminateRequest]) (*connect.Response[v1.RegisterRunnerRequest], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.RunnerService.Terminate is not implemented"))
}
