// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v1/provisioner/plugin.proto

package provisionerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	provisioner "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1/provisioner"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ProvisionerServiceName is the fully-qualified name of the ProvisionerService service.
	ProvisionerServiceName = "xyz.block.ftl.v1.provisioner.ProvisionerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProvisionerServicePingProcedure is the fully-qualified name of the ProvisionerService's Ping RPC.
	ProvisionerServicePingProcedure = "/xyz.block.ftl.v1.provisioner.ProvisionerService/Ping"
)

// ProvisionerServiceClient is a client for the xyz.block.ftl.v1.provisioner.ProvisionerService
// service.
type ProvisionerServiceClient interface {
	Ping(context.Context, *connect.Request[provisioner.PingRequest]) (*connect.Response[provisioner.PingResponse], error)
}

// NewProvisionerServiceClient constructs a client for the
// xyz.block.ftl.v1.provisioner.ProvisionerService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProvisionerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProvisionerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &provisionerServiceClient{
		ping: connect.NewClient[provisioner.PingRequest, provisioner.PingResponse](
			httpClient,
			baseURL+ProvisionerServicePingProcedure,
			opts...,
		),
	}
}

// provisionerServiceClient implements ProvisionerServiceClient.
type provisionerServiceClient struct {
	ping *connect.Client[provisioner.PingRequest, provisioner.PingResponse]
}

// Ping calls xyz.block.ftl.v1.provisioner.ProvisionerService.Ping.
func (c *provisionerServiceClient) Ping(ctx context.Context, req *connect.Request[provisioner.PingRequest]) (*connect.Response[provisioner.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ProvisionerServiceHandler is an implementation of the
// xyz.block.ftl.v1.provisioner.ProvisionerService service.
type ProvisionerServiceHandler interface {
	Ping(context.Context, *connect.Request[provisioner.PingRequest]) (*connect.Response[provisioner.PingResponse], error)
}

// NewProvisionerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProvisionerServiceHandler(svc ProvisionerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	provisionerServicePingHandler := connect.NewUnaryHandler(
		ProvisionerServicePingProcedure,
		svc.Ping,
		opts...,
	)
	return "/xyz.block.ftl.v1.provisioner.ProvisionerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProvisionerServicePingProcedure:
			provisionerServicePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProvisionerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProvisionerServiceHandler struct{}

func (UnimplementedProvisionerServiceHandler) Ping(context.Context, *connect.Request[provisioner.PingRequest]) (*connect.Response[provisioner.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.provisioner.ProvisionerService.Ping is not implemented"))
}
