// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v1/language/language.proto

package languagepbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1"
	language "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1/language"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// LanguageServiceName is the fully-qualified name of the LanguageService service.
	LanguageServiceName = "xyz.block.ftl.v1.language.LanguageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LanguageServicePingProcedure is the fully-qualified name of the LanguageService's Ping RPC.
	LanguageServicePingProcedure = "/xyz.block.ftl.v1.language.LanguageService/Ping"
	// LanguageServiceCreateModuleProcedure is the fully-qualified name of the LanguageService's
	// CreateModule RPC.
	LanguageServiceCreateModuleProcedure = "/xyz.block.ftl.v1.language.LanguageService/CreateModule"
	// LanguageServiceGetDependenciesProcedure is the fully-qualified name of the LanguageService's
	// GetDependencies RPC.
	LanguageServiceGetDependenciesProcedure = "/xyz.block.ftl.v1.language.LanguageService/GetDependencies"
	// LanguageServiceMetadataUpdatedProcedure is the fully-qualified name of the LanguageService's
	// MetadataUpdated RPC.
	LanguageServiceMetadataUpdatedProcedure = "/xyz.block.ftl.v1.language.LanguageService/MetadataUpdated"
	// LanguageServiceSchemaUpdatedProcedure is the fully-qualified name of the LanguageService's
	// SchemaUpdated RPC.
	LanguageServiceSchemaUpdatedProcedure = "/xyz.block.ftl.v1.language.LanguageService/SchemaUpdated"
	// LanguageServiceBuildProcedure is the fully-qualified name of the LanguageService's Build RPC.
	LanguageServiceBuildProcedure = "/xyz.block.ftl.v1.language.LanguageService/Build"
)

// LanguageServiceClient is a client for the xyz.block.ftl.v1.language.LanguageService service.
type LanguageServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Generates files for a new empty module with the requested name
	CreateModule(context.Context, *connect.Request[language.CreateModuleRequest]) (*connect.Response[language.CreateModuleResponse], error)
	// Extract dependencies for a module
	GetDependencies(context.Context, *connect.Request[language.DependenciesRequest]) (*connect.Response[language.DependenciesResponse], error)
	// MetadataUpdated is called whenever the metadata for a module is updated.
	MetadataUpdated(context.Context, *connect.Request[language.MetadataUpdatedRequest]) (*connect.Response[language.MetadataUpdatedResponse], error)
	// SchemaUpdated is called whenever the relevant part of a schema is updated.
	//
	// The schema is not the full schema, rather it only modules in this module's dependency graph.
	// It does not contain the schema for this plugin's module.
	//
	// Language plugins should hold on to the latest schema they have seen.
	// SchemaUpdated is called:
	// - after ExtractDependencies and before Build (if there are any dependencies)
	// - when a dependant module is updated
	// - when the module's dependancies change
	SchemaUpdated(context.Context, *connect.Request[language.SchemaUpdatedRequest]) (*connect.Response[language.SchemaUpdatedResponse], error)
	// Build the module
	// The request can also indicate whether the plugin should watch for changes to the module and automatically rebuild
	// The response stream can send LogMessages and BuildResults, and ends with a BuildResponse
	Build(context.Context, *connect.Request[language.BuildRequest]) (*connect.ServerStreamForClient[language.BuildEvent], error)
}

// NewLanguageServiceClient constructs a client for the xyz.block.ftl.v1.language.LanguageService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLanguageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LanguageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &languageServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+LanguageServicePingProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createModule: connect.NewClient[language.CreateModuleRequest, language.CreateModuleResponse](
			httpClient,
			baseURL+LanguageServiceCreateModuleProcedure,
			opts...,
		),
		getDependencies: connect.NewClient[language.DependenciesRequest, language.DependenciesResponse](
			httpClient,
			baseURL+LanguageServiceGetDependenciesProcedure,
			opts...,
		),
		metadataUpdated: connect.NewClient[language.MetadataUpdatedRequest, language.MetadataUpdatedResponse](
			httpClient,
			baseURL+LanguageServiceMetadataUpdatedProcedure,
			opts...,
		),
		schemaUpdated: connect.NewClient[language.SchemaUpdatedRequest, language.SchemaUpdatedResponse](
			httpClient,
			baseURL+LanguageServiceSchemaUpdatedProcedure,
			opts...,
		),
		build: connect.NewClient[language.BuildRequest, language.BuildEvent](
			httpClient,
			baseURL+LanguageServiceBuildProcedure,
			opts...,
		),
	}
}

// languageServiceClient implements LanguageServiceClient.
type languageServiceClient struct {
	ping            *connect.Client[v1.PingRequest, v1.PingResponse]
	createModule    *connect.Client[language.CreateModuleRequest, language.CreateModuleResponse]
	getDependencies *connect.Client[language.DependenciesRequest, language.DependenciesResponse]
	metadataUpdated *connect.Client[language.MetadataUpdatedRequest, language.MetadataUpdatedResponse]
	schemaUpdated   *connect.Client[language.SchemaUpdatedRequest, language.SchemaUpdatedResponse]
	build           *connect.Client[language.BuildRequest, language.BuildEvent]
}

// Ping calls xyz.block.ftl.v1.language.LanguageService.Ping.
func (c *languageServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// CreateModule calls xyz.block.ftl.v1.language.LanguageService.CreateModule.
func (c *languageServiceClient) CreateModule(ctx context.Context, req *connect.Request[language.CreateModuleRequest]) (*connect.Response[language.CreateModuleResponse], error) {
	return c.createModule.CallUnary(ctx, req)
}

// GetDependencies calls xyz.block.ftl.v1.language.LanguageService.GetDependencies.
func (c *languageServiceClient) GetDependencies(ctx context.Context, req *connect.Request[language.DependenciesRequest]) (*connect.Response[language.DependenciesResponse], error) {
	return c.getDependencies.CallUnary(ctx, req)
}

// MetadataUpdated calls xyz.block.ftl.v1.language.LanguageService.MetadataUpdated.
func (c *languageServiceClient) MetadataUpdated(ctx context.Context, req *connect.Request[language.MetadataUpdatedRequest]) (*connect.Response[language.MetadataUpdatedResponse], error) {
	return c.metadataUpdated.CallUnary(ctx, req)
}

// SchemaUpdated calls xyz.block.ftl.v1.language.LanguageService.SchemaUpdated.
func (c *languageServiceClient) SchemaUpdated(ctx context.Context, req *connect.Request[language.SchemaUpdatedRequest]) (*connect.Response[language.SchemaUpdatedResponse], error) {
	return c.schemaUpdated.CallUnary(ctx, req)
}

// Build calls xyz.block.ftl.v1.language.LanguageService.Build.
func (c *languageServiceClient) Build(ctx context.Context, req *connect.Request[language.BuildRequest]) (*connect.ServerStreamForClient[language.BuildEvent], error) {
	return c.build.CallServerStream(ctx, req)
}

// LanguageServiceHandler is an implementation of the xyz.block.ftl.v1.language.LanguageService
// service.
type LanguageServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Generates files for a new empty module with the requested name
	CreateModule(context.Context, *connect.Request[language.CreateModuleRequest]) (*connect.Response[language.CreateModuleResponse], error)
	// Extract dependencies for a module
	GetDependencies(context.Context, *connect.Request[language.DependenciesRequest]) (*connect.Response[language.DependenciesResponse], error)
	// MetadataUpdated is called whenever the metadata for a module is updated.
	MetadataUpdated(context.Context, *connect.Request[language.MetadataUpdatedRequest]) (*connect.Response[language.MetadataUpdatedResponse], error)
	// SchemaUpdated is called whenever the relevant part of a schema is updated.
	//
	// The schema is not the full schema, rather it only modules in this module's dependency graph.
	// It does not contain the schema for this plugin's module.
	//
	// Language plugins should hold on to the latest schema they have seen.
	// SchemaUpdated is called:
	// - after ExtractDependencies and before Build (if there are any dependencies)
	// - when a dependant module is updated
	// - when the module's dependancies change
	SchemaUpdated(context.Context, *connect.Request[language.SchemaUpdatedRequest]) (*connect.Response[language.SchemaUpdatedResponse], error)
	// Build the module
	// The request can also indicate whether the plugin should watch for changes to the module and automatically rebuild
	// The response stream can send LogMessages and BuildResults, and ends with a BuildResponse
	Build(context.Context, *connect.Request[language.BuildRequest], *connect.ServerStream[language.BuildEvent]) error
}

// NewLanguageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLanguageServiceHandler(svc LanguageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	languageServicePingHandler := connect.NewUnaryHandler(
		LanguageServicePingProcedure,
		svc.Ping,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	languageServiceCreateModuleHandler := connect.NewUnaryHandler(
		LanguageServiceCreateModuleProcedure,
		svc.CreateModule,
		opts...,
	)
	languageServiceGetDependenciesHandler := connect.NewUnaryHandler(
		LanguageServiceGetDependenciesProcedure,
		svc.GetDependencies,
		opts...,
	)
	languageServiceMetadataUpdatedHandler := connect.NewUnaryHandler(
		LanguageServiceMetadataUpdatedProcedure,
		svc.MetadataUpdated,
		opts...,
	)
	languageServiceSchemaUpdatedHandler := connect.NewUnaryHandler(
		LanguageServiceSchemaUpdatedProcedure,
		svc.SchemaUpdated,
		opts...,
	)
	languageServiceBuildHandler := connect.NewServerStreamHandler(
		LanguageServiceBuildProcedure,
		svc.Build,
		opts...,
	)
	return "/xyz.block.ftl.v1.language.LanguageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LanguageServicePingProcedure:
			languageServicePingHandler.ServeHTTP(w, r)
		case LanguageServiceCreateModuleProcedure:
			languageServiceCreateModuleHandler.ServeHTTP(w, r)
		case LanguageServiceGetDependenciesProcedure:
			languageServiceGetDependenciesHandler.ServeHTTP(w, r)
		case LanguageServiceMetadataUpdatedProcedure:
			languageServiceMetadataUpdatedHandler.ServeHTTP(w, r)
		case LanguageServiceSchemaUpdatedProcedure:
			languageServiceSchemaUpdatedHandler.ServeHTTP(w, r)
		case LanguageServiceBuildProcedure:
			languageServiceBuildHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLanguageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLanguageServiceHandler struct{}

func (UnimplementedLanguageServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.language.LanguageService.Ping is not implemented"))
}

func (UnimplementedLanguageServiceHandler) CreateModule(context.Context, *connect.Request[language.CreateModuleRequest]) (*connect.Response[language.CreateModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.language.LanguageService.CreateModule is not implemented"))
}

func (UnimplementedLanguageServiceHandler) GetDependencies(context.Context, *connect.Request[language.DependenciesRequest]) (*connect.Response[language.DependenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.language.LanguageService.GetDependencies is not implemented"))
}

func (UnimplementedLanguageServiceHandler) MetadataUpdated(context.Context, *connect.Request[language.MetadataUpdatedRequest]) (*connect.Response[language.MetadataUpdatedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.language.LanguageService.MetadataUpdated is not implemented"))
}

func (UnimplementedLanguageServiceHandler) SchemaUpdated(context.Context, *connect.Request[language.SchemaUpdatedRequest]) (*connect.Response[language.SchemaUpdatedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.language.LanguageService.SchemaUpdated is not implemented"))
}

func (UnimplementedLanguageServiceHandler) Build(context.Context, *connect.Request[language.BuildRequest], *connect.ServerStream[language.BuildEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.language.LanguageService.Build is not implemented"))
}
