syntax = "proto3";

package xyz.block.ftl.v1;

import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1;ftlv1";
option java_multiple_files = true;

message ConfigRef {
  optional string module = 1;
  string name = 2;
}

enum ConfigProvider {
  // Write values inline in the configuration file.
  CONFIG_INLINE = 0;

  // Print configuration as environment variables.
  CONFIG_ENVAR = 1;

  // Use the database as a configuration store.
  CONFIG_DB = 2;
}

message ListConfigRequest {
  optional string module = 1;
  optional bool include_values = 2;
  optional ConfigProvider provider = 3;
}
message ListConfigResponse {
  message Config {
    string ref_path = 1;
    optional bytes value = 2;
  }
  repeated Config configs = 1;
}

message GetConfigRequest {
  ConfigRef ref = 1;
}
message GetConfigResponse {
  bytes value = 1;
}

message SetConfigRequest {
  optional ConfigProvider provider = 1;
  ConfigRef ref = 2;
  bytes value = 3;
}
message SetConfigResponse {}

message UnsetConfigRequest {
  optional ConfigProvider provider = 1;
  ConfigRef ref = 2;
}
message UnsetConfigResponse {}

enum SecretProvider {
  // Write values inline in the configuration file.
  SECRET_INLINE = 0;

  // Print configuration as environment variables.
  SECRET_ENVAR = 1;

  // Write to the system keychain.
  SECRET_KEYCHAIN = 2;

  // Store a secret in the 1Password vault.
  SECRET_OP = 3;

  // Store a secret in the AWS Secrets Manager.
  SECRET_ASM = 4;
}

message ListSecretsRequest {
  optional string module = 1;
  optional bool include_values = 2;
  optional SecretProvider provider = 3;
}
message ListSecretsResponse {
  message Secret {
    string ref_path = 1;
    optional bytes value = 2;
  }
  repeated Secret secrets = 1;
}

message GetSecretRequest {
  ConfigRef ref = 1;
}
message GetSecretResponse {
  bytes value = 1;
}

message SetSecretRequest {
  optional SecretProvider provider = 1;
  ConfigRef ref = 2;
  bytes value = 3;
}
message SetSecretResponse {}

message UnsetSecretRequest {
  optional SecretProvider provider = 1;
  ConfigRef ref = 2;
}
message UnsetSecretResponse {}

// AdminService is the service that provides and updates admin data. For example,
// it is used to encapsulate configuration and secrets.
service AdminService {
  rpc Ping(PingRequest) returns (PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // List configuration.
  rpc ConfigList(ListConfigRequest) returns (ListConfigResponse);

  // Get a config value.
  rpc ConfigGet(GetConfigRequest) returns (GetConfigResponse);

  // Set a config value.
  rpc ConfigSet(SetConfigRequest) returns (SetConfigResponse);

  // Unset a config value.
  rpc ConfigUnset(UnsetConfigRequest) returns (UnsetConfigResponse);

  // List secrets.
  rpc SecretsList(ListSecretsRequest) returns (ListSecretsResponse);

  // Get a secret.
  rpc SecretGet(GetSecretRequest) returns (GetSecretResponse);

  // Set a secret.
  rpc SecretSet(SetSecretRequest) returns (SetSecretResponse);

  // Unset a secret.
  rpc SecretUnset(UnsetSecretRequest) returns (UnsetSecretResponse);
}
