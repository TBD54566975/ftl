syntax = "proto3";

package xyz.block.ftl.timeline.v1;

import "google/protobuf/timestamp.proto";
import "xyz/block/ftl/timeline/v1/event.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/timeline/v1;timelinev1";
option java_multiple_files = true;

message GetTimelineRequest {
  // Limit the number of events returned.
  message LimitFilter {
    int32 limit = 1;
  }
  // Filters events by log level.
  message LogLevelFilter {
    timeline.v1.LogLevel log_level = 1;
  }
  // Filters events by deployment key.
  message DeploymentFilter {
    repeated string deployments = 1;
  }
  // Filters events by request key.
  message RequestFilter {
    repeated string requests = 1;
  }
  // Filters events by event type.
  message EventTypeFilter {
    repeated timeline.v1.EventType event_types = 1;
  }
  // Filters events by time.
  //
  // Either end of the time range can be omitted to indicate no bound.
  message TimeFilter {
    optional google.protobuf.Timestamp older_than = 1;
    optional google.protobuf.Timestamp newer_than = 2;
  }
  // Filters events by ID.
  //
  // Either end of the ID range can be omitted to indicate no bound.
  message IDFilter {
    optional int64 lower_than = 1;
    optional int64 higher_than = 2;
  }
  // Filters events by call.
  message CallFilter {
    string dest_module = 1;
    optional string dest_verb = 2;
    optional string source_module = 3;
  }
  message ModuleFilter {
    string module = 1;
    optional string verb = 2;
  }

  enum Order {
    ORDER_UNSPECIFIED = 0;
    ORDER_ASC = 1;
    ORDER_DESC = 2;
  }

  message Filter {
    // TODO: update this comment
    // These map 1:1 with filters in backend/controller/internal/dal/events.go
    oneof filter {
      LimitFilter limit = 1;
      LogLevelFilter log_level = 2;
      DeploymentFilter deployments = 3;
      RequestFilter requests = 4;
      EventTypeFilter event_types = 5;
      TimeFilter time = 6;
      IDFilter id = 7;
      CallFilter call = 8;
      ModuleFilter module = 9;
    }
  }

  repeated Filter filters = 1;
  int32 limit = 2;
  Order order = 3;
}

message GetTimelineResponse {
  repeated timeline.v1.Event events = 1;
}

message CreateEventRequest {
  oneof entry {
    LogEvent log = 1;
    CallEvent call = 2;
    DeploymentCreatedEvent deployment_created = 3;
    DeploymentUpdatedEvent deployment_updated = 4;
    IngressEvent ingress = 5;
    CronScheduledEvent cron_scheduled = 6;
    AsyncExecuteEvent async_execute = 7;
    PubSubPublishEvent pubsub_publish = 8;
    PubSubConsumeEvent pubsub_consume = 9;
  }
}

message CreateEventResponse {}

message DeleteOldEventsRequest {
  timeline.v1.EventType event_type = 1;
  int64 age_seconds = 2;
}

message DeleteOldEventsResponse {
  int64 deleted_count = 1;
}

service TimelineService {
  // Ping service for readiness
  rpc Ping(ftl.v1.PingRequest) returns (ftl.v1.PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Get timeline events, optionally filtered by type and time
  rpc GetTimeline(GetTimelineRequest) returns (GetTimelineResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse) {}

  // Delete old events of a specific type
  rpc DeleteOldEvents(DeleteOldEventsRequest) returns (DeleteOldEventsResponse) {}
}
