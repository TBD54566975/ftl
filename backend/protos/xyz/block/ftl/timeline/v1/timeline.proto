syntax = "proto3";

package xyz.block.ftl.timeline.v1;

import "xyz/block/ftl/timeline/v1/event.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/timeline/v1;timelinev1";
option java_multiple_files = true;

message GetTimelineRequest {
  string deployment_key = 1;
  optional int64 since_id = 2;
  optional int32 limit = 3;
  repeated timeline.v1.EventType event_types = 4;
}

message GetTimelineResponse {
  repeated timeline.v1.Event events = 1;
}

message CreateEventRequest {
  oneof entry {
    LogEvent log = 1;
    CallEvent call = 2;
    DeploymentCreatedEvent deployment_created = 3;
    DeploymentUpdatedEvent deployment_updated = 4;
    IngressEvent ingress = 5;
    CronScheduledEvent cron_scheduled = 6;
    AsyncExecuteEvent async_execute = 7;
    PubSubPublishEvent pubsub_publish = 8;
    PubSubConsumeEvent pubsub_consume = 9;
  }
}

message CreateEventResponse {}

message DeleteOldEventsRequest {
  timeline.v1.EventType event_type = 1;
  int64 age_seconds = 2;
}

message DeleteOldEventsResponse {
  int64 deleted_count = 1;
}

service TimelineService {
  // Ping service for readiness
  rpc Ping(ftl.v1.PingRequest) returns (ftl.v1.PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Get timeline events, optionally filtered by type and time
  rpc GetTimeline(GetTimelineRequest) returns (GetTimelineResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse) {}

  // Delete old events of a specific type
  rpc DeleteOldEvents(DeleteOldEventsRequest) returns (DeleteOldEventsResponse) {}
}
