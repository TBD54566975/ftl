# Code generated by FTL. DO NOT EDIT.

{{- range $import, $alias := (.Module | imports)}}
{{if $alias}}import {{$alias}} as {{else}}import {{end}}"{{$import}}"
{{- end}}

{{- $sumTypes := (.Module | sumTypes)}}
{{- if $sumTypes}}
from typing import Union, Any
{{- end}}

{{- range .Module.Decls }}
{{- if .IsExported}}
{{if .Comments}}
"""
{{.Comments|comment}}
"""
{{- end}}
{{- if is "Topic" .}}
{{.Name|title}} = ftl.Topic["{{.Name}}"]
{{- else if and (is "Enum" .) .IsValueEnum}}
# ftl:enum
from enum import Enum

class {{.Name|title}}(Enum):
  {{- range .Variants }}
  {{.Name|title}} = {{.Value|value}}
  {{- end}}

{{- else if is "Enum" . }}
# ftl:enum
class {{.Name|title}}:
    @staticmethod
    def _enum_interface() -> None:
        pass

{{- range .Variants }}
class {{.Name|title}}({{.Name|title}}):
    pass
{{- end}}

{{- else if is "TypeAlias" .}}
# ftl:typealias
{{.Name|title}} = {{typeAliasType $.Module .}}

{{- else if is "Data" .}}
from dataclasses import dataclass

@dataclass
class {{.Name|title}}:
    {{- range .Fields}}
    {{.Name|snakeCase}}: {{type $.Module .Type}}  # json: "{{.Name}}"
    {{- end}}

{{- else if is "Verb" .}}
# ftl:verb
{{- if and (eq (type $.Module .Request) "ftl.Unit") (eq (type $.Module .Response) "ftl.Unit")}}
class {{.Name|title}}Client:
    def __call__(self, context: Any) -> None:
        pass

{{- else if eq (type $.Module .Request) "ftl.Unit"}}
class {{.Name|title}}Client:
    def __call__(self, context: Any) -> {{type $.Module .Response}}:
        pass

{{- else if eq (type $.Module .Response) "ftl.Unit"}}
class {{.Name|title}}Client:
    def __call__(self, context: Any, request: {{type $.Module .Request}}) -> None:
        pass

{{- else}}
class {{.Name|title}}Client:
    def __call__(self, context: Any, request: {{type $.Module .Request}}) -> {{type $.Module .Response}}:
        pass
{{- end}}

{{- end}}
{{- end}}
{{- end}}

{{- if $sumTypes}}
# Registering sum types
class SumTypeRegistry:
    @staticmethod
    def register():
        {{- range $sumTypes}}
        # Register sum type {{.Name|title}}
        pass
        {{- range .Variants}}
        # Register variant {{.Name|title}}
        pass
        {{- end}}
        {{- end}}

SumTypeRegistry.register()
{{- end}}

{{- if eq .Module.Name "builtin"}}

# A helper for successful HttpResponse
def http_success(code: int, body: Any) -> dict:
    return {"status": code, "body": body}

# A helper for HttpResponse with error
def http_error(code: int, error: Any) -> dict:
    return {"status": code, "error": error}

{{- end}}
