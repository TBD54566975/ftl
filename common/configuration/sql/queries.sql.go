// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sql

import (
	"context"
	"encoding/json"

	"github.com/alecthomas/types/optional"
)

const getModuleConfiguration = `-- name: GetModuleConfiguration :one
SELECT value
FROM module_configuration
WHERE
  (module IS NULL OR module = $1)
  AND name = $2
ORDER BY module NULLS LAST
LIMIT 1
`

func (q *Queries) GetModuleConfiguration(ctx context.Context, module optional.Option[string], name string) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getModuleConfiguration, module, name)
	var value json.RawMessage
	err := row.Scan(&value)
	return value, err
}

const getModuleSecretURL = `-- name: GetModuleSecretURL :one
SELECT url
FROM module_secrets
WHERE
  (module IS NULL OR module = $1)
  AND name = $2
ORDER BY module NULLS LAST
LIMIT 1
`

func (q *Queries) GetModuleSecretURL(ctx context.Context, module optional.Option[string], name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getModuleSecretURL, module, name)
	var url string
	err := row.Scan(&url)
	return url, err
}

const listModuleConfiguration = `-- name: ListModuleConfiguration :many
SELECT id, created_at, module, name, value
FROM module_configuration
ORDER BY module, name
`

func (q *Queries) ListModuleConfiguration(ctx context.Context) ([]ModuleConfiguration, error) {
	rows, err := q.db.QueryContext(ctx, listModuleConfiguration)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ModuleConfiguration
	for rows.Next() {
		var i ModuleConfiguration
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Module,
			&i.Name,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listModuleSecrets = `-- name: ListModuleSecrets :many
SELECT id, created_at, module, name, url
FROM module_secrets
ORDER BY module, name
`

func (q *Queries) ListModuleSecrets(ctx context.Context) ([]ModuleSecret, error) {
	rows, err := q.db.QueryContext(ctx, listModuleSecrets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ModuleSecret
	for rows.Next() {
		var i ModuleSecret
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Module,
			&i.Name,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setModuleConfiguration = `-- name: SetModuleConfiguration :exec
INSERT INTO module_configuration (module, name, value)
VALUES ($1, $2, $3)
ON CONFLICT ((COALESCE(module, '')), name) DO UPDATE SET value = $3
`

func (q *Queries) SetModuleConfiguration(ctx context.Context, module optional.Option[string], name string, value json.RawMessage) error {
	_, err := q.db.ExecContext(ctx, setModuleConfiguration, module, name, value)
	return err
}

const setModuleSecretURL = `-- name: SetModuleSecretURL :exec
INSERT INTO module_secrets (module, name, url)
VALUES ($1, $2, $3)
ON CONFLICT ((COALESCE(module, '')), name) DO UPDATE SET url = $3
`

func (q *Queries) SetModuleSecretURL(ctx context.Context, module optional.Option[string], name string, url string) error {
	_, err := q.db.ExecContext(ctx, setModuleSecretURL, module, name, url)
	return err
}

const unsetModuleConfiguration = `-- name: UnsetModuleConfiguration :exec
DELETE FROM module_configuration
WHERE COALESCE(module, '') = COALESCE($1, '') AND name = $2
`

func (q *Queries) UnsetModuleConfiguration(ctx context.Context, module optional.Option[string], name string) error {
	_, err := q.db.ExecContext(ctx, unsetModuleConfiguration, module, name)
	return err
}

const unsetModuleSecret = `-- name: UnsetModuleSecret :exec
DELETE FROM module_secrets
WHERE COALESCE(module, '') = COALESCE($1, '') AND name = $2
`

func (q *Queries) UnsetModuleSecret(ctx context.Context, module optional.Option[string], name string) error {
	_, err := q.db.ExecContext(ctx, unsetModuleSecret, module, name)
	return err
}
