// Code generated by FTL. DO NOT EDIT.

package {{.Module.Name}}

import (
  "context"
{{- range $import, $alias := (.Module | imports)}}
  {{if $alias}}{{$alias}} {{end}}"{{$import}}"
{{- end}}
{{- $sumTypes := (.Module | sumTypes)}}
{{- if $sumTypes}}

  "github.com/block/ftl/common/reflection"
{{- end}}
)

var _ = context.Background

{{- range .Module.Decls }}
{{- if .IsExported}}
{{if .Comments}}
{{.Comments|comment -}}
//
{{- end}}
{{- if is "Topic" .}}
type {{.Name|title}} = ftl.TopicHandle[{{type $.Module .Event}}, ftl.ExternalPartitionMapper[{{type $.Module .Event}}]]
{{- else if and (is "Enum" .) .IsValueEnum}}
{{- $enumName := .Name}}
//ftl:enum
type {{.Name|title}} {{type $.Module .Type}}
const (
  {{- range .Variants }}
  {{.Name|title}} {{$enumName}} = {{.Value|value}}
  {{- end}}
)
{{- else if is "Enum" . }}
//ftl:enum
{{$enumInterfaceFuncName := enumInterfaceFunc . -}}
type {{.Name|title}} interface { {{$enumInterfaceFuncName}}() }
{{- range .Variants }}
{{if (or (basicType $.Module .) (isStandaloneEnumVariant .))}}
type {{.Name|title}} {{type $.Module .Value.Value}}
{{end}}
func ({{.Name|title}}) {{$enumInterfaceFuncName}}() {}
{{- end}}
{{- else if is "TypeAlias" .}}
//ftl:typealias
type {{.Name|title}} = {{typeAliasType $.Module .}}
{{- else if is "Data" .}}
type {{.Name|title}}
{{- if .TypeParameters}}[
{{- range $i, $tp := .TypeParameters}}
{{- if $i}}, {{end}}{{$tp}} any
{{- end -}}
]{{- end}} struct {
  {{- range .Fields}}
  {{.Name|title}} {{type $.Module .Type}} `json:"{{.Name}}"`
  {{- end}}
}
{{- else if is "Verb" .}}
//ftl:verb
{{- if and (eq (type $.Module .Request) "ftl.Unit") (eq (type $.Module .Response) "ftl.Unit")}}
type {{.Name|title}}Client func(context.Context) error
{{- else if eq (type $.Module .Request) "ftl.Unit"}}
type {{.Name|title}}Client func(context.Context) ({{type $.Module .Response}}, error)
{{- else if eq (type $.Module .Response) "ftl.Unit"}}
type {{.Name|title}}Client func(context.Context, {{type $.Module .Request}})
{{- else}}
type {{.Name|title}}Client func(context.Context, {{type $.Module .Request}}) ({{type $.Module .Response}}, error)
{{- end}}
{{- end}}
{{- end}}
{{- end}}
{{- if $sumTypes}}

func init() {
  reflection.Register(
{{- range $sumTypes}}
    reflection.SumType[{{.Name|title}}](
{{- range .Variants}}
      *new({{.Name|title}}),
{{- end}}
    ),
{{- end}}
  )
}
{{- end}}
{{- if eq .Module.Name "builtin"}}

// A helper for successful HttpResponse
//
func HttpSuccess[E any, B any](code int, body B) HttpResponse[B, E] {
  return HttpResponse[B, E]{Status: code, Body: ftl.Some(body)}
}

// A helper for HttpResponse with error
//
func HttpError[B any, E any](code int, e E) HttpResponse[B, E] {
  return HttpResponse[B, E]{Status: code, Error: ftl.Some(e)}
}
{{- end}}
