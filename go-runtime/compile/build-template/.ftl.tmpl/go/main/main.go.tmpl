{{- $verbs := .Verbs -}}
{{- $name := .Name -}}
{{- with .MainCtx -}}

// Code generated by FTL. DO NOT EDIT.
package main

import (
{{- range .Imports }}
	{{.}}
{{- end}}
)
{{- if or .SumTypes .ExternalTypes $verbs }}

func init() {
	reflection.Register(
{{- range .SumTypes}}
		reflection.SumType[{{.TypeName}}](
			{{- range .Variants}}
			*new({{.TypeName}}),
			{{- end}}
		),
{{- end}}
{{- range .ExternalTypes}}
		reflection.ExternalType(*new({{.TypeName}})),
{{- end}}
{{- range $verbs}}
		reflection.ProvideResourcesForVerb(
            {{.TypeName}},
            {{- range .Resources}}
                {{- with getVerbClient . }}
            	{{- if and (eq .Request.TypeName "ftl.Unit") (eq .Response.TypeName "ftl.Unit") }}
            server.EmptyClient[{{.TypeName}}](),
            	{{- else if eq .Request.TypeName "ftl.Unit" }}
            server.SourceClient[{{.TypeName}}, {{.Response.TypeName}}](),
            	{{- else if eq .Response.TypeName "ftl.Unit" }}
            server.SinkClient[{{.TypeName}}, {{.Request.TypeName}}](),
            	{{- else }}
            server.VerbClient[{{.TypeName}}, {{.Request.TypeName}}, {{.Response.TypeName}}](),
            	{{- end -}}
                {{- end }}
			{{- end}}
		),
{{- end}}
	)
}
{{- end}}

func main() {
	verbConstructor := server.NewUserVerbServer("{{.ProjectName}}", "{{$name}}",
{{- range $verbs }}
	{{- if and (eq .Request.TypeName "ftl.Unit") (eq .Response.TypeName "ftl.Unit") }}
		server.HandleEmpty({{.TypeName}}),
	{{- else if eq .Request.TypeName "ftl.Unit" }}
		server.HandleSource[{{.Response.TypeName}}]({{.TypeName}}),
	{{- else if eq .Response.TypeName "ftl.Unit" }}
		server.HandleSink[{{.Request.TypeName}}]({{.TypeName}}),
	{{- else }}
		server.HandleCall[{{.Request.TypeName}}, {{.Response.TypeName}}]({{.TypeName}}),
	{{- end -}}
{{- end}}
	)
	plugin.Start(context.Background(), "{{$name}}", verbConstructor, ftlv1connect.VerbServiceName, ftlv1connect.NewVerbServiceHandler)
}
{{- end -}}