{{- $moduleName := .Name -}}
{{- $verbs := .Verbs -}}
{{- $name := .Name -}}
{{- with .TypesCtx -}}

// Code generated by FTL. DO NOT EDIT.
package {{$name}}

{{ if .Imports -}}
import (
{{- range .Imports }}
    {{ if ne . (printf "%q" (printf "ftl/%s" $moduleName)) -}}
	{{.}}
	{{- end}}
{{- end }}
)
{{ end }}

{{- range $verbs -}}
	{{ $req := trimModuleQualifier $moduleName .Request.TypeName -}}
	{{ $resp := trimModuleQualifier $moduleName .Response.TypeName -}}

	{{ if and (eq .Request.TypeName "ftl.Unit") (eq .Response.TypeName "ftl.Unit")}}
type {{.Name|title}}Client func(context.Context) error
	{{- else if eq .Request.TypeName "ftl.Unit" }}
type {{.Name|title}}Client func(context.Context) ({{$resp}}, error)
	{{- else if eq .Response.TypeName "ftl.Unit" }}
type {{.Name|title}}Client func(context.Context, {{$req}}) error
	{{- else }}
type {{.Name|title}}Client func(context.Context, {{$req}}) ({{$resp}}, error)
	{{- end }}
{{ end -}}

{{- if or .SumTypes .ExternalTypes $verbs }}
func init() {
	reflection.Register(
{{- range .SumTypes}}
		reflection.SumType[{{ trimModuleQualifier $moduleName .TypeName }}](
			{{- range .Variants}}
			*new({{ trimModuleQualifier $moduleName .Name }}),
			{{- end}}
		),
{{- end}}
{{- range .ExternalTypes}}
		reflection.ExternalType(*new({{.TypeName}})),
{{- end}}
{{- range $verbs}}
		reflection.ProvideResourcesForVerb(
            {{ trimModuleQualifier $moduleName .TypeName }},
            {{- range .Resources}}
                {{- with getVerbClient . }}
            server.VerbClient[{{trimModuleQualifier $moduleName .TypeName}}, {{trimModuleQualifier $moduleName .Request.TypeName}}, {{trimModuleQualifier $moduleName .Response.TypeName}}](),
                {{- end }}
			{{- end}}
		),
{{- end}}
	)
}
{{- end -}}
{{- end -}}
