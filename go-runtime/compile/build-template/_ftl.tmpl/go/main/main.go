// Code generated by FTL. DO NOT EDIT.
package main

import (
	"context"
{{- if .SumTypes }}
	"reflect"
{{ end }}
	"github.com/TBD54566975/ftl/common/plugin"
	"github.com/TBD54566975/ftl/go-runtime/server"
	"github.com/TBD54566975/ftl/backend/protos/xyz/block/ftl/v1/ftlv1connect"
{{- if .SumTypes }}
	"github.com/TBD54566975/ftl/go-runtime/ftl"
{{- end }}
{{ range mainImports . }}
	"ftl/{{.}}"
{{- end}}
)

func main() {
	verbConstructor := server.NewUserVerbServer("{{.Name}}",
{{- range .Verbs}}
	{{- if and .HasRequest .HasResponse}}
		server.HandleCall({{$.Name}}.{{.Name}}),
	{{- else if .HasRequest}}
		server.HandleSink({{$.Name}}.{{.Name}}),
	{{- else if .HasResponse}}
		server.HandleSource({{$.Name}}.{{.Name}}),
	{{- else}}
		server.HandleEmpty({{$.Name}}.{{.Name}}),
	{{- end}}
{{- end}}
	)
	ctx := context.Background()

	{{- if .SumTypes}}
	typeRegistry := ftl.NewTypeRegistry()
	{{- end}}
	{{- range .SumTypes}}
	typeRegistry.RegisterSumType(reflect.TypeFor[{{.Discriminator}}](), map[string]reflect.Type{
		{{- range .Variants}}
		"{{.Name}}": reflect.TypeFor[{{.Type}}](),
		{{- end}}
	})
	{{- end}}
	{{- if .SumTypes}}
	ctx = context.WithValue(ctx, "typeRegistry", typeRegistry)
	{{- end}}

	plugin.Start(ctx, "{{.Name}}", verbConstructor, ftlv1connect.VerbServiceName, ftlv1connect.NewVerbServiceHandler)
}
